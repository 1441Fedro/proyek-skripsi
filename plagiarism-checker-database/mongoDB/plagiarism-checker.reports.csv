_id,file_name,file_path,uploaded_at,extracted_text,text_hash,batch_id
68443aa6ccf2e5dce2fb9732,50421503 (1).docx,uploaded_reports/1707c147-efa7-4a6c-a57d-b6c8438d2153_dataset.zip,2025-06-07T13:12:06.599Z,"logika  	gambar di atas adalah program sederhana menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawali dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsi act() dimana fungsi tersebut akan mengembalikan nilai “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisi __name__ == “__main__” berfungsi agar program hanya dapat dijalankan secara langsung dari file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000.   output",0ff3c5ee52ac8ac1cbd0c67ca6ebed8e1ed03ea6b45ce816b0e9628f2745ce49,
68443aa6ccf2e5dce2fb9733,50421503 (2).docx,uploaded_reports/1707c147-efa7-4a6c-a57d-b6c8438d2153_dataset.zip,2025-06-07T13:12:06.703Z,"logika  	gambari dii atasi adalahi programi sederhanai menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawalii dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsii act() dimana fungsi tersebut akan mengembalikan nilaii “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisii __name__ == “__main__” berfungsii agar program hanya dapati dijalankan secara langsungi darii file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000.   output",1af2a6dac1835abdc85ec0eb823ee57dff916ac2ce358aa04b6a79655b54daab,
68443aaeccf2e5dce2fb9735,50421503 (1).docx,uploaded_reports/9091717d-88cf-4c07-bcb0-437d95286415_dataset.zip,2025-06-07T13:12:14.247Z,"logika  	gambar di atas adalah program sederhana menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawali dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsi act() dimana fungsi tersebut akan mengembalikan nilai “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisi __name__ == “__main__” berfungsi agar program hanya dapat dijalankan secara langsung dari file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000.   output",0ff3c5ee52ac8ac1cbd0c67ca6ebed8e1ed03ea6b45ce816b0e9628f2745ce49,
68443aaeccf2e5dce2fb9736,50421503 (2).docx,uploaded_reports/9091717d-88cf-4c07-bcb0-437d95286415_dataset.zip,2025-06-07T13:12:14.306Z,"logika  	gambari dii atasi adalahi programi sederhanai menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawalii dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsii act() dimana fungsi tersebut akan mengembalikan nilaii “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisii __name__ == “__main__” berfungsii agar program hanya dapati dijalankan secara langsungi darii file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000.   output",1af2a6dac1835abdc85ec0eb823ee57dff916ac2ce358aa04b6a79655b54daab,
68443cddf2716d21085c8728,50421503 (1).docx,uploaded_reports/eac91ef7-9232-4cd8-aeec-d9d6be5dd521_dataset.zip,2025-06-07T13:21:33.040Z,"logika  	gambar di atas adalah program sederhana menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawali dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsi act() dimana fungsi tersebut akan mengembalikan nilai “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisi __name__ == “__main__” berfungsi agar program hanya dapat dijalankan secara langsung dari file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000.   output",0ff3c5ee52ac8ac1cbd0c67ca6ebed8e1ed03ea6b45ce816b0e9628f2745ce49,fcd17e10-d959-4bb4-93b4-38641839255a
68443cddf2716d21085c8729,50421503 (2).docx,uploaded_reports/eac91ef7-9232-4cd8-aeec-d9d6be5dd521_dataset.zip,2025-06-07T13:21:33.134Z,"logika  	gambari dii atasi adalahi programi sederhanai menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawalii dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsii act() dimana fungsi tersebut akan mengembalikan nilaii “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisii __name__ == “__main__” berfungsii agar program hanya dapati dijalankan secara langsungi darii file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000.   output",1af2a6dac1835abdc85ec0eb823ee57dff916ac2ce358aa04b6a79655b54daab,fcd17e10-d959-4bb4-93b4-38641839255a
68450e25abd9fe407b6016a3,50421503 (1).docx,uploaded_reports/30e0fd9e-3866-4c55-bbcf-394fe83b79f8_dataset.zip,2025-06-08T04:14:29.773Z,"logika  	gambar di atas adalah program sederhana menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawali dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsi act() dimana fungsi tersebut akan mengembalikan nilai “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisi __name__ == “__main__” berfungsi agar program hanya dapat dijalankan secara langsung dari file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000.   output",0ff3c5ee52ac8ac1cbd0c67ca6ebed8e1ed03ea6b45ce816b0e9628f2745ce49,e00b7b96-2f57-4bce-aa6f-bfb0776e8588
68450e25abd9fe407b6016a4,50421503 (2).docx,uploaded_reports/30e0fd9e-3866-4c55-bbcf-394fe83b79f8_dataset.zip,2025-06-08T04:14:29.862Z,"logika  	gambari dii atasi adalahi programi sederhanai menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawalii dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsii act() dimana fungsi tersebut akan mengembalikan nilaii “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisii __name__ == “__main__” berfungsii agar program hanya dapati dijalankan secara langsungi darii file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000.   output",1af2a6dac1835abdc85ec0eb823ee57dff916ac2ce358aa04b6a79655b54daab,e00b7b96-2f57-4bce-aa6f-bfb0776e8588
684511f40bfa07be182336ed,50421503 (1).docx,uploaded_reports/672f7fb8-f5d7-44ee-9df8-e34ee58cd1b8_dataset.zip,2025-06-08T04:30:44.963Z,"logika  	gambar di atas adalah program sederhana menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawali dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsi act() dimana fungsi tersebut akan mengembalikan nilai “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisi __name__ == “__main__” berfungsi agar program hanya dapat dijalankan secara langsung dari file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000.   output",0ff3c5ee52ac8ac1cbd0c67ca6ebed8e1ed03ea6b45ce816b0e9628f2745ce49,47bb14f9-331f-4247-a3fd-e7c1d5d931ea
684511f50bfa07be182336ee,50421503 (2).docx,uploaded_reports/672f7fb8-f5d7-44ee-9df8-e34ee58cd1b8_dataset.zip,2025-06-08T04:30:45.033Z,"logika  	gambari dii atasi adalahi programi sederhanai menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawalii dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsii act() dimana fungsi tersebut akan mengembalikan nilaii “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisii __name__ == “__main__” berfungsii agar program hanya dapati dijalankan secara langsungi darii file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000.   output",1af2a6dac1835abdc85ec0eb823ee57dff916ac2ce358aa04b6a79655b54daab,47bb14f9-331f-4247-a3fd-e7c1d5d931ea
684512380bfa07be182336f0,50421503 (1).docx,uploaded_reports/9d8953f9-cc7b-4206-8200-e7baf39a12f8_dataset.zip,2025-06-08T04:31:52.552Z,"logika  	gambar di atas adalah program sederhana menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawali dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsi act() dimana fungsi tersebut akan mengembalikan nilai “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisi __name__ == “__main__” berfungsi agar program hanya dapat dijalankan secara langsung dari file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000.   output",0ff3c5ee52ac8ac1cbd0c67ca6ebed8e1ed03ea6b45ce816b0e9628f2745ce49,3e0f25ae-4cbe-4d02-bc23-28a6790bcfd6
684512380bfa07be182336f1,50421503 (2).docx,uploaded_reports/9d8953f9-cc7b-4206-8200-e7baf39a12f8_dataset.zip,2025-06-08T04:31:52.608Z,"logika  	gambari dii atasi adalahi programi sederhanai menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawalii dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsii act() dimana fungsi tersebut akan mengembalikan nilaii “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisii __name__ == “__main__” berfungsii agar program hanya dapati dijalankan secara langsungi darii file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000.   output",1af2a6dac1835abdc85ec0eb823ee57dff916ac2ce358aa04b6a79655b54daab,3e0f25ae-4cbe-4d02-bc23-28a6790bcfd6
6846b286ad8f0db9e169002f,50421291_LA3 - Copy.docx,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:06.950Z,"logika pemrograman merupakan keterampilan menyusun langkah-langkah pemecahan masalah dengan bahasa pemrograman. setelah listing program dibuat, tahap selanjutnya adalah menyusun logika untuk menghasilkan tampilan teks berjalan pada halaman html. bayangin kamu lagi bikin warung kopi kecil-kecilan di dunia maya, nah flask ini semacam kerangka kerja yang bantu kamu buka lapaknya. di contoh aplikasi sederhana ini, kita bikin satu jalur utama alias “route” yaitu /, yang kalau diakses, bakal manggil fungsi hello(). begitu dibuka lewat browser, tampilannya cuma bilang ""hello, brenda!"" — kayak sapaan awal dari warung kamu ke pengunjung pertama. aplikasi kayak gini biasanya dipakai buat tes doang, ngebuktiin kalau “dapur” server kamu nyala dan siap masak. tapi jangan salah, fondasi yang sederhana ini bisa kamu kembangin jadi restoran digital yang lebih kompleks nantinya. nah, bagian app.run() itu ibarat nyalain kompor — dia pastiin semuanya baru jalan kalau emang file-nya kamu yang nyalain sendiri, bukan numpang dari tempat lain. kode ini bisa jadi pondasi buat bikin aplikasi web yang lebih hidup dan interaktif ke depannya.",bb65bfd0b632cc0205197b24a2217279b93efb7e9884268cb3330c4600e65589,218152bc-3b05-4bc5-840c-ec49dfde3d7b
6846b287ad8f0db9e1690030,50421291_LA3.docx,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:07.013Z,"logika pemrograman menggambarkan pendekatan dalam menyusun solusi dari masalah menggunakan konsep pemrograman. pada program flask yang dibuat, sebuah route '/' ditetapkan untuk menjalankan fungsi hello(), yang menampilkan pesan ""hello, brenda!"" saat diakses via browser. ini merupakan dasar dari aplikasi web sederhana yang dapat dikembangkan lebih lanjut. dengan app.run(), server flask akan berjalan jika file dijalankan langsung, menjadikan aplikasi siap diuji secara lokal.  dalam aplikasi sederhana ini, digunakan framework flask dari python untuk membuat server web. hanya satu route yang didefinisikan, yaitu '/', yang dikaitkan dengan fungsi hello(). ketika pengguna mengakses url root tersebut, fungsi akan menampilkan teks “hello, brenda!” pada browser. aplikasi ini dirancang sebagai contoh sederhana untuk memperlihatkan cara kerja server web menggunakan flask. dengan menambahkan if __name__ == '__main__':, program dijalankan hanya ketika file dieksekusi langsung, dan app.run() digunakan untuk memulai server lokal. aplikasi ini bisa dikembangkan lebih lanjut menjadi sistem yang lebih dinamis dan interaktif.",db034f8d8d16a126f4ae1ff2b04ad0f3676c144fad353f68da4c442da98d7b5d,218152bc-3b05-4bc5-840c-ec49dfde3d7b
6846b287ad8f0db9e1690031,50421635_LA3 - Copy.docx,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:07.138Z,"logika program     aplikasi ini dibangun dengan framework flask dalam bahasa python. pada awalnya, modul flask diimpor, lalu dibuat objek app yang menjadi instansi utama dari aplikasi. kemudian, route '/' didefinisikan menggunakan @app.route('/'), yang menetapkan bahwa saat url utama diakses, fungsi hello() akan dijalankan. fungsi ini memberikan respons berupa string “ikhsan fikryanto | 50421635 | 4ia26” yang ditampilkan pada browser. untuk memastikan aplikasi dijalankan hanya saat file di-run secara langsung (bukan saat diimpor), digunakan kondisi if __name__ == '__main__':. server lokal kemudian diaktifkan dengan app.run(), memungkinkan pengguna untuk mengakses aplikasi melalui browser.   fungsi @app.route('/') merupakan decorator yang menentukan bahwa fungsi hello() akan dijalankan ketika pengguna mengakses halaman utama dari web yaitu (/). fungsi hello() akan mengembalikan string berupa ""ikhsan fikryanto | 50421635 | 4ia26"", yang ditampilkan di browser. if _name_ == '_main_': untuk memastikan bahwa server flask hanya akan dijalankan jika file ini dieksekusi secara langsung, bukan ketika diimpor sebagai modul di file lain. ketika dijalankan, aplikasi ini akan mengaktifkan server lokal dan dapat diakses melalui browser.  output",0c6c64b8b36c77dfba418ede5a956f3c5350bd8db5889a8d323fa751ce1ce09a,218152bc-3b05-4bc5-840c-ec49dfde3d7b
6846b287ad8f0db9e1690032,50421635_LA3.docx,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:07.169Z,"logika program     aplikasi web ini dibangun menggunakan framework flask di python. pertama, flask diimpor dan sebuah objek app dibuat. dengan mendefinisikan route '/', fungsi hello() akan dipanggil saat pengguna mengakses root url, lalu menampilkan pesan ""ikhsan fikryanto | 50421635 | 4ia26"". terakhir, if __name__ == '__main__': menjamin bahwa server hanya akan dijalankan ketika file di-run langsung. dengan app.run(), aplikasi bisa diakses dari browser melalui server lokal.    fungsi @app.route('/') adalah decorator yang menentukan bahwa fungsi hello() akan dijalankan ketika pengguna mengakses halaman utama dari web yaitu (/). fungsi hello() akan mengembalikan string berupa ""ikhsan fikryanto | 50421635 | 4ia26"", yang ditampilkan di browser. terakhir, bagian if _name_ == '_main_': digunakan untuk memastikan bahwa server flask hanya akan dijalankan jika file ini dieksekusi secara langsung, bukan ketika diimpor sebagai modul di file lain. ketika dijalankan, aplikasi ini akan mengaktifkan server lokal dan dapat diakses melalui browser.  output",e2ebae231aa2b37a241f43e419a4318d0e6c1041971f07ab24877eb41d194927,218152bc-3b05-4bc5-840c-ec49dfde3d7b
6846b287ad8f0db9e1690033,51421122_LA3.docx,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:07.302Z,"logika program logika pemrograman adalah kemampuan menggunakan ilmu pemrograman dalam memecahkan masalah (problem solving). setelah menulis listing program diatas, selanjutnya membuat perintah logika program flask & wireshark.  logika dari program diatas adalah : file app.py berisi kode flask yang menangani permintaan pengguna melalui root route '/', dan menjalankan fungsi profile(). fungsi ini menyiapkan data seperti nama, npm, dan kelas, lalu meneruskannya ke file html menggunakan render_template(). dengan demikian, tampilan web dihasilkan secara dinamis berdasarkan data tersebut. mode debug diaktifkan untuk kemudahan pengembangan.   file index.html merupakan template untuk menampilkan informasi yang dikirim dari backend flask. dengan menggunakan sintaks jinja seperti {{ name }}, data dinamis dapat dimasukkan langsung ke halaman web. template ini mengatur presentasi data mahasiswa dalam format yang menarik dan terstruktur.   singkatnya, flask dan html saling bahu-membahu. flask tangani logika dan data, html tampilkan hasilnya. dengan bantuan render_template(), data dari python bisa “disisipkan” ke halaman web pakai jinja2. ini contoh bagaimana backend dan frontend bisa kerja bareng dalam membuat web yang interaktif. output program  ketika program di running",2ae6fd9baaa8e806f375bdf03f828926ceb1115b8e0afb9e03c3a8129efc80c4,218152bc-3b05-4bc5-840c-ec49dfde3d7b
6846b287ad8f0db9e1690034,50421282_LA3.pdf,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:07.776Z,"logika program pada kode python pada gambar tersebut merupakan contoh sederhana aplikasi web menggunakan framework flask. baris pertama mengimpor kelas flask dari modul flask, yang digunakan untuk membuat objek aplikasi web. pada baris ketiga, objek aplikasi app dibuat dengan memberikan __name__ sebagai argumen, yang membantu flask menentukan lokasi file dan mengatur konfigurasi aplikasi. fungsi hello() didekorasi dengan @app.route('/'), yang artinya fungsi ini akan dijalankan saat pengguna mengakses url root (/) dari aplikasi. fungsi hello() mengembalikan string ""bintang armeyelia | 50421282 | 4ia26"", yang akan ditampilkan di browser sebagai respons. terakhir, baris if __name__ == '__main__': memastikan bahwa server flask hanya dijalankan jika file ini dieksekusi langsung, bukan saat diimpor sebagai modul. fungsi app.run() akan menjalankan server pengembangan flask agar aplikasi bisa diakses melalui browser. kode ini berguna untuk membuat aplikasi web sederhana dengan satu halaman utama yang menampilkan informasi pengguna. output program",14becbb8a0fac920647165a2e272b479e5a10d17ae31894a095edc6425233732,218152bc-3b05-4bc5-840c-ec49dfde3d7b
6846b287ad8f0db9e1690035,50421291_LA3.pdf,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:07.887Z,"logika pemrograman logika pemrograman adalah kemampuan menggunakan ilmu pemrograman dalam memecahkan masalah (problem solving). setelah menulis listing program diatas, selanjutnya membuat logika listing untuk membuat teks berjalan pada html. pada aplikasi flask sederhana ini, framework python flask digunakan untuk membuat server web. aplikasi ini mendefinisikan satu route (/), yang memetakan ke fungsi hello(). ketika pengguna mengunjungi url root, fungsi ini akan mengembalikan pesan ""hello, brenda!"" untuk ditampilkan di browser. jenis aplikasi web ini umumnya digunakan untuk pengujian, demonstrasi kemampuan server web dasar, atau sebagai dasar untuk aplikasi yang lebih kompleks. metode app.run() memastikan aplikasi berjalan ketika dijalankan langsung. kode ini menjadi dasar untuk membuat aplikasi web yang lebih dinamis dan interaktif menggunakan flask. output pemrograman",c733ccfe2e04d09ca5b0898b485dfbe222c221bbb0b265a4481e5834314b9e37,218152bc-3b05-4bc5-840c-ec49dfde3d7b
6846b288ad8f0db9e1690036,50421503_LA3.pdf,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:08.049Z,"logika gambar di atas adalah program sederhana menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawali dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsi act() dimana fungsi tersebut akan mengembalikan nilai “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisi __name__ == “__main__” berfungsi agar program hanya dapat dijalankan secara langsung dari file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000. output",1df0cac3609be024848adbd66036dbfcbe899e826fdaf0189c85dc5d46f02f49,218152bc-3b05-4bc5-840c-ec49dfde3d7b
6846b288ad8f0db9e1690037,50421568_LA3.pdf,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:08.228Z,"logika program kode program diatas merupakan kode program menggunakan framework flask untuk membuat web server. langkah pertama adalah mengimport library “flask” yang digunakan untuk bisa dapat membuat aplikasi web berbasis python. “app = flask(__name__)” merupakan pembuatan objek flask bernama ‘app”, “__name__” digunakan untuk mengetahui lokasi file utama yang dijalankan. “@app.route(‘/’)” merupakan route decorator pada flask yang berfungsi untuk menentukan route tautan endpoint, serta menjalankan fungsi “name” ketika endpoint dijalankan. fungsi “def name():” dibuat agar ketika route ‘/’ dipanggil di browser, maka akan mengembalikkan nilai gilang rizki putra – 50421568 – 4ia26 dan akan ditampilkan pada halaman browser. terakhir membuat percabangan “if __name__ == '__main__':” digunakan untuk memastikan aplikasi flask hanya dijalankan ketika file app.py di eksekusi. “app.run()” digunakan untuk menjalankan server lokal pada 5000. output program",ff79a2110703883d4ca3bc55c634178b3a2534b4e2e0b093a76444da4af72408,218152bc-3b05-4bc5-840c-ec49dfde3d7b
6846b288ad8f0db9e1690038,50421635_LA3.pdf,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:08.335Z,"logika program kode program di atas merupakan aplikasi web sederhana menggunakan framework flask di python. pertama-tama, modul flask diimpor, lalu sebuah objek app dibuat sebagai instance dari kelas flask. fungsi @app.route('/') adalah decorator yang menentukan bahwa fungsi hello() akan dijalankan ketika pengguna mengakses halaman utama dari web yaitu (/). fungsi hello() akan mengembalikan string berupa ""ikhsan fikryanto | 50421635 | 4ia26"", yang ditampilkan di browser. terakhir, bagian if _name_ == '_main_': digunakan untuk memastikan bahwa server flask hanya akan dijalankan jika file ini dieksekusi secara langsung, bukan ketika diimpor sebagai modul di file lain. ketika dijalankan, aplikasi ini akan mengaktifkan server lokal dan dapat diakses melalui browser. 3 output 4",1008978ae51c327ac266414f928601335a0f78868abdf17c370dc203e1b7ec07,218152bc-3b05-4bc5-840c-ec49dfde3d7b
6846b288ad8f0db9e1690039,50421654_LA3.pdf,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:08.433Z,"logika program baris ini mengimpor kelas flask dari modul flask, yang merupakan framework web yang digunakan untuk membangun aplikasi web. baris ini membuat instansi aplikasi flask dengan nama app. parameter __name__ digunakan untuk menentukan nama modul yang sedang dijalankan. baris ini mendefinisikan route / yang akan dijalankan ketika pengguna mengakses root url aplikasi web. fungsi hello() akan dipanggil dan mengembalikan string ""indah tri astuti | 50421654 | 4ia26"" sebagai respons. baris ini menjalankan aplikasi flask jika file python ini dijalankan langsung (bukan diimpor sebagai modul oleh file lain). app.run() memulai server pengembangan flask, yang memungkinkan pengguna untuk mengakses aplikasi web melalui browser. 3 output 4",11aad95c519a733abf94ce5eb2a8a3ed1201d2632234a49b8dd332d1cde7199c,218152bc-3b05-4bc5-840c-ec49dfde3d7b
6846b288ad8f0db9e169003a,50421844_LA3.pdf,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:08.576Z,"logika pertama saya akan menjelaskan kegunaan dari code from flask import flask yang berguna untuk mengimpor class flask dari library flask. kedua, inisialisasi aplikasi pada code app = flask(__name__) yang berguna untuk membuat instance dari aplikasi flask. argumen __name__ memberi tahu flask di mana letak modul utama. ketiga mendefinisikan route, @app.route('/') def hello(): return ""hello, world!"", sebagai berikut : @app.route('/') adalah decorator yang mendefinisikan rute (url path) pada web (/ berarti root). fungsi hello() akan dipanggil saat user mengakses url root (localhost:5000/), dan akan mengembalikan string ""hello, world!"" sebagai respon http. ke-empat menjalankan aplikasi pada code if __name__ == '__main__': app.run() yang berfungsi app.run() akan menjalankan server pengembangan di http://127.0.0.1:5000. output",68ee8191223fa5fc4dc373291f402177e674a1c004b297f524a6bf4217f12dd5,218152bc-3b05-4bc5-840c-ec49dfde3d7b
6846b288ad8f0db9e169003b,50421882_LA3.pdf,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:08.694Z,"logika program program dimulai dengan mengimpor kelas flask dari modul flask, lalu membuat sebuah objek aplikasi bernama app. dengan menggunakan dekorator @app.route('/'), program menentukan bahwa fungsi hello() akan dijalankan saat pengguna mengakses url root (/). fungsi ini akan mengembalikan teks statis yang berisi identitas pengguna, yaitu ""my name muhamad syahrudin, npm 50421882, class 4ia26"". selanjutnya, bagian if __name__ == '__main__': memastikan bahwa aplikasi flask akan dijalankan hanya jika file ini dieksekusi langsung, bukan diimpor sebagai modul. perintah app.run() akan menjalankan server lokal flask, biasanya pada alamat http://127.0.0.1:5000, sehingga dapat melihat hasilnya melalui browser. output program",a957ffb92a19d4e55af51666e76d1125f06e28db1f7217f50dc3e442ad7b5a7d,218152bc-3b05-4bc5-840c-ec49dfde3d7b
6846b288ad8f0db9e169003c,51421093_LA3.pdf,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:08.911Z,"logika disini saya akan menjelaskan logika program diatas yang merupakan mencetak kalimat hello, word dan menampikannya pada browser. pertama disini saya menginstall terlebih dahulu library flask dengan mengetik pada terminal pip install flask dan jalankan, setelah berhasil diinstall masuk ke program, pertama from flask import flask yaitu mengimport library flask yang sudah dodownload tadi, selanjutnya app = flask(__name__) ini untuk membuat instance dari aplikasi flask, dan __name__ digunakan agar flask tahu di mana aplikasi dijalankan (penting untuk menemukan file statis dan template). selanjutnya, terdapat sebuah route yang didefinisikan dengan @app.route('/'), yang berarti ketika saya mengakses url utama (root) seperti http://localhost:5000/, maka fungsi hello() akan dijalankan. fungsi ini hanya mengembalikan teks ""hello, world!"", yang kemudian akan ditampilkan di browser. pada bagian akhir program, terdapat blok if __name__ == '__main__':, yang artinya program akan menjalankan server flask hanya jika file tersebut dijalankan secara langsung (bukan diimpor sebagai modul). perintah app.run() akan memulai server lokal sehingga aplikasi bisa diakses melalui browser. dengan demikian, saat program dijalankan dan alamat http://localhost:5000/ dibuka, pengguna akan melihat pesan ""hello, world!"" sebagai output dari aplikasi web tersebut. 3 output - output app.py 4",24301a1a18e77ff5bf5355e27611d555e2424027ab7cca7e749f25fdbb68a419,218152bc-3b05-4bc5-840c-ec49dfde3d7b
6846b289ad8f0db9e169003d,51421122_LA3.pdf,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:09.140Z,"logika program logika pemrograman adalah kemampuan menggunakan ilmu pemrograman dalam memecahkan masalah (problem solving). setelah menulis listing program diatas, selanjutnya membuat perintah logika program flask & wireshark. logika dari program diatas adalah : pertama, app.py. kode dibawah adalah sebuah aplikasi web sederhana yang dibangun menggunakan framework flask. aplikasi ini dimulai dengan membuat sebuah instance flask yang akan menangani permintaan dari pengguna. ketika pengguna mengakses halaman utama (root path /), fungsi profile() akan dijalankan. di dalam fungsi ini, data seperti nama lengkap, npm, dan kelas disiapkan, kemudian dikirim ke template html index.html melalui fungsi render_template(). dengan cara ini, data tersebut dapat ditampilkan secara dinamis di halaman web. aplikasi ini juga diatur agar berjalan dalam mode debug, sehingga developer bisa lebih mudah dalam proses pengembangan karena setiap perubahan pada kode akan otomatis dimuat ulang dan kesalahan akan ditampilkan dengan jelas di browser. kode ini mencerminkan prinsip dasar dari web dinamis, yaitu memisahkan logika backend dengan tampilan frontend melalui penggunaan template. kedua, index.html. kode html tersebut berfungsi sebagai template tampilan dari aplikasi web yang dibangun menggunakan flask. template ini digunakan untuk menampilkan informasi mahasiswa seperti nama lengkap, npm, dan kelas dalam format yang rapi dan menarik. dengan menggunakan sintaks {{ name }}, {{ npm }}, dan {{ kelas }}, template ini memungkinkan penyisipan data dinamis dari backend ke dalam halaman html. ketika pengguna mengakses halaman utama, fungsi profile() di kode python flask sebelumnya akan mengirimkan data tersebut ke dalam template melalui render_template(). data ini kemudian ditampilkan secara langsung pada bagian-bagian yang sudah disediakan di dalam file html. dengan demikian, terdapat hubungan erat antara kode backend dan frontend, di mana flask bertugas mengatur alur data dan template html menampilkan informasi tersebut kepada pengguna secara interaktif dan menarik.  sebagai kesimpulan, kombinasi antara kode python flask dan file html template membentuk sebuah aplikasi web dinamis yang sederhana namun efektif. flask berperan sebagai backend yang menangani logika dan pengiriman data, sementara file html berfungsi sebagai frontend untuk menampilkan informasi secara visual kepada pengguna. melalui penggunaan render_template(), data dari python dapat disisipkan ke dalam html menggunakan sintaks jinja2, memungkinkan halaman web menampilkan konten yang bersifat personal atau berubah-ubah sesuai input. kolaborasi ini mencerminkan prinsip dasar pengembangan web modern: pemisahan antara logika aplikasi dan tampilan, namun tetap terhubung secara erat untuk menciptakan pengalaman pengguna yang interaktif. output program ketika program di running",cb49afeffa3a81db5af8df659c3fff0833bbd2b0f5553bebc3b197573d2aec35,218152bc-3b05-4bc5-840c-ec49dfde3d7b
6846b289ad8f0db9e169003e,50420055_LA3.pdf,uploaded_reports/b71b66f5-1b11-4f58-b477-745654f535d6_dataset.rar,2025-06-09T10:08:09.274Z,"logika from flask import * berfungsi untuk mengimpor semua modul dan fungsi dari package / library flask. app = flask(__name__) digunakan untuk membuat instance aplikasi website. potongan kode diatas digunakan untuk menangani permintaan url root / url utama dengan metode get / post, kode diatas akan menampilkan “afdhalul ichsan yourdan | 50420055 | 4ia26” pada halaman web. potongan kode diatas digunakan untuk mengatasi error 404 atau menangani permintaan ke url yang belum diatur, kode tersebut akan menampilkan “page not found!” pada halaman web. potongan kode diatas digunakan untuk menjalankan server saat script di eksekusi secara langsung. if __name__ == ‘__main__’: berfungsi untuk memastikan apakah script dieksekusi secara langsung atau tidak. output",9ae67e2916d68df4bd8b5a5128d6b23ad94d97484b17b35bae35929c4b560bbf,218152bc-3b05-4bc5-840c-ec49dfde3d7b
68517f13f23c52edb55d9190,50421282_LA3.pdf,uploaded_reports/4a169987-9c86-443d-8e9b-d9b8c38e2746_dataset file rar.rar,2025-06-17T14:43:31.490Z,"logika program pada kode python pada gambar tersebut merupakan contoh sederhana aplikasi web menggunakan framework flask. baris pertama mengimpor kelas flask dari modul flask, yang digunakan untuk membuat objek aplikasi web. pada baris ketiga, objek aplikasi app dibuat dengan memberikan __name__ sebagai argumen, yang membantu flask menentukan lokasi file dan mengatur konfigurasi aplikasi. fungsi hello() didekorasi dengan @app.route('/'), yang artinya fungsi ini akan dijalankan saat pengguna mengakses url root (/) dari aplikasi. fungsi hello() mengembalikan string ""bintang armeyelia | 50421282 | 4ia26"", yang akan ditampilkan di browser sebagai respons. terakhir, baris if __name__ == '__main__': memastikan bahwa server flask hanya dijalankan jika file ini dieksekusi langsung, bukan saat diimpor sebagai modul. fungsi app.run() akan menjalankan server pengembangan flask agar aplikasi bisa diakses melalui browser. kode ini berguna untuk membuat aplikasi web sederhana dengan satu halaman utama yang menampilkan informasi pengguna. output program",14becbb8a0fac920647165a2e272b479e5a10d17ae31894a095edc6425233732,9bc66828-5f03-457c-badd-72dde4abf2e2
68517f13f23c52edb55d9191,50421291_LA3.pdf,uploaded_reports/4a169987-9c86-443d-8e9b-d9b8c38e2746_dataset file rar.rar,2025-06-17T14:43:31.668Z,"logika pemrograman logika pemrograman adalah kemampuan menggunakan ilmu pemrograman dalam memecahkan masalah (problem solving). setelah menulis listing program diatas, selanjutnya membuat logika listing untuk membuat teks berjalan pada html. pada aplikasi flask sederhana ini, framework python flask digunakan untuk membuat server web. aplikasi ini mendefinisikan satu route (/), yang memetakan ke fungsi hello(). ketika pengguna mengunjungi url root, fungsi ini akan mengembalikan pesan ""hello, brenda!"" untuk ditampilkan di browser. jenis aplikasi web ini umumnya digunakan untuk pengujian, demonstrasi kemampuan server web dasar, atau sebagai dasar untuk aplikasi yang lebih kompleks. metode app.run() memastikan aplikasi berjalan ketika dijalankan langsung. kode ini menjadi dasar untuk membuat aplikasi web yang lebih dinamis dan interaktif menggunakan flask. output pemrograman",c733ccfe2e04d09ca5b0898b485dfbe222c221bbb0b265a4481e5834314b9e37,9bc66828-5f03-457c-badd-72dde4abf2e2
68517f13f23c52edb55d9192,50421503_LA3.pdf,uploaded_reports/4a169987-9c86-443d-8e9b-d9b8c38e2746_dataset file rar.rar,2025-06-17T14:43:31.822Z,"logika gambar di atas adalah program sederhana menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawali dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsi act() dimana fungsi tersebut akan mengembalikan nilai “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisi __name__ == “__main__” berfungsi agar program hanya dapat dijalankan secara langsung dari file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000. output",1df0cac3609be024848adbd66036dbfcbe899e826fdaf0189c85dc5d46f02f49,9bc66828-5f03-457c-badd-72dde4abf2e2
68517f13f23c52edb55d9193,50421568_LA3.pdf,uploaded_reports/4a169987-9c86-443d-8e9b-d9b8c38e2746_dataset file rar.rar,2025-06-17T14:43:31.991Z,"logika program kode program diatas merupakan kode program menggunakan framework flask untuk membuat web server. langkah pertama adalah mengimport library “flask” yang digunakan untuk bisa dapat membuat aplikasi web berbasis python. “app = flask(__name__)” merupakan pembuatan objek flask bernama ‘app”, “__name__” digunakan untuk mengetahui lokasi file utama yang dijalankan. “@app.route(‘/’)” merupakan route decorator pada flask yang berfungsi untuk menentukan route tautan endpoint, serta menjalankan fungsi “name” ketika endpoint dijalankan. fungsi “def name():” dibuat agar ketika route ‘/’ dipanggil di browser, maka akan mengembalikkan nilai gilang rizki putra – 50421568 – 4ia26 dan akan ditampilkan pada halaman browser. terakhir membuat percabangan “if __name__ == '__main__':” digunakan untuk memastikan aplikasi flask hanya dijalankan ketika file app.py di eksekusi. “app.run()” digunakan untuk menjalankan server lokal pada 5000. output program",ff79a2110703883d4ca3bc55c634178b3a2534b4e2e0b093a76444da4af72408,9bc66828-5f03-457c-badd-72dde4abf2e2
68517f14f23c52edb55d9194,50421635_LA3.pdf,uploaded_reports/4a169987-9c86-443d-8e9b-d9b8c38e2746_dataset file rar.rar,2025-06-17T14:43:32.088Z,"logika program kode program di atas merupakan aplikasi web sederhana menggunakan framework flask di python. pertama-tama, modul flask diimpor, lalu sebuah objek app dibuat sebagai instance dari kelas flask. fungsi @app.route('/') adalah decorator yang menentukan bahwa fungsi hello() akan dijalankan ketika pengguna mengakses halaman utama dari web yaitu (/). fungsi hello() akan mengembalikan string berupa ""ikhsan fikryanto | 50421635 | 4ia26"", yang ditampilkan di browser. terakhir, bagian if _name_ == '_main_': digunakan untuk memastikan bahwa server flask hanya akan dijalankan jika file ini dieksekusi secara langsung, bukan ketika diimpor sebagai modul di file lain. ketika dijalankan, aplikasi ini akan mengaktifkan server lokal dan dapat diakses melalui browser. 3 output 4",1008978ae51c327ac266414f928601335a0f78868abdf17c370dc203e1b7ec07,9bc66828-5f03-457c-badd-72dde4abf2e2
68517f14f23c52edb55d9195,50421654_LA3.pdf,uploaded_reports/4a169987-9c86-443d-8e9b-d9b8c38e2746_dataset file rar.rar,2025-06-17T14:43:32.167Z,"logika program baris ini mengimpor kelas flask dari modul flask, yang merupakan framework web yang digunakan untuk membangun aplikasi web. baris ini membuat instansi aplikasi flask dengan nama app. parameter __name__ digunakan untuk menentukan nama modul yang sedang dijalankan. baris ini mendefinisikan route / yang akan dijalankan ketika pengguna mengakses root url aplikasi web. fungsi hello() akan dipanggil dan mengembalikan string ""indah tri astuti | 50421654 | 4ia26"" sebagai respons. baris ini menjalankan aplikasi flask jika file python ini dijalankan langsung (bukan diimpor sebagai modul oleh file lain). app.run() memulai server pengembangan flask, yang memungkinkan pengguna untuk mengakses aplikasi web melalui browser. 3 output 4",11aad95c519a733abf94ce5eb2a8a3ed1201d2632234a49b8dd332d1cde7199c,9bc66828-5f03-457c-badd-72dde4abf2e2
68517f14f23c52edb55d9196,50421844_LA3.pdf,uploaded_reports/cd683879-b71b-43ea-b741-b3212c027441_dataset file zip.zip,2025-06-17T14:43:32.297Z,"logika pertama saya akan menjelaskan kegunaan dari code from flask import flask yang berguna untuk mengimpor class flask dari library flask. kedua, inisialisasi aplikasi pada code app = flask(__name__) yang berguna untuk membuat instance dari aplikasi flask. argumen __name__ memberi tahu flask di mana letak modul utama. ketiga mendefinisikan route, @app.route('/') def hello(): return ""hello, world!"", sebagai berikut : @app.route('/') adalah decorator yang mendefinisikan rute (url path) pada web (/ berarti root). fungsi hello() akan dipanggil saat user mengakses url root (localhost:5000/), dan akan mengembalikan string ""hello, world!"" sebagai respon http. ke-empat menjalankan aplikasi pada code if __name__ == '__main__': app.run() yang berfungsi app.run() akan menjalankan server pengembangan di http://127.0.0.1:5000. output",68ee8191223fa5fc4dc373291f402177e674a1c004b297f524a6bf4217f12dd5,9bc66828-5f03-457c-badd-72dde4abf2e2
68517f14f23c52edb55d9197,50421882_LA3.pdf,uploaded_reports/cd683879-b71b-43ea-b741-b3212c027441_dataset file zip.zip,2025-06-17T14:43:32.392Z,"logika program program dimulai dengan mengimpor kelas flask dari modul flask, lalu membuat sebuah objek aplikasi bernama app. dengan menggunakan dekorator @app.route('/'), program menentukan bahwa fungsi hello() akan dijalankan saat pengguna mengakses url root (/). fungsi ini akan mengembalikan teks statis yang berisi identitas pengguna, yaitu ""my name muhamad syahrudin, npm 50421882, class 4ia26"". selanjutnya, bagian if __name__ == '__main__': memastikan bahwa aplikasi flask akan dijalankan hanya jika file ini dieksekusi langsung, bukan diimpor sebagai modul. perintah app.run() akan menjalankan server lokal flask, biasanya pada alamat http://127.0.0.1:5000, sehingga dapat melihat hasilnya melalui browser. output program",a957ffb92a19d4e55af51666e76d1125f06e28db1f7217f50dc3e442ad7b5a7d,9bc66828-5f03-457c-badd-72dde4abf2e2
68517f14f23c52edb55d9198,51421093_LA3.pdf,uploaded_reports/cd683879-b71b-43ea-b741-b3212c027441_dataset file zip.zip,2025-06-17T14:43:32.547Z,"logika disini saya akan menjelaskan logika program diatas yang merupakan mencetak kalimat hello, word dan menampikannya pada browser. pertama disini saya menginstall terlebih dahulu library flask dengan mengetik pada terminal pip install flask dan jalankan, setelah berhasil diinstall masuk ke program, pertama from flask import flask yaitu mengimport library flask yang sudah dodownload tadi, selanjutnya app = flask(__name__) ini untuk membuat instance dari aplikasi flask, dan __name__ digunakan agar flask tahu di mana aplikasi dijalankan (penting untuk menemukan file statis dan template). selanjutnya, terdapat sebuah route yang didefinisikan dengan @app.route('/'), yang berarti ketika saya mengakses url utama (root) seperti http://localhost:5000/, maka fungsi hello() akan dijalankan. fungsi ini hanya mengembalikan teks ""hello, world!"", yang kemudian akan ditampilkan di browser. pada bagian akhir program, terdapat blok if __name__ == '__main__':, yang artinya program akan menjalankan server flask hanya jika file tersebut dijalankan secara langsung (bukan diimpor sebagai modul). perintah app.run() akan memulai server lokal sehingga aplikasi bisa diakses melalui browser. dengan demikian, saat program dijalankan dan alamat http://localhost:5000/ dibuka, pengguna akan melihat pesan ""hello, world!"" sebagai output dari aplikasi web tersebut. 3 output - output app.py 4",24301a1a18e77ff5bf5355e27611d555e2424027ab7cca7e749f25fdbb68a419,9bc66828-5f03-457c-badd-72dde4abf2e2
68517f14f23c52edb55d9199,51421122_LA3.pdf,uploaded_reports/cd683879-b71b-43ea-b741-b3212c027441_dataset file zip.zip,2025-06-17T14:43:32.817Z,"logika program logika pemrograman adalah kemampuan menggunakan ilmu pemrograman dalam memecahkan masalah (problem solving). setelah menulis listing program diatas, selanjutnya membuat perintah logika program flask & wireshark. logika dari program diatas adalah : pertama, app.py. kode dibawah adalah sebuah aplikasi web sederhana yang dibangun menggunakan framework flask. aplikasi ini dimulai dengan membuat sebuah instance flask yang akan menangani permintaan dari pengguna. ketika pengguna mengakses halaman utama (root path /), fungsi profile() akan dijalankan. di dalam fungsi ini, data seperti nama lengkap, npm, dan kelas disiapkan, kemudian dikirim ke template html index.html melalui fungsi render_template(). dengan cara ini, data tersebut dapat ditampilkan secara dinamis di halaman web. aplikasi ini juga diatur agar berjalan dalam mode debug, sehingga developer bisa lebih mudah dalam proses pengembangan karena setiap perubahan pada kode akan otomatis dimuat ulang dan kesalahan akan ditampilkan dengan jelas di browser. kode ini mencerminkan prinsip dasar dari web dinamis, yaitu memisahkan logika backend dengan tampilan frontend melalui penggunaan template. kedua, index.html. kode html tersebut berfungsi sebagai template tampilan dari aplikasi web yang dibangun menggunakan flask. template ini digunakan untuk menampilkan informasi mahasiswa seperti nama lengkap, npm, dan kelas dalam format yang rapi dan menarik. dengan menggunakan sintaks {{ name }}, {{ npm }}, dan {{ kelas }}, template ini memungkinkan penyisipan data dinamis dari backend ke dalam halaman html. ketika pengguna mengakses halaman utama, fungsi profile() di kode python flask sebelumnya akan mengirimkan data tersebut ke dalam template melalui render_template(). data ini kemudian ditampilkan secara langsung pada bagian-bagian yang sudah disediakan di dalam file html. dengan demikian, terdapat hubungan erat antara kode backend dan frontend, di mana flask bertugas mengatur alur data dan template html menampilkan informasi tersebut kepada pengguna secara interaktif dan menarik.  sebagai kesimpulan, kombinasi antara kode python flask dan file html template membentuk sebuah aplikasi web dinamis yang sederhana namun efektif. flask berperan sebagai backend yang menangani logika dan pengiriman data, sementara file html berfungsi sebagai frontend untuk menampilkan informasi secara visual kepada pengguna. melalui penggunaan render_template(), data dari python dapat disisipkan ke dalam html menggunakan sintaks jinja2, memungkinkan halaman web menampilkan konten yang bersifat personal atau berubah-ubah sesuai input. kolaborasi ini mencerminkan prinsip dasar pengembangan web modern: pemisahan antara logika aplikasi dan tampilan, namun tetap terhubung secara erat untuk menciptakan pengalaman pengguna yang interaktif. output program ketika program di running",cb49afeffa3a81db5af8df659c3fff0833bbd2b0f5553bebc3b197573d2aec35,9bc66828-5f03-457c-badd-72dde4abf2e2
68517f14f23c52edb55d919a,50420055_LA3.pdf,uploaded_reports/cd683879-b71b-43ea-b741-b3212c027441_dataset file zip.zip,2025-06-17T14:43:32.930Z,"logika from flask import * berfungsi untuk mengimpor semua modul dan fungsi dari package / library flask. app = flask(__name__) digunakan untuk membuat instance aplikasi website. potongan kode diatas digunakan untuk menangani permintaan url root / url utama dengan metode get / post, kode diatas akan menampilkan “afdhalul ichsan yourdan | 50420055 | 4ia26” pada halaman web. potongan kode diatas digunakan untuk mengatasi error 404 atau menangani permintaan ke url yang belum diatur, kode tersebut akan menampilkan “page not found!” pada halaman web. potongan kode diatas digunakan untuk menjalankan server saat script di eksekusi secara langsung. if __name__ == ‘__main__’: berfungsi untuk memastikan apakah script dieksekusi secara langsung atau tidak. output",9ae67e2916d68df4bd8b5a5128d6b23ad94d97484b17b35bae35929c4b560bbf,9bc66828-5f03-457c-badd-72dde4abf2e2
68517f15f23c52edb55d919b,dataset file pdf.pdf,uploaded_reports/b2f92d3b-9329-498a-a46e-76dd7b6b999b_dataset file pdf.pdf,2025-06-17T14:43:33.050Z,"logika program pada kode python pada gambar tersebut merupakan contoh sederhana aplikasi web menggunakan framework flask. baris pertama mengimpor kelas flask dari modul flask, yang digunakan untuk membuat objek aplikasi web. pada baris ketiga, objek aplikasi app dibuat dengan memberikan __name__ sebagai argumen, yang membantu flask menentukan lokasi file dan mengatur konfigurasi aplikasi. fungsi hello() didekorasi dengan @app.route('/'), yang artinya fungsi ini akan dijalankan saat pengguna mengakses url root (/) dari aplikasi. fungsi hello() mengembalikan string ""bintang armeyelia | 50421282 | 4ia26"", yang akan ditampilkan di browser sebagai respons. terakhir, baris if __name__ == '__main__': memastikan bahwa server flask hanya dijalankan jika file ini dieksekusi langsung, bukan saat diimpor sebagai modul. fungsi app.run() akan menjalankan server pengembangan flask agar aplikasi bisa diakses melalui browser. kode ini berguna untuk membuat aplikasi web sederhana dengan satu halaman utama yang menampilkan informasi pengguna. output program",14becbb8a0fac920647165a2e272b479e5a10d17ae31894a095edc6425233732,9bc66828-5f03-457c-badd-72dde4abf2e2
685180f6f23c52edb55d919d,50421282_LA3.pdf,uploaded_reports/81ad652e-6a17-4e87-8f44-4800a977b173_dataset file rar.rar,2025-06-17T14:51:34.713Z,"logika program pada kode python pada gambar tersebut merupakan contoh sederhana aplikasi web menggunakan framework flask. baris pertama mengimpor kelas flask dari modul flask, yang digunakan untuk membuat objek aplikasi web. pada baris ketiga, objek aplikasi app dibuat dengan memberikan __name__ sebagai argumen, yang membantu flask menentukan lokasi file dan mengatur konfigurasi aplikasi. fungsi hello() didekorasi dengan @app.route('/'), yang artinya fungsi ini akan dijalankan saat pengguna mengakses url root (/) dari aplikasi. fungsi hello() mengembalikan string ""bintang armeyelia | 50421282 | 4ia26"", yang akan ditampilkan di browser sebagai respons. terakhir, baris if __name__ == '__main__': memastikan bahwa server flask hanya dijalankan jika file ini dieksekusi langsung, bukan saat diimpor sebagai modul. fungsi app.run() akan menjalankan server pengembangan flask agar aplikasi bisa diakses melalui browser. kode ini berguna untuk membuat aplikasi web sederhana dengan satu halaman utama yang menampilkan informasi pengguna. output program",14becbb8a0fac920647165a2e272b479e5a10d17ae31894a095edc6425233732,863f2464-487e-44c2-8fb8-4eef2e9a3aab
685180f6f23c52edb55d919e,50421291_LA3.pdf,uploaded_reports/81ad652e-6a17-4e87-8f44-4800a977b173_dataset file rar.rar,2025-06-17T14:51:34.846Z,"logika pemrograman logika pemrograman adalah kemampuan menggunakan ilmu pemrograman dalam memecahkan masalah (problem solving). setelah menulis listing program diatas, selanjutnya membuat logika listing untuk membuat teks berjalan pada html. pada aplikasi flask sederhana ini, framework python flask digunakan untuk membuat server web. aplikasi ini mendefinisikan satu route (/), yang memetakan ke fungsi hello(). ketika pengguna mengunjungi url root, fungsi ini akan mengembalikan pesan ""hello, brenda!"" untuk ditampilkan di browser. jenis aplikasi web ini umumnya digunakan untuk pengujian, demonstrasi kemampuan server web dasar, atau sebagai dasar untuk aplikasi yang lebih kompleks. metode app.run() memastikan aplikasi berjalan ketika dijalankan langsung. kode ini menjadi dasar untuk membuat aplikasi web yang lebih dinamis dan interaktif menggunakan flask. output pemrograman",c733ccfe2e04d09ca5b0898b485dfbe222c221bbb0b265a4481e5834314b9e37,863f2464-487e-44c2-8fb8-4eef2e9a3aab
685180f7f23c52edb55d919f,50421503_LA3.pdf,uploaded_reports/81ad652e-6a17-4e87-8f44-4800a977b173_dataset file rar.rar,2025-06-17T14:51:35.007Z,"logika gambar di atas adalah program sederhana menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawali dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsi act() dimana fungsi tersebut akan mengembalikan nilai “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisi __name__ == “__main__” berfungsi agar program hanya dapat dijalankan secara langsung dari file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000. output",1df0cac3609be024848adbd66036dbfcbe899e826fdaf0189c85dc5d46f02f49,863f2464-487e-44c2-8fb8-4eef2e9a3aab
685180f7f23c52edb55d91a0,50421568_LA3.pdf,uploaded_reports/81ad652e-6a17-4e87-8f44-4800a977b173_dataset file rar.rar,2025-06-17T14:51:35.222Z,"logika program kode program diatas merupakan kode program menggunakan framework flask untuk membuat web server. langkah pertama adalah mengimport library “flask” yang digunakan untuk bisa dapat membuat aplikasi web berbasis python. “app = flask(__name__)” merupakan pembuatan objek flask bernama ‘app”, “__name__” digunakan untuk mengetahui lokasi file utama yang dijalankan. “@app.route(‘/’)” merupakan route decorator pada flask yang berfungsi untuk menentukan route tautan endpoint, serta menjalankan fungsi “name” ketika endpoint dijalankan. fungsi “def name():” dibuat agar ketika route ‘/’ dipanggil di browser, maka akan mengembalikkan nilai gilang rizki putra – 50421568 – 4ia26 dan akan ditampilkan pada halaman browser. terakhir membuat percabangan “if __name__ == '__main__':” digunakan untuk memastikan aplikasi flask hanya dijalankan ketika file app.py di eksekusi. “app.run()” digunakan untuk menjalankan server lokal pada 5000. output program",ff79a2110703883d4ca3bc55c634178b3a2534b4e2e0b093a76444da4af72408,863f2464-487e-44c2-8fb8-4eef2e9a3aab
685180f7f23c52edb55d91a1,50421635_LA3.pdf,uploaded_reports/81ad652e-6a17-4e87-8f44-4800a977b173_dataset file rar.rar,2025-06-17T14:51:35.346Z,"logika program kode program di atas merupakan aplikasi web sederhana menggunakan framework flask di python. pertama-tama, modul flask diimpor, lalu sebuah objek app dibuat sebagai instance dari kelas flask. fungsi @app.route('/') adalah decorator yang menentukan bahwa fungsi hello() akan dijalankan ketika pengguna mengakses halaman utama dari web yaitu (/). fungsi hello() akan mengembalikan string berupa ""ikhsan fikryanto | 50421635 | 4ia26"", yang ditampilkan di browser. terakhir, bagian if _name_ == '_main_': digunakan untuk memastikan bahwa server flask hanya akan dijalankan jika file ini dieksekusi secara langsung, bukan ketika diimpor sebagai modul di file lain. ketika dijalankan, aplikasi ini akan mengaktifkan server lokal dan dapat diakses melalui browser. 3 output 4",1008978ae51c327ac266414f928601335a0f78868abdf17c370dc203e1b7ec07,863f2464-487e-44c2-8fb8-4eef2e9a3aab
685180f7f23c52edb55d91a2,50421654_LA3.pdf,uploaded_reports/81ad652e-6a17-4e87-8f44-4800a977b173_dataset file rar.rar,2025-06-17T14:51:35.460Z,"logika program baris ini mengimpor kelas flask dari modul flask, yang merupakan framework web yang digunakan untuk membangun aplikasi web. baris ini membuat instansi aplikasi flask dengan nama app. parameter __name__ digunakan untuk menentukan nama modul yang sedang dijalankan. baris ini mendefinisikan route / yang akan dijalankan ketika pengguna mengakses root url aplikasi web. fungsi hello() akan dipanggil dan mengembalikan string ""indah tri astuti | 50421654 | 4ia26"" sebagai respons. baris ini menjalankan aplikasi flask jika file python ini dijalankan langsung (bukan diimpor sebagai modul oleh file lain). app.run() memulai server pengembangan flask, yang memungkinkan pengguna untuk mengakses aplikasi web melalui browser. 3 output 4",11aad95c519a733abf94ce5eb2a8a3ed1201d2632234a49b8dd332d1cde7199c,863f2464-487e-44c2-8fb8-4eef2e9a3aab
685180f7f23c52edb55d91a3,50421844_LA3.pdf,uploaded_reports/d34c7388-c3af-49ff-9532-7d6c9be5cada_dataset file zip.zip,2025-06-17T14:51:35.591Z,"logika pertama saya akan menjelaskan kegunaan dari code from flask import flask yang berguna untuk mengimpor class flask dari library flask. kedua, inisialisasi aplikasi pada code app = flask(__name__) yang berguna untuk membuat instance dari aplikasi flask. argumen __name__ memberi tahu flask di mana letak modul utama. ketiga mendefinisikan route, @app.route('/') def hello(): return ""hello, world!"", sebagai berikut : @app.route('/') adalah decorator yang mendefinisikan rute (url path) pada web (/ berarti root). fungsi hello() akan dipanggil saat user mengakses url root (localhost:5000/), dan akan mengembalikan string ""hello, world!"" sebagai respon http. ke-empat menjalankan aplikasi pada code if __name__ == '__main__': app.run() yang berfungsi app.run() akan menjalankan server pengembangan di http://127.0.0.1:5000. output",68ee8191223fa5fc4dc373291f402177e674a1c004b297f524a6bf4217f12dd5,863f2464-487e-44c2-8fb8-4eef2e9a3aab
685180f7f23c52edb55d91a4,50421882_LA3.pdf,uploaded_reports/d34c7388-c3af-49ff-9532-7d6c9be5cada_dataset file zip.zip,2025-06-17T14:51:35.713Z,"logika program program dimulai dengan mengimpor kelas flask dari modul flask, lalu membuat sebuah objek aplikasi bernama app. dengan menggunakan dekorator @app.route('/'), program menentukan bahwa fungsi hello() akan dijalankan saat pengguna mengakses url root (/). fungsi ini akan mengembalikan teks statis yang berisi identitas pengguna, yaitu ""my name muhamad syahrudin, npm 50421882, class 4ia26"". selanjutnya, bagian if __name__ == '__main__': memastikan bahwa aplikasi flask akan dijalankan hanya jika file ini dieksekusi langsung, bukan diimpor sebagai modul. perintah app.run() akan menjalankan server lokal flask, biasanya pada alamat http://127.0.0.1:5000, sehingga dapat melihat hasilnya melalui browser. output program",a957ffb92a19d4e55af51666e76d1125f06e28db1f7217f50dc3e442ad7b5a7d,863f2464-487e-44c2-8fb8-4eef2e9a3aab
685180f7f23c52edb55d91a5,51421093_LA3.pdf,uploaded_reports/d34c7388-c3af-49ff-9532-7d6c9be5cada_dataset file zip.zip,2025-06-17T14:51:35.867Z,"logika disini saya akan menjelaskan logika program diatas yang merupakan mencetak kalimat hello, word dan menampikannya pada browser. pertama disini saya menginstall terlebih dahulu library flask dengan mengetik pada terminal pip install flask dan jalankan, setelah berhasil diinstall masuk ke program, pertama from flask import flask yaitu mengimport library flask yang sudah dodownload tadi, selanjutnya app = flask(__name__) ini untuk membuat instance dari aplikasi flask, dan __name__ digunakan agar flask tahu di mana aplikasi dijalankan (penting untuk menemukan file statis dan template). selanjutnya, terdapat sebuah route yang didefinisikan dengan @app.route('/'), yang berarti ketika saya mengakses url utama (root) seperti http://localhost:5000/, maka fungsi hello() akan dijalankan. fungsi ini hanya mengembalikan teks ""hello, world!"", yang kemudian akan ditampilkan di browser. pada bagian akhir program, terdapat blok if __name__ == '__main__':, yang artinya program akan menjalankan server flask hanya jika file tersebut dijalankan secara langsung (bukan diimpor sebagai modul). perintah app.run() akan memulai server lokal sehingga aplikasi bisa diakses melalui browser. dengan demikian, saat program dijalankan dan alamat http://localhost:5000/ dibuka, pengguna akan melihat pesan ""hello, world!"" sebagai output dari aplikasi web tersebut. 3 output - output app.py 4",24301a1a18e77ff5bf5355e27611d555e2424027ab7cca7e749f25fdbb68a419,863f2464-487e-44c2-8fb8-4eef2e9a3aab
685180f9f23c52edb55d91a6,51421122_LA3.pdf,uploaded_reports/d34c7388-c3af-49ff-9532-7d6c9be5cada_dataset file zip.zip,2025-06-17T14:51:37.024Z,"logika program logika pemrograman adalah kemampuan menggunakan ilmu pemrograman dalam memecahkan masalah (problem solving). setelah menulis listing program diatas, selanjutnya membuat perintah logika program flask & wireshark. logika dari program diatas adalah : pertama, app.py. kode dibawah adalah sebuah aplikasi web sederhana yang dibangun menggunakan framework flask. aplikasi ini dimulai dengan membuat sebuah instance flask yang akan menangani permintaan dari pengguna. ketika pengguna mengakses halaman utama (root path /), fungsi profile() akan dijalankan. di dalam fungsi ini, data seperti nama lengkap, npm, dan kelas disiapkan, kemudian dikirim ke template html index.html melalui fungsi render_template(). dengan cara ini, data tersebut dapat ditampilkan secara dinamis di halaman web. aplikasi ini juga diatur agar berjalan dalam mode debug, sehingga developer bisa lebih mudah dalam proses pengembangan karena setiap perubahan pada kode akan otomatis dimuat ulang dan kesalahan akan ditampilkan dengan jelas di browser. kode ini mencerminkan prinsip dasar dari web dinamis, yaitu memisahkan logika backend dengan tampilan frontend melalui penggunaan template. kedua, index.html. kode html tersebut berfungsi sebagai template tampilan dari aplikasi web yang dibangun menggunakan flask. template ini digunakan untuk menampilkan informasi mahasiswa seperti nama lengkap, npm, dan kelas dalam format yang rapi dan menarik. dengan menggunakan sintaks {{ name }}, {{ npm }}, dan {{ kelas }}, template ini memungkinkan penyisipan data dinamis dari backend ke dalam halaman html. ketika pengguna mengakses halaman utama, fungsi profile() di kode python flask sebelumnya akan mengirimkan data tersebut ke dalam template melalui render_template(). data ini kemudian ditampilkan secara langsung pada bagian-bagian yang sudah disediakan di dalam file html. dengan demikian, terdapat hubungan erat antara kode backend dan frontend, di mana flask bertugas mengatur alur data dan template html menampilkan informasi tersebut kepada pengguna secara interaktif dan menarik.  sebagai kesimpulan, kombinasi antara kode python flask dan file html template membentuk sebuah aplikasi web dinamis yang sederhana namun efektif. flask berperan sebagai backend yang menangani logika dan pengiriman data, sementara file html berfungsi sebagai frontend untuk menampilkan informasi secara visual kepada pengguna. melalui penggunaan render_template(), data dari python dapat disisipkan ke dalam html menggunakan sintaks jinja2, memungkinkan halaman web menampilkan konten yang bersifat personal atau berubah-ubah sesuai input. kolaborasi ini mencerminkan prinsip dasar pengembangan web modern: pemisahan antara logika aplikasi dan tampilan, namun tetap terhubung secara erat untuk menciptakan pengalaman pengguna yang interaktif. output program ketika program di running",cb49afeffa3a81db5af8df659c3fff0833bbd2b0f5553bebc3b197573d2aec35,863f2464-487e-44c2-8fb8-4eef2e9a3aab
685180f9f23c52edb55d91a7,50420055_LA3.pdf,uploaded_reports/d34c7388-c3af-49ff-9532-7d6c9be5cada_dataset file zip.zip,2025-06-17T14:51:37.182Z,"logika from flask import * berfungsi untuk mengimpor semua modul dan fungsi dari package / library flask. app = flask(__name__) digunakan untuk membuat instance aplikasi website. potongan kode diatas digunakan untuk menangani permintaan url root / url utama dengan metode get / post, kode diatas akan menampilkan “afdhalul ichsan yourdan | 50420055 | 4ia26” pada halaman web. potongan kode diatas digunakan untuk mengatasi error 404 atau menangani permintaan ke url yang belum diatur, kode tersebut akan menampilkan “page not found!” pada halaman web. potongan kode diatas digunakan untuk menjalankan server saat script di eksekusi secara langsung. if __name__ == ‘__main__’: berfungsi untuk memastikan apakah script dieksekusi secara langsung atau tidak. output",9ae67e2916d68df4bd8b5a5128d6b23ad94d97484b17b35bae35929c4b560bbf,863f2464-487e-44c2-8fb8-4eef2e9a3aab
685180f9f23c52edb55d91a8,dataset file pdf.pdf,uploaded_reports/bd9b3bae-81b3-46ba-92d2-e772ea18f31f_dataset file pdf.pdf,2025-06-17T14:51:37.345Z,"logika program pada kode python pada gambar tersebut merupakan contoh sederhana aplikasi web menggunakan framework flask. baris pertama mengimpor kelas flask dari modul flask, yang digunakan untuk membuat objek aplikasi web. pada baris ketiga, objek aplikasi app dibuat dengan memberikan __name__ sebagai argumen, yang membantu flask menentukan lokasi file dan mengatur konfigurasi aplikasi. fungsi hello() didekorasi dengan @app.route('/'), yang artinya fungsi ini akan dijalankan saat pengguna mengakses url root (/) dari aplikasi. fungsi hello() mengembalikan string ""bintang armeyelia | 50421282 | 4ia26"", yang akan ditampilkan di browser sebagai respons. terakhir, baris if __name__ == '__main__': memastikan bahwa server flask hanya dijalankan jika file ini dieksekusi langsung, bukan saat diimpor sebagai modul. fungsi app.run() akan menjalankan server pengembangan flask agar aplikasi bisa diakses melalui browser. kode ini berguna untuk membuat aplikasi web sederhana dengan satu halaman utama yang menampilkan informasi pengguna. output program",14becbb8a0fac920647165a2e272b479e5a10d17ae31894a095edc6425233732,863f2464-487e-44c2-8fb8-4eef2e9a3aab
685baa7cf679fda388dcb022,Dokumen B.docx,uploaded_reports/0c291d7a-34cd-40fa-81c1-f6e17c5eb20c_Dokumen B.docx,2025-06-25T07:51:24.651Z,"logika  	program ini fimulai dengan mengimport kelas flask dan membuat instance-nya bernama fedro. program ini menggunakan decorator @fedro.route(“/”) untuk menentukan titik akhir (endpoint) situs web. artinya, ketika anda mengakses alamat dasasr situs web (misalnya localhost:5000/), fungsi act() akan dijalankan. fungsi ini kemudian akan mengembalikan teks “fedro maulana jatmika | 50421503 | 4ia26” langsung ke browser anda, tanpa format html atau template khusus.  kondisi if __name__ == “__main__”: memastikan bahwa server flask hanya akan berjalan ketika anda menjalankan file program ini secara langsung, bukan saat diimpor sebagai modul di program lain. ketika program dijalankan, fungsi fedro.run() akan memulai server.  	anda mengakses program ini melalui localhost di port 5000 di browser web anda.   output",cf45662a8c0cc98c50e19ea4398c75b33f55621c1953a06b93c2af2b127ba464,48e3dd17-c663-4b34-9f69-5b40d5d49128
685baa7df679fda388dcb023,Dokumen D.pdf,uploaded_reports/3a18d7f0-ea64-416a-9a16-71e5212c25a2_Dokumen D.pdf,2025-06-25T07:51:25.074Z,"logika disini saya akan menjelaskan logika program diatas yang merupakan mencetak kalimat hello, word dan menampikannya pada browser. pertama disini saya menginstall terlebih dahulu library flask dengan mengetik pada terminal pip install flask dan jalankan, setelah berhasil diinstall masuk ke program, pertama from flask import flask yaitu mengimport library flask yang sudah dodownload tadi, selanjutnya app = flask(__name__) ini untuk membuat instance dari aplikasi flask, dan __name__ digunakan agar flask tahu di mana aplikasi dijalankan (penting untuk menemukan file statis dan template). selanjutnya, terdapat sebuah route yang didefinisikan dengan @app.route('/'), yang berarti ketika saya mengakses url utama (root) seperti http://localhost:5000/, maka fungsi hello() akan dijalankan. fungsi ini hanya mengembalikan teks ""hello, world!"", yang kemudian akan ditampilkan di browser. pada bagian akhir program, terdapat blok if __name__ == '__main__':, yang artinya program akan menjalankan server flask hanya jika file tersebut dijalankan secara langsung (bukan diimpor sebagai modul). perintah app.run() akan memulai server lokal sehingga aplikasi bisa diakses melalui browser. dengan demikian, saat program dijalankan dan alamat http://localhost:5000/ dibuka, pengguna akan melihat pesan ""hello, world!"" sebagai output dari aplikasi web tersebut. 3 output - output app.py 4",24301a1a18e77ff5bf5355e27611d555e2424027ab7cca7e749f25fdbb68a419,48e3dd17-c663-4b34-9f69-5b40d5d49128
685baa7df679fda388dcb024,Dokumen A.pdf,uploaded_reports/54987fc0-42f6-4e91-98d1-a094a348a1ee_Dokumen A.pdf,2025-06-25T07:51:25.250Z,"logika gambar di atas adalah program sederhana menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawali dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsi act() dimana fungsi tersebut akan mengembalikan nilai “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisi __name__ == “__main__” berfungsi agar program hanya dapat dijalankan secara langsung dari file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000. output",1df0cac3609be024848adbd66036dbfcbe899e826fdaf0189c85dc5d46f02f49,48e3dd17-c663-4b34-9f69-5b40d5d49128
685baaf5f679fda388dcb026,Dokumen D.pdf,uploaded_reports/02ee037f-46b9-47d4-aa39-4bf4fe2e1181_Dokumen D.pdf,2025-06-25T07:53:25.215Z,"logika disini saya akan menjelaskan logika program diatas yang merupakan mencetak kalimat hello, word dan menampikannya pada browser. pertama disini saya menginstall terlebih dahulu library flask dengan mengetik pada terminal pip install flask dan jalankan, setelah berhasil diinstall masuk ke program, pertama from flask import flask yaitu mengimport library flask yang sudah dodownload tadi, selanjutnya app = flask(__name__) ini untuk membuat instance dari aplikasi flask, dan __name__ digunakan agar flask tahu di mana aplikasi dijalankan (penting untuk menemukan file statis dan template). selanjutnya, terdapat sebuah route yang didefinisikan dengan @app.route('/'), yang berarti ketika saya mengakses url utama (root) seperti http://localhost:5000/, maka fungsi hello() akan dijalankan. fungsi ini hanya mengembalikan teks ""hello, world!"", yang kemudian akan ditampilkan di browser. pada bagian akhir program, terdapat blok if __name__ == '__main__':, yang artinya program akan menjalankan server flask hanya jika file tersebut dijalankan secara langsung (bukan diimpor sebagai modul). perintah app.run() akan memulai server lokal sehingga aplikasi bisa diakses melalui browser. dengan demikian, saat program dijalankan dan alamat http://localhost:5000/ dibuka, pengguna akan melihat pesan ""hello, world!"" sebagai output dari aplikasi web tersebut. 3 output - output app.py 4",24301a1a18e77ff5bf5355e27611d555e2424027ab7cca7e749f25fdbb68a419,ff5c0eb9-ca88-4d5e-bde3-e99b087ae9e9
685baaf5f679fda388dcb027,Dokumen A.pdf,uploaded_reports/4e378f3e-e313-453a-915c-87417a35d036_Dokumen A.pdf,2025-06-25T07:53:25.435Z,"logika gambar di atas adalah program sederhana menggunakan framework flask untuk menampilkan nama, npm, dan kelas. program diawali dengan mengimpor kelas flask dari pustaka flask. lalu menginisialisasi kelas flask dengan objek bernama fedro seperti di baris ke – 3. endpoint dari website tersebut ditentukan dengan decorator. decorator ditunjukan pada baris ke 5 berupa @fedro.route(“/”). route yang ditentukan adalah “/” akan menjalankan fungsi act() dimana fungsi tersebut akan mengembalikan nilai “fedro maulana jatmika | 50421503 | 4ia26” tanpa kode html atau template, hanya teks biasa. perintah if dengan kondisi __name__ == “__main__” berfungsi agar program hanya dapat dijalankan secara langsung dari file tersebut bukan diimport sebagai modul. jika program dijalankan secara langkung maka kelas flask yang diinstansi oleh objek fedro akan dijalankan dengan fungsi run(). program dapat diakses melalui localhost dengan port 5000. output",1df0cac3609be024848adbd66036dbfcbe899e826fdaf0189c85dc5d46f02f49,ff5c0eb9-ca88-4d5e-bde3-e99b087ae9e9
685baaf5f679fda388dcb028,Dokumen B.docx,uploaded_reports/8a673092-7cb2-4bf2-9ef7-7791d4d7d0cc_Dokumen B.docx,2025-06-25T07:53:25.466Z,"logika  	program ini fimulai dengan mengimport kelas flask dan membuat instance-nya bernama fedro. program ini menggunakan decorator @fedro.route(“/”) untuk menentukan titik akhir (endpoint) situs web. artinya, ketika anda mengakses alamat dasasr situs web (misalnya localhost:5000/), fungsi act() akan dijalankan. fungsi ini kemudian akan mengembalikan teks “fedro maulana jatmika | 50421503 | 4ia26” langsung ke browser anda, tanpa format html atau template khusus.  kondisi if __name__ == “__main__”: memastikan bahwa server flask hanya akan berjalan ketika anda menjalankan file program ini secara langsung, bukan saat diimpor sebagai modul di program lain. ketika program dijalankan, fungsi fedro.run() akan memulai server.  	anda mengakses program ini melalui localhost di port 5000 di browser web anda.   output",cf45662a8c0cc98c50e19ea4398c75b33f55621c1953a06b93c2af2b127ba464,ff5c0eb9-ca88-4d5e-bde3-e99b087ae9e9
685baaf5f679fda388dcb029,Dokumen C.docx,uploaded_reports/d669eaf7-c286-4bd0-820b-27ccdf112d90_Dokumen C.docx,2025-06-25T07:53:25.504Z,"logika   pertama-tama, saya pasang dulu flask pakai pip install flask. setelah itu, saya impor flask dan buat instance aplikasi dengan app = flask(__name__), biar aplikasi tahu posisinya. route '/' saya arahkan ke fungsi hello() yang ngasih output “hello, world!”. bagian akhir pake if __name__ == '__main__' biar cuma jalan pas file dijalankan langsung. server lokal bakal nyala dan tampilkan hasilnya di browser. -	output app.py",4875521fb6b60a41bf3a58df9395c6c63c4609878ce083a4c76c26e5e6c34e8a,ff5c0eb9-ca88-4d5e-bde3-e99b087ae9e9
685baed4f4342c3c9d65338b,LA4_Joshua Natanael I_50423663_2IA20_SD.pdf,uploaded_reports/3c884208-f266-4f8e-8da4-58620789ebc3_LA4_Joshua Natanael I_50423663_2IA20_SD.pdf,2025-06-25T08:09:56.576Z,"logika #define max 5 typedef struct { int top; int data[max + 1]; } stack; stack tumpukan; max adalah konstanta yang menentukan kapasitas maksimal stack, yaitu 5 elemen. struktur stack memiliki dua anggota, top menunjukkan indeks elemen teratas dalam stack, data adalah array yang menyimpan elemen-elemen stack dengan maksimal max + 1 elemen. tumpukan adalah variabel bertipe stack yang merepresentasikan stack yang akan digunakan dalam program. void createempty() { tumpukan.top = 0; } fungsi ini menginisialisasi stack agar kosong dengan mengatur top menjadi 0. void push(int x) { tumpukan.top = tumpukan.top + 1; tumpukan.data[tumpukan.top] = x; } fungsi ini digunakan untuk menambahkan elemen ke dalam stack. top dinaikkan satu unit, dan elemen x dimasukkan ke dalam array data pada posisi top. void pop() { tumpukan.top = tumpukan.top - 1; } fungsi ini menghapus elemen teratas dari stack dengan mengurangi nilai top satu unit. int isempty() { if (tumpukan.top == 0) return 1; else return 0; } fungsi ini mengecek apakah stack kosong dengan memeriksa apakah top bernilai 0. jika kosong, fungsi mengembalikan 1; jika tidak, mengembalikan 0. int isfull() { if (tumpukan.top == max) return 1; else return 0; } fungsi ini mengecek apakah stack penuh dengan memeriksa apakah top bernilai max. jika penuh, fungsi mengembalikan 1; jika tidak, mengembalikan 0. int main() { int input, pilih; createempty(); pilih = 0; while (pilih != 5) { puts(""__________________________""); printf("" menu utama\n""); puts(""__________________________""); puts(""1: cek kondisi stack""); puts(""2: tambah data (push)""); puts(""3: keluarkan isi stack (pop)""); puts(""4: kosongkan stack""); puts(""5: keluar""); printf(""pilihan anda: ""); scanf(""%d"", &pilih); variabel input digunakan untuk menyimpan nilai yang akan dimasukkan ke stack, dan pilih digunakan untuk menyimpan pilihan menu dari pengguna. fungsi createempty() dipanggil untuk mengosongkan stack saat program dimulai. while (pilih != 5) menjalankan loop hingga pengguna memilih opsi 5 (keluar). switch (pilih) { case 1: if (isempty() == 1) puts(""stack masih kosong""); else if ((isempty() == 0) && (isfull() == 0)) puts(""stack sudah terisi (belum penuh)""); else puts(""stack sudah penuh""); break; case 2: if (isfull() == 1) puts(""stack penuh""); else { printf(""masukkan data: ""); scanf(""%d"", &input); push(input); printf(""top baru: %d\n"", tumpukan.data[tumpukan.top]); printf(""isfull: %d\n"", isfull()); printf(""isempty: %d\n"", isempty()); } break; case 3: if (isempty() == 1) puts(""stack masih kosong""); else { printf(""top yang dikeluarkan bernilai: %d\n"", tumpukan.data[tumpukan.top]); pop(); } break; case 4: while (isempty() == 0) { printf(""top yang dikeluarkan bernilai %d\n"", tumpukan.data[tumpukan.top]); pop(); } puts(""stack sudah kosong""); break; case 5: puts(""---- terima kasih ----""); break; } } } fungsi ini untuk mengecek kondisi stack apakah kosong, terisi, atau penuh. jika stack penuh, ditampilkan pesan ""stack penuh"". jika belum penuh, pengguna dapat menambahkan data dengan fungsi push(input). jika stack kosong, ditampilkan pesan ""stack masih kosong"". jika tidak kosong, elemen teratas dihapus dari stack menggunakan fungsi pop(). mengeluarkan semua elemen di stack hingga kosong dan menampilkan pesan keluar dan mengakhiri program. output",c14037e92ef0b4700eb76bb1f6ceac44cb75e17cdb5f8d639e6029cf9ef530ae,315f98b4-9711-41c5-9e95-c2c4e0118bea
685baed5f4342c3c9d65338c,LA4_Baskara Kresna Juniarto_50423260_2IA20_SD.pdf,uploaded_reports/2d4fbabe-b096-4ca0-963b-2e206c78e424_LA4_Baskara Kresna Juniarto_50423260_2IA20_SD.pdf,2025-06-25T08:09:57.714Z,"logika pemrograman #include <stdio.h> #include <conio.h> #define max 5 kode ini menyertakan pustaka standar stdio.h untuk operasi input dan output, serta pustaka conio.h untuk fungsi-fungsi khusus console. selain itu, kode ini juga mendefinisikan konstanta max dengan nilai 5, yang akan digunakan sebagai kapasitas maksimum stack dalam program. typedef struct { int top; int data[max + 1]; } stack; stack tumpukan; kode ini mendefinisikan tipe data stack sebagai struktur (struct) yang memiliki dua elemen: top, yang menunjuk posisi elemen teratas dalam stack, dan data, sebuah array dengan ukuran max + 1 untuk menyimpan elemen-elemen stack. selain itu, variabel tumpukan dideklarasikan sebagai instance dari struktur stack, yang akan digunakan untuk operasi pada stack. void createempty() { tumpukan.top = 0; } void push(int x) { tumpukan.top = tumpukan.top + 1; tumpukan.data[tumpukan.top] = x; fungsi inisialisasi mengatur stack dalam keadaan kosong dengan menetapkan top ke 0. sementara itu, fungsi push menambah elemen ke dalam stack dengan menaikkan posisi top menggunakan tumpukan.top = tumpukan.top + 1, kemudian menempatkan data x di posisi top yang baru melalui tumpukan.data[tumpukan.top] = x. void pop() { tumpukan.top = tumpukan.top - 1; } int isempty() { if (tumpukan.top == 0) return 1; else return 0; } int isfull() { if (tumpukan.top == max) return 1; else return 0; } fungsi pop mengeluarkan elemen teratas dari stack dengan menurunkan nilai top sebanyak 1. fungsi isempty memeriksa apakah stack kosong; jika top bernilai 0, fungsi ini mengembalikan 1 (benar), dan 0 jika tidak. sebaliknya, fungsi isfull memeriksa apakah stack sudah penuh; jika top bernilai max, maka fungsi ini mengembalikan 1 (benar), dan 0 jika tidak. int main() { int input, pilih; createempty(); pilih = 0; fungsi int main() adalah fungsi utama program. di dalamnya, variabel input dideklarasikan untuk menyimpan nilai yang akan dimasukkan (push) ke stack, dan variabel pilih dideklarasikan untuk menyimpan pilihan menu yang dipilih oleh pengguna. fungsi createempty() kemudian dipanggil untuk menginisialisasi stack dalam keadaan kosong, sementara pilih diatur ke 0 sebagai nilai awal. while (pilih != 5) { puts(""=========================================""); printf("" menu utama\n""); puts(""=========================================""); puts(""1: cek kondisi stack""); puts(""2: tambah data (push)""); puts(""3: keluarkan isi stack (pop)""); puts(""4: kosongkan stack""); puts(""5: keluar""); printf(""pilihan anda: ""); scanf(""%d"", &pilih); program menggunakan perulangan while (pilih != 5), yang akan terus berjalan selama pengguna belum memilih opsi keluar (diwakili oleh nilai pilih yang tidak sama dengan 5). di dalam perulangan ini, program menampilkan menu utama dengan berbagai pilihan operasi yang dapat dilakukan pada stack. kemudian, scanf(""%d"", &pilih); digunakan untuk mengambil input dari pengguna, yang menunjukkan operasi stack mana yang akan dijalankan sesuai pilihan pengguna. switch (pilih) { case 1: if (isempty() == 1) puts(""stack masih kosong""); else if ((isempty() == 0) && (isfull() == 0)) puts(""stack sudah terisi (belum penuh)""); else puts(""stack sudah penuh""); break; jika fungsi isempty mengembalikan nilai 1, program menampilkan pesan bahwa stack kosong. jika isempty mengembalikan 0 (stack tidak kosong) dan isfull juga mengembalikan 0 (stack belum penuh), program menampilkan pesan bahwa stack terisi tetapi belum penuh. sebaliknya, jika isfull mengembalikan 1, program menampilkan pesan bahwa stack sudah penuh. case 2: if (isfull() == 1) puts(""stack penuh""); else { printf(""masukkan data: ""); scanf(""%d"", &input); push(input); printf(""top baru: %d\n"", tumpukan.data[tumpukan.top]); printf(""isfull: %d\n"", isfull()); printf(""isempty: %d\n"", isempty()); } break; jika stack penuh (diperiksa dengan isfull), program menampilkan pesan ""stack penuh"". jika stack tidak penuh, program akan mengambil input dari pengguna (input) dan memanggil fungsi push(input) untuk menambah elemen tersebut ke stack. setelah itu, program menampilkan nilai top yang baru beserta kondisi stack, yaitu hasil dari isfull dan isempty, untuk menunjukkan apakah stack sudah penuh atau masih kosong setelah penambahan elemen. case 3: if (isempty() == 1) puts(""stack masih kosong""); else { printf(""top yang dikeluarkan bernilai: %d\n"", tumpukan.data[tumpukan.top]); pop(); } break; jika stack kosong (diperiksa dengan isempty), program menampilkan pesan bahwa stack kosong. jika stack tidak kosong, program akan menampilkan nilai elemen teratas (top) dan kemudian memanggil fungsi pop() untuk mengeluarkan elemen tersebut dari stack. case 4: while (isempty() == 0) { printf(""top yang dikeluarkan bernilai %d\n"", tumpukan.data[tumpukan.top]); pop(); } puts(""stack sudah kosong""); break; program akan melakukan loop untuk mengeluarkan elemen teratas satu per satu hingga stack kosong. setiap elemen yang dikeluarkan akan ditampilkan nilai dari elemen top yang dikeluarkan. setelah seluruh elemen dikeluarkan dan stack kosong, program akan menampilkan pesan ""stack sudah kosong"". case 5: puts(""---- terima kasih ----""); break; } } } jika pilihan (pilih) adalah 5, program akan menampilkan pesan ""terima kasih"" dan keluar dari perulangan while. setelah itu, perintah return 0; digunakan untuk menandakan bahwa program telah selesai dan mengakhiri eksekusi. output pemrograman",0faca17e1db5a9b20d43a8912d1d4b340ccf31e8e555c6bcb01dbdf214605d85,315f98b4-9711-41c5-9e95-c2c4e0118bea
685baed6f4342c3c9d65338d,LA4_MDickyKurniawan_50423885_2IA20_SD.pdf,uploaded_reports/8aa886c1-6623-4d5b-9a27-b3d39b611466_LA4_MDickyKurniawan_50423885_2IA20_SD.pdf,2025-06-25T08:09:58.828Z,"logika #include <stdio.h> #include <conio.h> #define max 5 #include <stdio.h> dan #include <conio.h> kedua baris ini mengimpor pustaka stdio.h untuk fungsi input/output standar seperti printf dan scanf, serta conio.h untuk fungsi getch(). kemudian dibawahnya lagi ada #define max 5 yang mendefinisikan konstanta max dengan nilai 5, yang berarti kapasitas maksimum dari stack adalah 5 elemen. typedef struct { int top; int data[max + 1]; } stack; stack tumpukan; di sini, kita mendeklarasikan sebuah struct bernama stack yang berisi top sebagai penanda posisi elemen paling atas dalam stack dan ada data sebagai array untuk menyimpan elemen- elemen stack. setelah itu kita membuat variabel tumpukan bertipe stack. void createempty() { tumpukan.top = 0; } fungsi createempty() menginisialisasi stack agar kosong dengan mengatur top ke 0. void push(int x) { tumpukan.top = tumpukan.top + 1; tumpukan.data[tumpukan.top] = x; } fungsi push(int x) digunakan untuk menambahkan elemen x ke stack. pertama, top dinaikkan satu tingkat, lalu data x disimpan di posisi tersebut. void pop() { tumpukan.top = tumpukan.top - 1; } fungsi pop() digunakan untuk menghapus elemen teratas stack dengan mengurangi nilai top sebesar 1. int isempty() { if (tumpukan.top == 0) return 1; else return 0; } fungsi isempty() memeriksa apakah stack kosong. jika top sama dengan 0, fungsi mengembalikan 1 (artinya kosong), jika tidak, mengembalikan 0. int isfull() { if (tumpukan.top == max) return 1; else return 0; } fungsi isfull() memeriksa apakah stack penuh. jika top sama dengan max, fungsi mengembalikan 1 (artinya penuh), jika tidak, mengembalikan 0. int main() { int input, pilih; createempty(); pilih = 0; while (pilih != 5) { puts(""________________________""); printf("" menu utama\n""); puts(""""); puts(""1: cek kondisi stack""); puts(""2: tambah data (push)""); puts(""3: keluarkan isi stack (pop)""); puts(""4: kosongkan stack""); puts(""5: keluar""); printf(""pilihan anda: ""); scanf(""%d"", &pilih); bagian main() adalah fungsi utama program. di sini, kita mendeklarasikan variabel input dan pilih. createempty() dipanggil untuk menginisialisasi stack. lalu, ada loop while yang berjalan selama pilih tidak sama dengan 5 (opsi keluar). menu ditampilkan dan pilihan pengguna dibaca dengan scanf(). switch (pilih) { case 1: if (isempty() == 1) puts(""stack masih kosong""); else if ((isempty() == 0) && (isfull() == 0)) puts(""stack sudah terisi (belum penuh)""); else puts(""stack sudah penuh""); break; jadi pada switch-case ini berfungsi sebagai pilihan pada menu nantinya pada case 1: program ini memeriksa kondisi stack. jika kosong, akan menampilkan ""stack masih kosong"". jika terisi sebagian, akan menampilkan ""stack sudah terisi (belum penuh)"". jika penuh, menampilkan ""stack sudah penuh"". case 2: if (isfull() == 1) puts(""stack penuh""); else { printf(""masukkan data: ""); scanf(""%d"", &input); push(input); printf(""top baru: %d\n"", tumpukan.data[tumpukan.top]); printf(""isfull: %d\n"", isfull()); printf(""isempty: %d\n"", isempty()); } break; pada case 2: jika stack penuh, akan menampilkan ""stack penuh"". jika tidak, program meminta pengguna memasukkan data, lalu memanggil push(input) untuk menambah data ke stack. informasi tentang data teratas, apakah stack penuh, dan apakah kosong ditampilkan. case 3: if (isempty() == 1) puts(""stack masih kosong""); else { printf(""top yang dikeluarkan bernilai: %d\n"", tumpukan.data[tumpukan.top]); pop(); } break; pada case 3: jika stack kosong, akan menampilkan ""stack masih kosong"". jika tidak, program menampilkan elemen teratas yang akan dihapus, lalu memanggil pop() untuk menghapusnya. case 4: while (isempty() == 0) { printf(""top yang dikeluarkan bernilai %d\n"", tumpukan.data[tumpukan.top]); pop(); } puts(""stack sudah kosong""); break; pada case 4: program mengosongkan stack dengan menggunakan loop while yang memanggil pop() sampai stack kosong, lalu menampilkan ""stack sudah kosong"". case 5: puts(""---- terima kasih ----""); break; } } } pada case 5: itu nantinya akan menampilkan pesan ""terima kasih"" dan keluar dari loop. output",23cf0109a2b4a1d9fa5ed41d28f6dcbbee433650087e120476c03ac106b805a2,315f98b4-9711-41c5-9e95-c2c4e0118bea
685baed8f4342c3c9d65338e,LA4_Josse Andrian_50423664_2IA22.pdf,uploaded_reports/352c7f50-310f-46c1-a072-8000b8624c7b_LA4_Josse Andrian_50423664_2IA22.pdf,2025-06-25T08:10:00.357Z,"logika #include <stdio.h> #include <conio.h> #define max 5 #include <stdio.h>: menyertakan library standar input/output di c, yang memungkinkan penggunaan fungsi seperti printf, scanf, puts, dll. #include <conio.h>: library ini sering digunakan untuk manipulasi input dan output di beberapa compiler (misalnya turbo c), meskipun tidak standar dalam c modern. #define max 5: mendefinisikan konstanta max yang menunjukkan ukuran maksimal stack adalah 5 elemen. typedef struct { int top; int data [max+1]; }stack; typedef struct: mendeklarasikan struktur data baru dengan nama stack. int top: menyimpan indeks elemen terakhir (atau ""top"") di stack. int data[max+1]: array untuk menyimpan elemen stack. ukuran max+1 karena kita menggunakan indeks dari 0 hingga 5, jika max adalah 5, array akan berukuran 6. void createempty(); int isempty(); int isfull(); void push (int x); void pop(); createempty(): fungsi untuk menginisialisasi stack kosong. isempty(): fungsi untuk memeriksa apakah stack kosong. isfull(): fungsi untuk memeriksa apakah stack sudah penuh. push(int x): fungsi untuk menambahkan elemen ke stack. pop(): fungsi untuk mengeluarkan elemen dari stack. main() { int lagi; int input; int pilih; createempty(); pilih = 0; main(): fungsi utama tempat eksekusi program dimulai. int lagi, input, pilih: variabel untuk kontrol alur program dan input pengguna. createempty(): memanggil fungsi untuk menginisialisasi stack sehingga top mulai dari 0. pilih = 0: inisialisasi pilihan menu. while (pilih != 5) { puts(""""); printf("" menu utama\n""); puts (""""); puts(""1: cek kondisi stack""); puts(""2: tambah data (push)""); puts(""3: keluarkan isi stack (pop)""); puts (""4: kosongkan stack""); puts (""5: keluar""); printf(""pilihan anda: ""); scanf(""%d"", &pilih); while (pilih != 5): loop utama yang akan terus berjalan selama pilihan menu bukan 5 (keluar). puts(""""): menampilkan baris kosong untuk pemisah. printf(""menu utama""): menampilkan judul menu utama. scanf(""%d"", &pilih): membaca input pilihan menu dari pengguna. switch (pilih) { case 1: if (isempty() == 1) puts (""stack masih kosong""); else if ((isempty() == 0) && (isfull() == 0)) puts(""stack sudah terisi (belum penuh)""); else puts(""stack sudah penuh""); break; switch (pilih): menggunakan struktur switch untuk memilih tindakan berdasarkan input pengguna. case 1: jika pengguna memilih opsi 1 (cek kondisi stack). isempty() == 1: jika stack kosong, tampilkan pesan bahwa stack kosong. jika stack tidak kosong dan tidak penuh, tampilkan pesan bahwa stack sudah terisi (belum penuh). jika stack penuh, tampilkan pesan bahwa stack sudah penuh. case 2: if (isfull() == 1) puts (""stack penuh.""); else { printf(""masukkan data: ""); scanf(""%d"",&input); push (input); printf(""top baxx: %d\n"", tumpukan.data[tumpukan.top]); printf(""isfull: %d\n"", isfull()); printf(""isempty: %d\n"", isempty()); } break; case 2: jika pengguna memilih opsi 2 (push data). jika stack penuh, tampilkan pesan bahwa stack penuh. jika tidak penuh, pengguna diminta untuk memasukkan data, yang kemudian dimasukkan ke dalam stack dengan fungsi push(input). setelah itu, tampilkan nilai top stack yang terbaru dan status apakah stack penuh atau kosong. case 3: printf(""top yang dikeluarkan bernilai: %d \n"", tumpukan.data[tumpukan.top]); pop(); break; case 3: jika pengguna memilih opsi 3 (pop data). tampilkan nilai yang dikeluarkan dari stack, yaitu elemen yang ada di posisi top. fungsi pop() dipanggil untuk mengeluarkan elemen dari stack. case 4: while (isempty() == 0) { printf(""top yang dikeluarkan bernilai: %d \n"", tumpukan.data[tumpukan.top]); pop(); } puts (""stack sudah kosong""); break; case 4: jika pengguna memilih opsi 4 (kosongkan stack). loop while (isempty() == 0) akan terus berjalan selama stack tidak kosong. setiap elemen dari stack akan dikeluarkan satu per satu menggunakan pop(), dan nilai top yang dikeluarkan akan ditampilkan. case 5: puts(""---terimakasih--""); break; case 5: jika pengguna memilih opsi 5 (keluar), program akan menampilkan pesan terima kasih dan berhenti. void createempty() { tumpukan.top = 0; } void push(int x) { tumpukan.top = tumpukan.top + 1; tumpukan.data[tumpukan.top] = x; } void pop() { tumpukan.top = tumpukan.top - 1; } int isempty() { if (tumpukan.top == 0) return 1; else return 0; } int isfull() { if(tumpukan.top == max) return 1; else return 0; } fungsi ini menginisialisasi stack dengan top diset ke 0, menandakan stack kosong. fungsi ini menambahkan elemen x ke stack dengan menaikkan nilai top dan menyimpan nilai x pada data[top]. fungsi ini mengurangi nilai top, yang berarti mengeluarkan elemen teratas stack. fungsi ini mengembalikan 1 jika stack kosong (top == 0), dan 0 jika stack tidak kosong. fungsi ini mengembalikan 1 jika stack penuh (top == max), dan 0 jika stack masih bisa menampung elemen lebih banyak. output",b726f2ac04697e4dbf331d412e0ff89b1965c28e40243a9f0cb43cd4540803f1,315f98b4-9711-41c5-9e95-c2c4e0118bea
685bb4b0f4342c3c9d653390,LA2_Muhammad Faturrachman Siqli_50423909.pdf,uploaded_reports/8e3f2660-ad09-4b1d-b1e1-1ee0b369bcc9_LA2_Muhammad Faturrachman Siqli_50423909.pdf,2025-06-25T08:34:56.962Z,"logika  program ini adalah implementasi linked list sederhana dalam bahasa c, yang menyediakan fungsi untuk menambah, menampilkan, mencari, dan menghapus data dari dalam linked list. program ini dimulai dengan mendefinisikan struktur node, yang memiliki dua anggota: info, yang menyimpan data integer, dan next, yang merupakan pointer ke node berikutnya dalam linked list. program juga menggunakan typedef struct node *simpul untuk mendefinisikan tipe data simpul sebagai pointer ke node. di dalam fungsi main, beberapa pointer dideklarasikan, termasuk head sebagai pointer awal linked list, tail untuk mengakses node terakhir, serta temp dan prev untuk membantu operasi lainnya. program berisi loop utama yang menampilkan menu dengan lima opsi: insert, view, search, delete, dan keluar. pada opsi insert, program meminta pengguna untuk memasukkan data baru yang akan disimpan dalam linked list. node baru akan dibuat dengan malloc, diisi dengan data, lalu ditambahkan ke akhir linked list. jika linked list kosong, node ini akan menjadi head dan tail; jika tidak, tail diperbarui ke node baru. opsi view menampilkan semua elemen di dalam linked list dari head hingga tail. program melintasi linked list dan mencetak nilai info dari setiap node hingga akhir. opsi search memungkinkan pengguna mencari data tertentu dalam linked list. program mencari node dengan nilai info yang sesuai, lalu menampilkan pesan apakah data ditemukan atau tidak. opsi delete memungkinkan pengguna menghapus node dengan nilai tertentu dari linked list. jika node ditemukan, program meminta konfirmasi pengguna untuk menghapusnya. jika pengguna memilih ""y"", node tersebut akan dihapus dan linked list diperbarui. pointer head atau tail juga diperbarui jika node yang dihapus adalah node pertama atau terakhir. jika node tidak ditemukan, program menampilkan pesan ""data tidak ditemukan"". loop utama terus berjalan sampai pengguna memilih opsi ""keluar"" (pilih 5). program kemudian mengakhiri eksekusi dengan menampilkan pesan untuk menekan tombol apa saja agar keluar. output",e1768802ed40487085c43e6413c155240117f667eb4a03bd3cb61b4b4200330c,7485afb0-5e93-43e6-9d75-49ecedbd6aa7
685bb4b1f4342c3c9d653391,LA2_Salsabila Azzahro Andrian_51423352_2IA22.pdf,uploaded_reports/5efee955-1f16-4969-8cd8-7a8a88f74302_LA2_Salsabila Azzahro Andrian_51423352_2IA22.pdf,2025-06-25T08:34:57.420Z,"logika program kode ini mendefinisikan struktur data untuk sebuah node dalam linked list menggunakan bahasa c. struktur `node` memiliki dua atribut: `info`, yang bertipe `int` untuk menyimpan data, dan `next`, yang merupakan pointer ke node berikutnya dalam linked list. struktur ini akan digunakan untuk membangun daftar terhubung (linked list) yang dapat menyimpan serangkaian elemen. bagian kode ini adalah awal dari fungsi `main` untuk program linked list dalam bahasa c. kode mendefinisikan tipe `simpul` sebagai pointer ke struktur `node`. di dalam `main`, beberapa pointer diinisialisasi: `baru`, `head`, `tail`, `temp`, dan `prev`, serta beberapa variabel untuk pilihan pengguna dan data. program kemudian membersihkan layar menggunakan `system(""cls"")` dan menampilkan menu interaktif yang memungkinkan pengguna untuk memilih opsi untuk menyisipkan, melihat, mencari, atau menghapus elemen dalam linked list, serta untuk keluar dari program. bagian kode ini menangani opsi pertama dari menu, yaitu menyisipkan data ke dalam linked list. setelah pengguna memasukkan data, program mengalokasikan memori untuk node baru menggunakan `malloc` dan menyimpan data tersebut dalam atribut `info` dari node baru. jika linked list kosong (ketika `head` adalah `null`), node baru menjadi `head` dan `tail`. jika linked list sudah memiliki elemen, node baru disambungkan di belakang node terakhir (tail), dan `tail` diperbarui untuk menunjuk ke node baru tersebut. ini memastikan linked list selalu terhubung dengan benar. bagian kode ini menangani opsi kedua dari menu, yaitu menampilkan semua elemen dalam linked list. program mulai dengan mengatur pointer `temp` ke `head`, yang merupakan node pertama dalam linked list. selama `temp` tidak `null`, program mencetak nilai `info` dari node saat ini dan kemudian menggeser `temp` ke node berikutnya menggunakan `temp- >next`. proses ini berlanjut hingga semua elemen di linked list ditampilkan, dan akhirnya mencetak baris baru untuk format yang lebih baik. bagian kode ini menangani opsi ketiga dari menu, yaitu mencari sebuah angka dalam linked list. program meminta pengguna untuk memasukkan angka yang ingin dicari, kemudian memulai pencarian dari `head`. selama `temp` tidak `null` dan nilai `info` dari node saat ini tidak sama dengan angka yang dicari, program akan menggeser `temp` ke node berikutnya. jika setelah pencarian `temp` tidak `null` dan nilai `info` yang ditemukan sama dengan angka yang dicari, program mencetak ""data ditemukan"". jika tidak, program mencetak ""data tidak ditemukan"", menandakan bahwa angka tersebut tidak ada dalam linked list. bagian kode ini menangani penghapusan angka dari linked list. setelah meminta pengguna untuk memasukkan angka yang ingin dihapus, program mencari node yang sesuai menggunakan pointer `temp` dan melacak node sebelumnya dengan pointer `prev`. jika node ditemukan, program meminta konfirmasi dari pengguna untuk melanjutkan penghapusan. jika pengguna setuju, program menangani beberapa skenario: jika node yang dihapus berada di tengah atau akhir, pointer `prev` diatur untuk melewati node tersebut; jika node yang dihapus adalah satu-satunya node dalam linked list, `head` diatur ke `null`; jika node yang dihapus adalah `head`, pointer `head` diperbarui untuk menunjuk ke node berikutnya; dan jika node tersebut berada di akhir, `tail` juga diperbarui. setelah penghapusan, memori untuk node yang dihapus dibebaskan, dan program memberi tahu pengguna bahwa data telah berhasil dihapus, atau jika node tidak ditemukan, mencetak pesan yang sesuai. bagian kode ini mengakhiri loop program dengan menggunakan `do...while`, yang akan terus menampilkan menu dan memproses pilihan pengguna hingga pengguna memilih opsi untuk keluar (5). setelah pilihan 5 dipilih, program keluar dari loop dan mengembalikan nilai 0, menandakan bahwa eksekusi program selesai dengan sukses. dengan demikian, seluruh fungsi `main` memberikan pengguna kesempatan untuk berinteraksi dengan linked list hingga mereka memutuskan untuk menutup program. output program",4fcbc794fee168d3a4c7a7a3ed3fbedfa5c12e98795d41635bec9a1bca883664,7485afb0-5e93-43e6-9d75-49ecedbd6aa7
685bb4b1f4342c3c9d653392,Muhammad Firzan Alfatih_50423921_LA2.pdf,uploaded_reports/ea933738-e8dd-4e75-b214-11c9c335acf2_Muhammad Firzan Alfatih_50423921_LA2.pdf,2025-06-25T08:34:57.850Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,7485afb0-5e93-43e6-9d75-49ecedbd6aa7
685bb4b2f4342c3c9d653393,Ahmad Damar Wiryateja_50423078_LA2_SD.pdf,uploaded_reports/8c113921-5cbf-47a3-b34d-688c093c06ff_Ahmad Damar Wiryateja_50423078_LA2_SD.pdf,2025-06-25T08:34:58.340Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,7485afb0-5e93-43e6-9d75-49ecedbd6aa7
685bb5cbf4342c3c9d653395,Dokumen Uji Coba C.pdf,uploaded_reports/c2e90b2e-8907-4eef-961f-b5a09d5d4467_Dokumen Uji Coba C.pdf,2025-06-25T08:39:39.966Z,"logika program kode ini mendefinisikan struktur data untuk sebuah node dalam linked list menggunakan bahasa c. struktur `node` memiliki dua atribut: `info`, yang bertipe `int` untuk menyimpan data, dan `next`, yang merupakan pointer ke node berikutnya dalam linked list. struktur ini akan digunakan untuk membangun daftar terhubung (linked list) yang dapat menyimpan serangkaian elemen. bagian kode ini adalah awal dari fungsi `main` untuk program linked list dalam bahasa c. kode mendefinisikan tipe `simpul` sebagai pointer ke struktur `node`. di dalam `main`, beberapa pointer diinisialisasi: `baru`, `head`, `tail`, `temp`, dan `prev`, serta beberapa variabel untuk pilihan pengguna dan data. program kemudian membersihkan layar menggunakan `system(""cls"")` dan menampilkan menu interaktif yang memungkinkan pengguna untuk memilih opsi untuk menyisipkan, melihat, mencari, atau menghapus elemen dalam linked list, serta untuk keluar dari program. bagian kode ini menangani opsi pertama dari menu, yaitu menyisipkan data ke dalam linked list. setelah pengguna memasukkan data, program mengalokasikan memori untuk node baru menggunakan `malloc` dan menyimpan data tersebut dalam atribut `info` dari node baru. jika linked list kosong (ketika `head` adalah `null`), node baru menjadi `head` dan `tail`. jika linked list sudah memiliki elemen, node baru disambungkan di belakang node terakhir (tail), dan `tail` diperbarui untuk menunjuk ke node baru tersebut. ini memastikan linked list selalu terhubung dengan benar. bagian kode ini menangani opsi kedua dari menu, yaitu menampilkan semua elemen dalam linked list. program mulai dengan mengatur pointer `temp` ke `head`, yang merupakan node pertama dalam linked list. selama `temp` tidak `null`, program mencetak nilai `info` dari node saat ini dan kemudian menggeser `temp` ke node berikutnya menggunakan `temp- >next`. proses ini berlanjut hingga semua elemen di linked list ditampilkan, dan akhirnya mencetak baris baru untuk format yang lebih baik. bagian kode ini menangani opsi ketiga dari menu, yaitu mencari sebuah angka dalam linked list. program meminta pengguna untuk memasukkan angka yang ingin dicari, kemudian memulai pencarian dari `head`. selama `temp` tidak `null` dan nilai `info` dari node saat ini tidak sama dengan angka yang dicari, program akan menggeser `temp` ke node berikutnya. jika setelah pencarian `temp` tidak `null` dan nilai `info` yang ditemukan sama dengan angka yang dicari, program mencetak ""data ditemukan"". jika tidak, program mencetak ""data tidak ditemukan"", menandakan bahwa angka tersebut tidak ada dalam linked list. bagian kode ini menangani penghapusan angka dari linked list. setelah meminta pengguna untuk memasukkan angka yang ingin dihapus, program mencari node yang sesuai menggunakan pointer `temp` dan melacak node sebelumnya dengan pointer `prev`. jika node ditemukan, program meminta konfirmasi dari pengguna untuk melanjutkan penghapusan. jika pengguna setuju, program menangani beberapa skenario: jika node yang dihapus berada di tengah atau akhir, pointer `prev` diatur untuk melewati node tersebut; jika node yang dihapus adalah satu-satunya node dalam linked list, `head` diatur ke `null`; jika node yang dihapus adalah `head`, pointer `head` diperbarui untuk menunjuk ke node berikutnya; dan jika node tersebut berada di akhir, `tail` juga diperbarui. setelah penghapusan, memori untuk node yang dihapus dibebaskan, dan program memberi tahu pengguna bahwa data telah berhasil dihapus, atau jika node tidak ditemukan, mencetak pesan yang sesuai. bagian kode ini mengakhiri loop program dengan menggunakan `do...while`, yang akan terus menampilkan menu dan memproses pilihan pengguna hingga pengguna memilih opsi untuk keluar (5). setelah pilihan 5 dipilih, program keluar dari loop dan mengembalikan nilai 0, menandakan bahwa eksekusi program selesai dengan sukses. dengan demikian, seluruh fungsi `main` memberikan pengguna kesempatan untuk berinteraksi dengan linked list hingga mereka memutuskan untuk menutup program. output program",4fcbc794fee168d3a4c7a7a3ed3fbedfa5c12e98795d41635bec9a1bca883664,c6f6b87e-387e-4da6-8963-03d567b348aa
685bb5ccf4342c3c9d653396,Dokumen Uji Coba D.pdf,uploaded_reports/f75cedd1-2fda-4f7a-a0be-e587e9329df9_Dokumen Uji Coba D.pdf,2025-06-25T08:39:40.395Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,c6f6b87e-387e-4da6-8963-03d567b348aa
685bb5cef4342c3c9d653397,Dokumen Uji Coba A.pdf,uploaded_reports/06b43e50-84c1-4ca6-bb98-ea6d0a7282eb_Dokumen Uji Coba A.pdf,2025-06-25T08:39:42.371Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,c6f6b87e-387e-4da6-8963-03d567b348aa
685bb5cef4342c3c9d653398,Dokumen Uji Coba B.pdf,uploaded_reports/d7f8b7b1-5d19-4cd4-abeb-a540f8012f41_Dokumen Uji Coba B.pdf,2025-06-25T08:39:42.538Z,"logika  program ini adalah implementasi linked list sederhana dalam bahasa c, yang menyediakan fungsi untuk menambah, menampilkan, mencari, dan menghapus data dari dalam linked list. program ini dimulai dengan mendefinisikan struktur node, yang memiliki dua anggota: info, yang menyimpan data integer, dan next, yang merupakan pointer ke node berikutnya dalam linked list. program juga menggunakan typedef struct node *simpul untuk mendefinisikan tipe data simpul sebagai pointer ke node. di dalam fungsi main, beberapa pointer dideklarasikan, termasuk head sebagai pointer awal linked list, tail untuk mengakses node terakhir, serta temp dan prev untuk membantu operasi lainnya. program berisi loop utama yang menampilkan menu dengan lima opsi: insert, view, search, delete, dan keluar. pada opsi insert, program meminta pengguna untuk memasukkan data baru yang akan disimpan dalam linked list. node baru akan dibuat dengan malloc, diisi dengan data, lalu ditambahkan ke akhir linked list. jika linked list kosong, node ini akan menjadi head dan tail; jika tidak, tail diperbarui ke node baru. opsi view menampilkan semua elemen di dalam linked list dari head hingga tail. program melintasi linked list dan mencetak nilai info dari setiap node hingga akhir. opsi search memungkinkan pengguna mencari data tertentu dalam linked list. program mencari node dengan nilai info yang sesuai, lalu menampilkan pesan apakah data ditemukan atau tidak. opsi delete memungkinkan pengguna menghapus node dengan nilai tertentu dari linked list. jika node ditemukan, program meminta konfirmasi pengguna untuk menghapusnya. jika pengguna memilih ""y"", node tersebut akan dihapus dan linked list diperbarui. pointer head atau tail juga diperbarui jika node yang dihapus adalah node pertama atau terakhir. jika node tidak ditemukan, program menampilkan pesan ""data tidak ditemukan"". loop utama terus berjalan sampai pengguna memilih opsi ""keluar"" (pilih 5). program kemudian mengakhiri eksekusi dengan menampilkan pesan untuk menekan tombol apa saja agar keluar. output",e1768802ed40487085c43e6413c155240117f667eb4a03bd3cb61b4b4200330c,c6f6b87e-387e-4da6-8963-03d567b348aa
686698d684754a1cdb341396,Dokumen Uji Coba C.pdf,uploaded_reports/66800486-ecc3-4a6c-be81-011840452b54_Dokumen Uji Coba C.pdf,2025-07-03T14:51:02.263Z,"logika program kode ini mendefinisikan struktur data untuk sebuah node dalam linked list menggunakan bahasa c. struktur `node` memiliki dua atribut: `info`, yang bertipe `int` untuk menyimpan data, dan `next`, yang merupakan pointer ke node berikutnya dalam linked list. struktur ini akan digunakan untuk membangun daftar terhubung (linked list) yang dapat menyimpan serangkaian elemen. bagian kode ini adalah awal dari fungsi `main` untuk program linked list dalam bahasa c. kode mendefinisikan tipe `simpul` sebagai pointer ke struktur `node`. di dalam `main`, beberapa pointer diinisialisasi: `baru`, `head`, `tail`, `temp`, dan `prev`, serta beberapa variabel untuk pilihan pengguna dan data. program kemudian membersihkan layar menggunakan `system(""cls"")` dan menampilkan menu interaktif yang memungkinkan pengguna untuk memilih opsi untuk menyisipkan, melihat, mencari, atau menghapus elemen dalam linked list, serta untuk keluar dari program. bagian kode ini menangani opsi pertama dari menu, yaitu menyisipkan data ke dalam linked list. setelah pengguna memasukkan data, program mengalokasikan memori untuk node baru menggunakan `malloc` dan menyimpan data tersebut dalam atribut `info` dari node baru. jika linked list kosong (ketika `head` adalah `null`), node baru menjadi `head` dan `tail`. jika linked list sudah memiliki elemen, node baru disambungkan di belakang node terakhir (tail), dan `tail` diperbarui untuk menunjuk ke node baru tersebut. ini memastikan linked list selalu terhubung dengan benar. bagian kode ini menangani opsi kedua dari menu, yaitu menampilkan semua elemen dalam linked list. program mulai dengan mengatur pointer `temp` ke `head`, yang merupakan node pertama dalam linked list. selama `temp` tidak `null`, program mencetak nilai `info` dari node saat ini dan kemudian menggeser `temp` ke node berikutnya menggunakan `temp- >next`. proses ini berlanjut hingga semua elemen di linked list ditampilkan, dan akhirnya mencetak baris baru untuk format yang lebih baik. bagian kode ini menangani opsi ketiga dari menu, yaitu mencari sebuah angka dalam linked list. program meminta pengguna untuk memasukkan angka yang ingin dicari, kemudian memulai pencarian dari `head`. selama `temp` tidak `null` dan nilai `info` dari node saat ini tidak sama dengan angka yang dicari, program akan menggeser `temp` ke node berikutnya. jika setelah pencarian `temp` tidak `null` dan nilai `info` yang ditemukan sama dengan angka yang dicari, program mencetak ""data ditemukan"". jika tidak, program mencetak ""data tidak ditemukan"", menandakan bahwa angka tersebut tidak ada dalam linked list. bagian kode ini menangani penghapusan angka dari linked list. setelah meminta pengguna untuk memasukkan angka yang ingin dihapus, program mencari node yang sesuai menggunakan pointer `temp` dan melacak node sebelumnya dengan pointer `prev`. jika node ditemukan, program meminta konfirmasi dari pengguna untuk melanjutkan penghapusan. jika pengguna setuju, program menangani beberapa skenario: jika node yang dihapus berada di tengah atau akhir, pointer `prev` diatur untuk melewati node tersebut; jika node yang dihapus adalah satu-satunya node dalam linked list, `head` diatur ke `null`; jika node yang dihapus adalah `head`, pointer `head` diperbarui untuk menunjuk ke node berikutnya; dan jika node tersebut berada di akhir, `tail` juga diperbarui. setelah penghapusan, memori untuk node yang dihapus dibebaskan, dan program memberi tahu pengguna bahwa data telah berhasil dihapus, atau jika node tidak ditemukan, mencetak pesan yang sesuai. bagian kode ini mengakhiri loop program dengan menggunakan `do...while`, yang akan terus menampilkan menu dan memproses pilihan pengguna hingga pengguna memilih opsi untuk keluar (5). setelah pilihan 5 dipilih, program keluar dari loop dan mengembalikan nilai 0, menandakan bahwa eksekusi program selesai dengan sukses. dengan demikian, seluruh fungsi `main` memberikan pengguna kesempatan untuk berinteraksi dengan linked list hingga mereka memutuskan untuk menutup program. output program",4fcbc794fee168d3a4c7a7a3ed3fbedfa5c12e98795d41635bec9a1bca883664,80aa6f5a-ef0d-484a-9b2f-7412a00221a4
686698d684754a1cdb341397,Dokumen Uji Coba D.pdf,uploaded_reports/d2c18db1-aa72-436b-96e2-a7d9793a525b_Dokumen Uji Coba D.pdf,2025-07-03T14:51:02.831Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,80aa6f5a-ef0d-484a-9b2f-7412a00221a4
686698d784754a1cdb341398,Dokumen Uji Coba A.pdf,uploaded_reports/38041abf-6f69-48f5-af05-6a554f323100_Dokumen Uji Coba A.pdf,2025-07-03T14:51:03.439Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,80aa6f5a-ef0d-484a-9b2f-7412a00221a4
686698d784754a1cdb341399,Dokumen Uji Coba B.pdf,uploaded_reports/80fb7825-655d-441b-8f95-ce449d752671_Dokumen Uji Coba B.pdf,2025-07-03T14:51:03.688Z,"logika  program ini adalah implementasi linked list sederhana dalam bahasa c, yang menyediakan fungsi untuk menambah, menampilkan, mencari, dan menghapus data dari dalam linked list. program ini dimulai dengan mendefinisikan struktur node, yang memiliki dua anggota: info, yang menyimpan data integer, dan next, yang merupakan pointer ke node berikutnya dalam linked list. program juga menggunakan typedef struct node *simpul untuk mendefinisikan tipe data simpul sebagai pointer ke node. di dalam fungsi main, beberapa pointer dideklarasikan, termasuk head sebagai pointer awal linked list, tail untuk mengakses node terakhir, serta temp dan prev untuk membantu operasi lainnya. program berisi loop utama yang menampilkan menu dengan lima opsi: insert, view, search, delete, dan keluar. pada opsi insert, program meminta pengguna untuk memasukkan data baru yang akan disimpan dalam linked list. node baru akan dibuat dengan malloc, diisi dengan data, lalu ditambahkan ke akhir linked list. jika linked list kosong, node ini akan menjadi head dan tail; jika tidak, tail diperbarui ke node baru. opsi view menampilkan semua elemen di dalam linked list dari head hingga tail. program melintasi linked list dan mencetak nilai info dari setiap node hingga akhir. opsi search memungkinkan pengguna mencari data tertentu dalam linked list. program mencari node dengan nilai info yang sesuai, lalu menampilkan pesan apakah data ditemukan atau tidak. opsi delete memungkinkan pengguna menghapus node dengan nilai tertentu dari linked list. jika node ditemukan, program meminta konfirmasi pengguna untuk menghapusnya. jika pengguna memilih ""y"", node tersebut akan dihapus dan linked list diperbarui. pointer head atau tail juga diperbarui jika node yang dihapus adalah node pertama atau terakhir. jika node tidak ditemukan, program menampilkan pesan ""data tidak ditemukan"". loop utama terus berjalan sampai pengguna memilih opsi ""keluar"" (pilih 5). program kemudian mengakhiri eksekusi dengan menampilkan pesan untuk menekan tombol apa saja agar keluar. output",e1768802ed40487085c43e6413c155240117f667eb4a03bd3cb61b4b4200330c,80aa6f5a-ef0d-484a-9b2f-7412a00221a4
68669c370889377e0827984b,Dokumen Uji Coba B.pdf,uploaded_reports/2e3a8a87-2318-4ef3-a6c1-a7aed4116359_Dokumen Uji Coba B.pdf,2025-07-03T15:05:27.440Z,"logika  program ini adalah implementasi linked list sederhana dalam bahasa c, yang menyediakan fungsi untuk menambah, menampilkan, mencari, dan menghapus data dari dalam linked list. program ini dimulai dengan mendefinisikan struktur node, yang memiliki dua anggota: info, yang menyimpan data integer, dan next, yang merupakan pointer ke node berikutnya dalam linked list. program juga menggunakan typedef struct node *simpul untuk mendefinisikan tipe data simpul sebagai pointer ke node. di dalam fungsi main, beberapa pointer dideklarasikan, termasuk head sebagai pointer awal linked list, tail untuk mengakses node terakhir, serta temp dan prev untuk membantu operasi lainnya. program berisi loop utama yang menampilkan menu dengan lima opsi: insert, view, search, delete, dan keluar. pada opsi insert, program meminta pengguna untuk memasukkan data baru yang akan disimpan dalam linked list. node baru akan dibuat dengan malloc, diisi dengan data, lalu ditambahkan ke akhir linked list. jika linked list kosong, node ini akan menjadi head dan tail; jika tidak, tail diperbarui ke node baru. opsi view menampilkan semua elemen di dalam linked list dari head hingga tail. program melintasi linked list dan mencetak nilai info dari setiap node hingga akhir. opsi search memungkinkan pengguna mencari data tertentu dalam linked list. program mencari node dengan nilai info yang sesuai, lalu menampilkan pesan apakah data ditemukan atau tidak. opsi delete memungkinkan pengguna menghapus node dengan nilai tertentu dari linked list. jika node ditemukan, program meminta konfirmasi pengguna untuk menghapusnya. jika pengguna memilih ""y"", node tersebut akan dihapus dan linked list diperbarui. pointer head atau tail juga diperbarui jika node yang dihapus adalah node pertama atau terakhir. jika node tidak ditemukan, program menampilkan pesan ""data tidak ditemukan"". loop utama terus berjalan sampai pengguna memilih opsi ""keluar"" (pilih 5). program kemudian mengakhiri eksekusi dengan menampilkan pesan untuk menekan tombol apa saja agar keluar. output",e1768802ed40487085c43e6413c155240117f667eb4a03bd3cb61b4b4200330c,7f0dd43f-2c58-4eee-9c30-4ffec186c637
68669c370889377e0827984c,Dokumen Uji Coba C.pdf,uploaded_reports/1773b627-cfe6-4d60-a6ff-78439b439259_Dokumen Uji Coba C.pdf,2025-07-03T15:05:27.890Z,"logika program kode ini mendefinisikan struktur data untuk sebuah node dalam linked list menggunakan bahasa c. struktur `node` memiliki dua atribut: `info`, yang bertipe `int` untuk menyimpan data, dan `next`, yang merupakan pointer ke node berikutnya dalam linked list. struktur ini akan digunakan untuk membangun daftar terhubung (linked list) yang dapat menyimpan serangkaian elemen. bagian kode ini adalah awal dari fungsi `main` untuk program linked list dalam bahasa c. kode mendefinisikan tipe `simpul` sebagai pointer ke struktur `node`. di dalam `main`, beberapa pointer diinisialisasi: `baru`, `head`, `tail`, `temp`, dan `prev`, serta beberapa variabel untuk pilihan pengguna dan data. program kemudian membersihkan layar menggunakan `system(""cls"")` dan menampilkan menu interaktif yang memungkinkan pengguna untuk memilih opsi untuk menyisipkan, melihat, mencari, atau menghapus elemen dalam linked list, serta untuk keluar dari program. bagian kode ini menangani opsi pertama dari menu, yaitu menyisipkan data ke dalam linked list. setelah pengguna memasukkan data, program mengalokasikan memori untuk node baru menggunakan `malloc` dan menyimpan data tersebut dalam atribut `info` dari node baru. jika linked list kosong (ketika `head` adalah `null`), node baru menjadi `head` dan `tail`. jika linked list sudah memiliki elemen, node baru disambungkan di belakang node terakhir (tail), dan `tail` diperbarui untuk menunjuk ke node baru tersebut. ini memastikan linked list selalu terhubung dengan benar. bagian kode ini menangani opsi kedua dari menu, yaitu menampilkan semua elemen dalam linked list. program mulai dengan mengatur pointer `temp` ke `head`, yang merupakan node pertama dalam linked list. selama `temp` tidak `null`, program mencetak nilai `info` dari node saat ini dan kemudian menggeser `temp` ke node berikutnya menggunakan `temp- >next`. proses ini berlanjut hingga semua elemen di linked list ditampilkan, dan akhirnya mencetak baris baru untuk format yang lebih baik. bagian kode ini menangani opsi ketiga dari menu, yaitu mencari sebuah angka dalam linked list. program meminta pengguna untuk memasukkan angka yang ingin dicari, kemudian memulai pencarian dari `head`. selama `temp` tidak `null` dan nilai `info` dari node saat ini tidak sama dengan angka yang dicari, program akan menggeser `temp` ke node berikutnya. jika setelah pencarian `temp` tidak `null` dan nilai `info` yang ditemukan sama dengan angka yang dicari, program mencetak ""data ditemukan"". jika tidak, program mencetak ""data tidak ditemukan"", menandakan bahwa angka tersebut tidak ada dalam linked list. bagian kode ini menangani penghapusan angka dari linked list. setelah meminta pengguna untuk memasukkan angka yang ingin dihapus, program mencari node yang sesuai menggunakan pointer `temp` dan melacak node sebelumnya dengan pointer `prev`. jika node ditemukan, program meminta konfirmasi dari pengguna untuk melanjutkan penghapusan. jika pengguna setuju, program menangani beberapa skenario: jika node yang dihapus berada di tengah atau akhir, pointer `prev` diatur untuk melewati node tersebut; jika node yang dihapus adalah satu-satunya node dalam linked list, `head` diatur ke `null`; jika node yang dihapus adalah `head`, pointer `head` diperbarui untuk menunjuk ke node berikutnya; dan jika node tersebut berada di akhir, `tail` juga diperbarui. setelah penghapusan, memori untuk node yang dihapus dibebaskan, dan program memberi tahu pengguna bahwa data telah berhasil dihapus, atau jika node tidak ditemukan, mencetak pesan yang sesuai. bagian kode ini mengakhiri loop program dengan menggunakan `do...while`, yang akan terus menampilkan menu dan memproses pilihan pengguna hingga pengguna memilih opsi untuk keluar (5). setelah pilihan 5 dipilih, program keluar dari loop dan mengembalikan nilai 0, menandakan bahwa eksekusi program selesai dengan sukses. dengan demikian, seluruh fungsi `main` memberikan pengguna kesempatan untuk berinteraksi dengan linked list hingga mereka memutuskan untuk menutup program. output program",4fcbc794fee168d3a4c7a7a3ed3fbedfa5c12e98795d41635bec9a1bca883664,7f0dd43f-2c58-4eee-9c30-4ffec186c637
68669c380889377e0827984d,Dokumen Uji Coba D.pdf,uploaded_reports/cc0690df-ad4d-4f67-9e02-465ab1ab39e6_Dokumen Uji Coba D.pdf,2025-07-03T15:05:28.417Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,7f0dd43f-2c58-4eee-9c30-4ffec186c637
68669c390889377e0827984e,Dokumen Uji Coba A.pdf,uploaded_reports/5199028e-17a2-4c6a-83ce-98c509011d98_Dokumen Uji Coba A.pdf,2025-07-03T15:05:29.025Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,7f0dd43f-2c58-4eee-9c30-4ffec186c637
6866a6e3dfe04ac02e72e70a,Dokumen Uji Coba C.pdf,uploaded_reports/4df2a34f-6a22-406e-851b-b1d7d48424f0_Dokumen Uji Coba C.pdf,2025-07-03T15:50:59.168Z,"logika program kode ini mendefinisikan struktur data untuk sebuah node dalam linked list menggunakan bahasa c. struktur `node` memiliki dua atribut: `info`, yang bertipe `int` untuk menyimpan data, dan `next`, yang merupakan pointer ke node berikutnya dalam linked list. struktur ini akan digunakan untuk membangun daftar terhubung (linked list) yang dapat menyimpan serangkaian elemen. bagian kode ini adalah awal dari fungsi `main` untuk program linked list dalam bahasa c. kode mendefinisikan tipe `simpul` sebagai pointer ke struktur `node`. di dalam `main`, beberapa pointer diinisialisasi: `baru`, `head`, `tail`, `temp`, dan `prev`, serta beberapa variabel untuk pilihan pengguna dan data. program kemudian membersihkan layar menggunakan `system(""cls"")` dan menampilkan menu interaktif yang memungkinkan pengguna untuk memilih opsi untuk menyisipkan, melihat, mencari, atau menghapus elemen dalam linked list, serta untuk keluar dari program. bagian kode ini menangani opsi pertama dari menu, yaitu menyisipkan data ke dalam linked list. setelah pengguna memasukkan data, program mengalokasikan memori untuk node baru menggunakan `malloc` dan menyimpan data tersebut dalam atribut `info` dari node baru. jika linked list kosong (ketika `head` adalah `null`), node baru menjadi `head` dan `tail`. jika linked list sudah memiliki elemen, node baru disambungkan di belakang node terakhir (tail), dan `tail` diperbarui untuk menunjuk ke node baru tersebut. ini memastikan linked list selalu terhubung dengan benar. bagian kode ini menangani opsi kedua dari menu, yaitu menampilkan semua elemen dalam linked list. program mulai dengan mengatur pointer `temp` ke `head`, yang merupakan node pertama dalam linked list. selama `temp` tidak `null`, program mencetak nilai `info` dari node saat ini dan kemudian menggeser `temp` ke node berikutnya menggunakan `temp- >next`. proses ini berlanjut hingga semua elemen di linked list ditampilkan, dan akhirnya mencetak baris baru untuk format yang lebih baik. bagian kode ini menangani opsi ketiga dari menu, yaitu mencari sebuah angka dalam linked list. program meminta pengguna untuk memasukkan angka yang ingin dicari, kemudian memulai pencarian dari `head`. selama `temp` tidak `null` dan nilai `info` dari node saat ini tidak sama dengan angka yang dicari, program akan menggeser `temp` ke node berikutnya. jika setelah pencarian `temp` tidak `null` dan nilai `info` yang ditemukan sama dengan angka yang dicari, program mencetak ""data ditemukan"". jika tidak, program mencetak ""data tidak ditemukan"", menandakan bahwa angka tersebut tidak ada dalam linked list. bagian kode ini menangani penghapusan angka dari linked list. setelah meminta pengguna untuk memasukkan angka yang ingin dihapus, program mencari node yang sesuai menggunakan pointer `temp` dan melacak node sebelumnya dengan pointer `prev`. jika node ditemukan, program meminta konfirmasi dari pengguna untuk melanjutkan penghapusan. jika pengguna setuju, program menangani beberapa skenario: jika node yang dihapus berada di tengah atau akhir, pointer `prev` diatur untuk melewati node tersebut; jika node yang dihapus adalah satu-satunya node dalam linked list, `head` diatur ke `null`; jika node yang dihapus adalah `head`, pointer `head` diperbarui untuk menunjuk ke node berikutnya; dan jika node tersebut berada di akhir, `tail` juga diperbarui. setelah penghapusan, memori untuk node yang dihapus dibebaskan, dan program memberi tahu pengguna bahwa data telah berhasil dihapus, atau jika node tidak ditemukan, mencetak pesan yang sesuai. bagian kode ini mengakhiri loop program dengan menggunakan `do...while`, yang akan terus menampilkan menu dan memproses pilihan pengguna hingga pengguna memilih opsi untuk keluar (5). setelah pilihan 5 dipilih, program keluar dari loop dan mengembalikan nilai 0, menandakan bahwa eksekusi program selesai dengan sukses. dengan demikian, seluruh fungsi `main` memberikan pengguna kesempatan untuk berinteraksi dengan linked list hingga mereka memutuskan untuk menutup program. output program",4fcbc794fee168d3a4c7a7a3ed3fbedfa5c12e98795d41635bec9a1bca883664,494641f9-0383-4efa-92f1-8c3dc3012880
6866a6e3dfe04ac02e72e70b,Dokumen Uji Coba D.pdf,uploaded_reports/80ac4afc-f4b5-4879-8c3e-5b04b9039806_Dokumen Uji Coba D.pdf,2025-07-03T15:50:59.619Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,494641f9-0383-4efa-92f1-8c3dc3012880
6866a6e4dfe04ac02e72e70c,Dokumen Uji Coba A.pdf,uploaded_reports/7c60ce03-55d2-400b-96c9-a56f954dedec_Dokumen Uji Coba A.pdf,2025-07-03T15:51:00.142Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,494641f9-0383-4efa-92f1-8c3dc3012880
6866a6e4dfe04ac02e72e70d,Dokumen Uji Coba B.pdf,uploaded_reports/f96ae9cd-fc4e-4300-a21c-605715747b7d_Dokumen Uji Coba B.pdf,2025-07-03T15:51:00.342Z,"logika  program ini adalah implementasi linked list sederhana dalam bahasa c, yang menyediakan fungsi untuk menambah, menampilkan, mencari, dan menghapus data dari dalam linked list. program ini dimulai dengan mendefinisikan struktur node, yang memiliki dua anggota: info, yang menyimpan data integer, dan next, yang merupakan pointer ke node berikutnya dalam linked list. program juga menggunakan typedef struct node *simpul untuk mendefinisikan tipe data simpul sebagai pointer ke node. di dalam fungsi main, beberapa pointer dideklarasikan, termasuk head sebagai pointer awal linked list, tail untuk mengakses node terakhir, serta temp dan prev untuk membantu operasi lainnya. program berisi loop utama yang menampilkan menu dengan lima opsi: insert, view, search, delete, dan keluar. pada opsi insert, program meminta pengguna untuk memasukkan data baru yang akan disimpan dalam linked list. node baru akan dibuat dengan malloc, diisi dengan data, lalu ditambahkan ke akhir linked list. jika linked list kosong, node ini akan menjadi head dan tail; jika tidak, tail diperbarui ke node baru. opsi view menampilkan semua elemen di dalam linked list dari head hingga tail. program melintasi linked list dan mencetak nilai info dari setiap node hingga akhir. opsi search memungkinkan pengguna mencari data tertentu dalam linked list. program mencari node dengan nilai info yang sesuai, lalu menampilkan pesan apakah data ditemukan atau tidak. opsi delete memungkinkan pengguna menghapus node dengan nilai tertentu dari linked list. jika node ditemukan, program meminta konfirmasi pengguna untuk menghapusnya. jika pengguna memilih ""y"", node tersebut akan dihapus dan linked list diperbarui. pointer head atau tail juga diperbarui jika node yang dihapus adalah node pertama atau terakhir. jika node tidak ditemukan, program menampilkan pesan ""data tidak ditemukan"". loop utama terus berjalan sampai pengguna memilih opsi ""keluar"" (pilih 5). program kemudian mengakhiri eksekusi dengan menampilkan pesan untuk menekan tombol apa saja agar keluar. output",e1768802ed40487085c43e6413c155240117f667eb4a03bd3cb61b4b4200330c,494641f9-0383-4efa-92f1-8c3dc3012880
686730bf4ea033ea2c8152d6,RK_Ahmad Nur Fauzi Sahputra_50422129_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:11.530Z,"logika program 1 program dimulai dengan mencetak pesan “tahun ?” untuk meminta pengguna memasukkan tahun. nilai input tahun yang dimasukkan oleh pengguna kemudian disimpan dalam variabel itahun. selanjutnya, program melakukan dua jenis pembagian terhadap tahun tersebut, yaitu pembagian real (xtahun = itahun / 4.0) dan pembagian integer (jtahun = itahun / 4). tujuannya adalah untuk mengecek apakah tahun tersebut habis dibagi 4. jika hasil dari pembagian real sama dengan pembagian integer, makatahun tersebut dianggap habis dibagi 4, sehingga program melompat ke label 100 dan mencetak bahwa tahun tersebut adalah tahun kabisat. sebaliknya, jika hasil pembagiannya berbeda, maka program mencetak bahwa tahun tersebut bukan tahunkabisat dan melompat ke label 200untuk mengakhiri program. program 2 program ini diawali dengan mendeklarasikan variabel angka sebagai bilangan bulat bertipe integer*2, yaitu bilangan bulat dengan ukuran 2byte (16-bit). selanjutnya, program mencetak pesan ke layar ""masukkan angka :"" untuk meminta input dari pengguna, kemudian membaca nilai yang dimasukkan dan menyimpannya ke dalam variabel angka. program menggunakan bentuk if berlabel (arithmetic if) yang khas pada fortran lama: if(angka) 10,20,30. pernyataan ini memeriksa nilai dari variabel angka. jika nilainya negatif, program akan melompat kelabel 10; jikanol, kelabel 20; dan jikapositif, ke label 30. pada label 10, program mencetak bahwa angka tersebut adalah bilangan negatif. label 20 digunakan untuk mencetak bahwa angka yang dimasukkan adalah nol, dan label 30 untuk mencetak bahwa angka adalah bilangan positif. setelah mencetak hasil klasifikasi, masing- masing label akan melompat ke label 100 yang berisi perintah continue sebagai penanda akhir dari program, diikuti oleh end untuk menghentikan eksekusi. dengan demikian, program ini dapat mengklasifikasikan jenis bilangan (negatif, nol, atau positif) dengan menggunakan strukturkontrol klasik khas fortran. program 3 program fortran ini menggunakan subrutin bernama cetak untukmencetak garis berupa tanda strip ('------'). di dalam program utama, subrutin cetak pertama kali dipanggil menggunakan call cetak, yang akan mengeksekusi baris write(*,*) '------' dari subrutin tersebut. setelah itu, program mencetak kata 'fortran' ke layar dengan perintah write(*,*) 'fortran'. kemudian subrutin cetak dipanggil lagi, sehingga garis '------' dicetak sekali lagi. dengan demikian, output program akan terdiri dari garis pertama, tulisan “fortran”, dan diakhiri dengan garis kedua. tujuan penggunaan subrutin di sini adalah untuk menghindari pengulangan kode yang sama, meningkatkan modularitas, dan membuat program lebih terstruktur. program 4 program ini diawali dengan mencetak pesan kelayar “nilai dari x:” untukmemintainput dari pengguna. nilaiyang dimasukkan dibaca ke dalam variabel xdengan format numerik f5.2, artinya input berupa angka total 5digit dengan 2angkadi belakang komadesimal (misalnya: 12.34).setelah itu, program memanggil subrutin hitungdengan membawa nilaix.di dalam subrutinhitung, dilakukan perhitungan menggunakan rumus fungsi kuadrat y=x**2-2*x, yaitu kuadrat dari xdikurangi duakali nilai x.hasil ykemudian dicetak kelayar menggunakan format f8.2, yang akan menampilkan angka hasil perhitungan dengan total lebar 8karakter dan 2angkadi belakang koma. program ini memperlihatkan penggunaan subrutinsebagai cara modularuntuk memisahkan proses perhitungan dari bagian utama program, sertamenampilkan hasilperhitungan secara rapi. program 5 program ini bertujuan untuk menghitung dan menampilkan konversi suhu dari celcius ke fahrenheit menggunakan fungsi fah(c) = 1.8 * c + 32.0. pertama, program mencetak beberapa garis sebagai pemisah visual dan menampilkan judul kolom ""celcius fahrenheit"" untuk memperjelas isi tabel. variabel celcius diinisialisasi dengan nilai awal 0.0. kemudian, nilai celcius dan hasil konversi ke fahrenheit ditampilkan dalam format f7.2 dan f10.2, yang menunjukkan bahwa nilai dicetak dengan 2 angka di belakang koma dan lebar bidang yang rapi. program kemudian memeriksa apakah nilai celcius masih kurang dari 10.0 menggunakan kondisi if (celcius .lt. 10.0). jika ya, maka celcius ditambah 0.5 dan program kembali ke label 5 untuk mencetak baris berikutnya. proses ini diulang hingga celcius mencapai atau melebihi 10.0. setelah selesai, program mencetak garis penutup. dengan demikian, program ini mencetak tabel suhu dari 0.0°c hingga 10.0°c dengan interval 0.5°c beserta konversi kefahrenheit. program 6 program ini melakukan konversi suhu dari celcius ke fahrenheit menggunakan rumus fah(c) = 1.8 * c + 32.0, yang didefinisikan sebagai fungsi di awal program. untuk menampilkan hasil konversi, program mencetak header berupa garis pemisah dan label kolom ""celcius fahrenheit"" agar hasil tabel terlihat rapi. nilai awal c (celcius) diatur ke 0.0, kemudian dicetak bersama hasil konversinya ke fahrenheit menggunakan format f7.2 untuk celcius dan f10.2 untuk fahrenheit, dengan spasi antar kolom sebesar 4 karakter (4x). setelah mencetak baris pertama, program memeriksa apakah c masih kurang dari 10.0. jika ya, maka c akan ditambah 0.5, dan program menggunakan perintah goto 5 untuk kembali ke baris label 5 dan mencetak baris berikutnya. proses ini terus berulang hingga c mencapai 10.0 atau lebih. setelah loop selesai, program mencetak garis pemisah penutup sebagai akhir tabel. pendekatan ini mencerminkan penggunaan gaya pemrograman fortran lama dengan goto, yang kini umumnya diganti dengan struktur do modern dalam praktik fortran yang lebih kontemporer. output",29eb6a88ba852f5e58140862434b98cbbad97e57139dfb23f0cb13dfc58a54fa,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c04ea033ea2c8152d7,RK_AndhikaGaluhPamungkas_50422208_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:12.348Z,"logika pertama-tama, program menampilkan prompt “tahun ?” dengan perintah write(*,'(1x,a)') 'tahun ?', lalu baris read(*,'(bn,i4)') itahun menerima masukan tahun dari pengguna dan menyimpannya ke variabel bilangan bulat itahun. setelah itu, perintah xtahun = itahun/4.0 membagi nilai tahun dengan 4 dalam tipe real sehingga menyimpan hasil desimal di xtahun, sedangkan jtahun = itahun/4 melakukan pembagian yang sama tetapi dalam tipe integer sehingga sisa pembagian dibuang dan hasilnya disimpan di jtahun. perintah percabangan if (xtahun .eq. jtahun) goto 100 kemudian membandingkan kedua hasil. jika sama, artinya itahun habis dibagi 4 lalu aliran eksekusi dialihkan ke label 100, tempat perintah write(*,'(1x,a,i4,a)') 'tahun ', itahun, ' adalah tahun kabisat' menampilkan pesan bahwa tahun tersebut kabisat. jika hasil pembagian berbeda, program melewati cabang kabisat, mengeksekusi write(*,'(1x,a,i4,a)') 'tahun ', itahun, ' bukan tahun kabisat' untuk memberi tahu pengguna bahwa tahun itu bukan kabisat, kemudian goto 200 melompat ke label penutup 200. akhirnya, label 200 berisi continue sebagai pernyataan kosong penanda akhir blok, dan end mengakhiri program sepenuhnya. selanjutnya, program 2 mendeklarasikan variabel angka sebagai bilangan bulat 2-byte menggunakan perintah integer*2 angka. lalu, perintah write(*,'(1x,a)') 'masukkan angka :' digunakan untuk menampilkan pesan permintaan input ke layar, dan perintah read(*,'(i4)') angka digunakan untuk membaca nilai yang dimasukkan pengguna dan menyimpannya ke variabel angka. program kemudian menggunakan bentuk computed goto dengan perintah if (angka) 10,20,30, yang akan mengevaluasi nilai angka dan mengalihkan alur ke label tertentu: jika angka bernilai negatif maka lompat ke label 10, jika nol ke label 20, dan jika positif ke label 30. masing-masing label tersebut berisi perintah write untuk mencetak pesan yang sesuai, yaitu menyatakan apakah angka yang dimasukkan adalah bilangan negatif, nol, atau positif. setelah menampilkan pesan, masing-masing blok melompat ke label 100 yang berisi continue sebagai penanda akhir blok, dan kemudian program ditutup dengan perintah end. program 3 menggunakan subrutin untuk mencetak garis pemisah. pertama, program memanggil subrutin cetak menggunakan perintah call cetak, yang akan mengeksekusi isi dari subrutin tersebut, yaitu mencetak teks '-------' ke layar. setelah itu, program mencetak kata 'fortran' dengan perintah write(*,*) 'fortran'. kemudian subrutin cetak dipanggil lagi untuk mencetak garis pemisah sekali lagi. subrutin cetak sendiri didefinisikan di bagian bawah program dengan kata kunci subroutine, dan di dalamnya terdapat perintah write(*,*) '-------' untuk mencetak garis. program diakhiri dengan perintah end. dengan demikian, output dari program ini akan berupa garis, diikuti tulisan ""fortran"", lalu garis lagi, dengan menggunakan subrutin untuk menghindari penulangan kode. program 4 dimulai dengan mendeklarasikan program utama bernama p4, kemudian menampilkan pesan ""nilai dari x :"" ke layar menggunakan perintah write(*,'(1x,a)'). setelah itu, program membaca input nilai x dari pengguna dengan format real 5 digit total dan 2 digit di belakang koma menggunakan read(*,'(f5.2)') x. nilai x tersebut kemudian dikirim ke subrutin hitung(x) melalui pemanggilan call hitung(x). di dalam subrutin hitung, dilakukan perhitungan menggunakan rumus y = x**2 - 2*x, yaitu kuadrat dari x dikurangi dua kali x. hasil perhitungan kemudian ditampilkan ke layar dengan format teks 'y = ' diikuti oleh nilai y yang ditulis dengan lebar 8 digit dan 2 angka di belakang koma menggunakan write(*,'(1x,a,f8.2)'). program dan subrutin masing-masing diakhiri dengan perintah end. program ini menunjukkan bagaimana menggunakan subrutin untuk memproses dan menampilkan hasil perhitungan dari input pengguna. kemudian, program 5 digunakan untuk menampilkan tabel konversi suhu dari celsius ke fahrenheit dalam rentang tertentu. pertama, program mencetak garis pembuka dan judul kolom ""celcius"" dan ""fahrenheit"" menggunakan beberapa perintah write(*,*). setelah itu, nilai awal variabel celcius diinisialisasi dengan 0.0. program kemudian mencetak nilai celsius dan hasil konversinya ke fahrenheit menggunakan perintah write(*,'(1x,f7.2,4x,f10.2)') celcius, fah(celcius), di mana nilai celcius dikonversi dengan memanggil fungsi fah(celcius). fungsi fah didefinisikan di bagian bawah program sebagai fungsi bertipe real yang menerima parameter c dan menghitung nilainya dengan rumus (9.0 / 5.0) * c + 32.0, yaitu rumus standar konversi suhu dari celsius ke fahrenheit. jika nilai celcius masih kurang dari 10.0, maka program akan menambahkan 0.5 ke nilai celcius, lalu kembali ke baris bernomor label 5 menggunakan goto 5, sehingga mencetak baris baru konversi dengan nilai yang telah diperbarui. proses ini diulang hingga celcius mencapai atau melebihi 10.0. setelah perulangan selesai, program mencetak garis penutup dan mengakhiri eksekusi. terakhir, program 6 digunakan untuk mencetak tabel konversi suhu dari celsius ke fahrenheit dengan menggunakan fungsi langsung dalam ekspresi. pada baris pertama, fungsi fah(c) didefinisikan secara langsung di luar struktur subrutin atau fungsi eksplisit, dengan rumus 1.8 * c + 32.0, yang merupakan rumus standar untuk mengubah suhu dari celsius ke fahrenheit. setelah itu, program mencetak garis pemisah dan judul kolom ""celcius fahrenheit"" menggunakan perintah write(*,*). nilai suhu c diinisialisasi ke 0.0, lalu program mencetak nilai celsius (c) dan hasil konversinya fah(c) menggunakan perintah write(*,'(1x,f7.2,4x,f10.2)'). jika nilai c masih kurang dari 10.0, maka program akan menambahkan 0.5 ke c, lalu menggunakan goto 5 untuk mengulangi proses pencetakan baris konversi berikutnya. perulangan ini terus berjalan sampai nilai c mencapai atau melebihi 10.0. setelah perulangan selesai, program mencetak garis penutup dan diakhiri dengan perintah end. program ini menghasilkan tabel konversi suhu dari 0 hingga kurang dari 10 derajat celsius, dengan kenaikan 0.5 derajat setiap barisnya. output program 1 program 2 program 3 program 4 program 5 program 6",14a04d85aecaa754d0cc8a1552ac5e22482ca69daa2cefb7cd84ae71e580fb56,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c04ea033ea2c8152d8,RK_Ari Nugraha Pratama_50422249_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:12.974Z,"logika program 1 untuk membuat program menentukan apakah suatu tahun merupakan tahun kabisat atau bukan. pertama-tama, program akan menampilkan pesan ""tahun ?"" menggunakan perintah “write”, kemudian membaca input yang dimasukkan pengguna dan menyimpannya dalam variabel “itahun”. berikutnya, melakukan operasi pembagian pada nilai “itahun”: pembagian pertama menghasilkan nilai desimal (“itahun / 4.0”) yang disimpan dalam variabel “xtahun”, sedangkan pembagian kedua menghasilkan nilai bulat (“itahun / 4”) yang disimpan dalam variabel “jtahun”. jika hasil pembagian sama, artinya tahun tersebut habis dibagi 4 tanpa sisa, sehingga program akan pergi ke label 100 untuk mencetak pesan tahun tersebut adalah tahun kabisat. sebaliknya, jika hasil pembagian beda, maka menampilkan pesan tahun tersebut bukan tahun kabisat dan melanjutkan eksekusi ke bagian akhir program. program lalu berakhir dengan menjalankan perintah “continue” pada label “200” dan diakhiri dengan perintah “end”. program 2 untuk membuat program menentukan apakah suatu bilangan yang dimasukkan pengguna merupakan bilangan negatif, nol, atau positif. pertama-tama, program akan menampilkan pesan ""masukkan angka :"" menggunakan perintah write, kemudian membaca input yang dimasukkan dan menyimpannya dalam variabel “angka” bertipe integer*2. setelah menerima input, melakukan pengecekan kondisi menggunakan percabangan if(angka) 10,20,30. jika nilai angka negatif, maka melompat ke label 10 dan menampilkan pesan bilangan adalah negatif. jika nilai angka sama dengan nol, maka melompat ke label 20 dan menampilkan pesan bilangan adalah nol. jika nilai angka positif, maka melompat ke label 30 dan menampilkan pesan bahwa bilangan adalah positif. setelah itu eksekusi ke label 100 dan diakhiri dengan perintah end. program 3 program memanggil cetak, yang nanti menampilkan output berupa tanda garis (-------). setelah itu, mencetak teks fortran menggunakan perintah write (*,*). kemudian, memanggil cetak sekali lagi untuk menghasilkan garis pemisah yang sama, sehingga output akhir akan menampilkan -------, fortran, dan ------- secara berurutan. program kemudian diakhiri dengan perintah end. subrutin cetak sendiri hanya berisi satu perintah write untuk mencetak garis dan diakhiri dengan end, yang mengembalikan kontrol ke program setelah selesai dieksekusi. program 4 untuk membuat program yang digunakan untuk melakukan perhitungan matematis. pertama- tama, program akan menampilkan pesan ""nilai dari x :"" untuk meminta pengguna memasukkan sebuah nilai numerik. lalu, menyimpannya dalam variabel x dengat format float lebar 5 digit dan 2 desimal. setelah itu, program memanggil hitung dengan meneruskan nilai x sebagai argumen. subrutin hitung diakhiri dengan end. di dalam subrutin hitung, membuat operasi matematika untuk menghitung nilai y berdasarkan persamaan y = x² - 2x. hasil perhitungan ini kemudian ditampilkan dalam format floating-point dengan lebar 8 digit dan 2 desimal. setelah selesai menjalankan subrutin, program diakhiri dengan perintah end. program 5 untuk membuat program mengkonversi suhu dari celcius ke fahrenheit dan menampilkan hasilnya dalam bentuk tabel. pertama-tama, program mendefinisikan fungsi fah(c) yang menerima input suhu dalam celcius (c) dan mengembalikan hasilnya ke fahrenheit menggunakan rumus 1.8 * c + 32.0. berikutnya, menampilkan header dan judul kolom ""celcius"" dan ""fahrenheit"". perhitungan dilakukan dengan nilai awal c = 0.0 dan memasuki sebuah loop yang dimulai pada label 5. di dalam loop, nilai celcius dan hasil fahrenheit (fah(c)) ditampilkan dengan float celcius dalam 7 digit (2 desimal) dan fahrenheit dalam 10 digit (2 desimal). setiap iterasi, memeriksa apakah nilai c masih kurang dari 10.0. jika benar, nilai c ditambah 0.5 dan program kembali ke label 5 untuk menampilkan hasil konversi berikutnya. loop berhenti ketika nilai c mencapai atau melebihi 10.0, dan program menutup tabel sebelum diakhiri dengan perintah end. output program 1 program 2 program 3 program 4 program 5",2ecb75248f322611232bededa988afa668eb3688f7c544fd98974924e1f659ff,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c14ea033ea2c8152d9,RK_Arya Rafi Wijaya_50422277_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:13.206Z,"logika pada program ini, saya membuat logika untuk menentukan apakah suatu tahun merupakan tahun kabisat. saya meminta input tahun dari pengguna dan menyimpannya ke dalam variabel itahun. kemudian, saya membagi tahun tersebut dengan 4 secara real (xtahun) dan secara integer (jtahun). jika hasil keduanya sama, maka saya simpulkan tahun tersebut habis dibagi 4 dan merupakan tahun kabisat. jika tidak sama, maka tahun tersebut bukan tahun kabisat. hasilnya ditampilkan ke layar sesuai dengan kondisi yang terpenuhi. pertama, saya meminta pengguna untuk memasukkan sebuah bilangan bulat bertipe integer*2, lalu saya menyimpannya dalam variabel yang bernama angka. setelah itu, saya melakukan pengecekan terhadap nilai dari variabel angka menggunakan struktur percabangan if. jika angka bernilai kurang dari nol, maka saya akan menampilkan pesan bahwa bilangan tersebut adalah bilangan negatif. jika angka bernilai sama dengan nol, maka saya akan menampilkan bahwa bilangan tersebut adalah nol. namun, jika tidak memenuhi kedua kondisi sebelumnya, maka saya menyimpulkan bahwa bilangan tersebut adalah bilangan positif dan menampilkannya. pertama, saya memanggil subrutin bernama cetak, yang bertugas mencetak garis berupa karakter '-------'. setelah itu, saya mencetak kata 'fortran' di baris berikutnya. kemudian, saya memanggil lagi subrutin cetak untuk mencetak garis yang sama sekali lagi. dengan cara ini, tampilan akhir dari program saya adalah garis, tulisan ""fortran"", lalu garis lagi. tujuan dari penggunaan subrutin ini adalah agar saya bisa menghindari penulisan kode berulang dan membuat program lebih terstruktur dan rapi. pertama, saya meminta pengguna untuk memasukkan nilai x bertipe real, kemudian saya memanggil subrutin hitung sambil membawa nilai x tersebut. di dalam subrutin, saya mendeklarasikan variabel y dan menghitung nilainya berdasarkan rumus yang telah ditentukan, lalu mencetak hasil perhitungan y dengan format dua angka di belakang koma. pada program ini, saya membuat tabel konversi suhu dari celcius ke fahrenheit. nilai awal c saya isi 0, lalu dihitung fahrenheit dengan rumus 1.8 * c + 32.0. hasil celcius dan fahrenheit ditampilkan, kemudian c ditambah 0.5. proses ini terus berulang sampai c mencapai 10. setelah itu, program menampilkan garis penutup. output",fb448d9b7689d0c011b9555675dc726beb3927209361914ce38ab71b13acff80,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c14ea033ea2c8152da,RK_Astri Salwa Putri Madani_50422284_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:13.835Z,"logika pada program 1 merupakan program untuk menentukan apakah suatu tahun merupakan tahun kabisat atau bukan. program akan menampilkan pertanynya “tahun?” kepada pengguna saat program di jalankan. program ini membaca tahun dengan bentuk bilangan 4 dan menyimpan dalam variabel itahun. program akan membagi nilai tahun secara real dengan pembagian 4.0 dan integer 4. jika hasil perbandingan xtahun dengan hasil pembagian jtahun maka artinya tahun tersebut habis dibagi 4 dan dianggap sebagai tahun kabisat, sehingga program menampilkan pesan bahwa tahun tersebut adalah tahun kabisat. jika tidak sama, maka tahun tersebut tidak habis dibagi 4 dan program menampilkan bahwa tahun tersebut bukan tahun kabisat. pada program 2 merupakan program untuk mengevaluasi apakah suatu bi.angan yang di input merupakan bilangan positif, nol atau negatif. dengan tipe data integer*2 untuk menyimpan bilangan bulat yang dimasukan dalam variabel angka. lalu program akan menampilkan pesan “masukkan angka:” program membaca input bilangan bulat maksimal 4 digit dari pengguna. baris if(angka) 10,20,30 adalah bentuk dari arithmetic if statement yang khas di fortran lama. program mengarahkan alur program ke label 10 jika nilainya negatif, ke label 20 jika nol, dan ke label 30 jika positif. setiap label menampilkan pesan yang sesuai: apakah bilangan tersebut negatif, nol, atau positif, lalu program diarahkan ke label 100 sebagai akhir eksekusi. pada program 3 merupakan program utama sebuah subrutin bernama cetak, yang secara sederhana digunakan untuk mencetak baris pemisah. padal ine 15 program akan menampilkan ‘fotran’ dan setelah itu memanggil subrutin cetak untuk menampilkan garis pemisah yang sama. subrutin ini perlu ditulis dengan sintaks yang benar agar dapat dijalankan tanpa menimbulkan kesalahan. program ini memperlihatkan cara penggunaan subrutin dalam bahasa fortran untuk menghindari penulangan penulisan kode saat melakukan tugas berulang, seperti mencetak garis sebelum dan sesudah teks 'fortran'. pada program 4 program untuk menghitung dan menampilkan dari persamaan kuadrat y = x² - 2x. rogram ini dimulai dengan mencetak perintah “nilai dari x :” kepada pengguna, kemudian membaca input berupa bilangan real dengan format f5.2. nilai x yang dimasukkan oleh pengguna kemudian dikirim ke subrutin hitung melalui pemanggilan call hitung, nilai y dihitung berdasarkan rumus x² - 2x, lalu hasilnya ditampilkan ke layar dengan format f8.2, yaitu delapan karakter lebar dengan dua angka desimal. program ini mengunakan subrutin untuk memisahkan proses perhitungan dari program utama, yang bertujuan untuk membuat kode lebih modular dan mudah dipelihara. pada program 5 program fortran yang digunakan untuk menampilkan tabel konversi suhu dari celcius ke fahrenheit menggunakan rumus f = 1.8 * c + 32.0, yang didefinisikan langsung sebagai fungsi fah(c) menginisialisasi nilai c dengan 0.0. dilakukan perulangan untuk mencetak nilai suhu dalam satuan celcius dan hasil konversinya ke fahrenheit setiap kenaikan 0.5 derajat hingga mencapai 10.0 derajat celcius. untuk celcius dan f10.2 untuk fahrenheit. struktur perulangan dikendalikan oleh pernyataan if dan goto. pada program 5 program fortran yang digunakan untuk menampilkan tabel konversi suhu dari celcius ke fahrenheit menggunakan rumus f = 1.8 * c + 32.0, yang didefinisikan langsung sebagai fungsi fah(c) menginisialisasi nilai c dengan 0.0. dilakukan perulangan untuk mencetak nilai suhu dalam satuan celcius dan hasil konversinya ke fahrenheit setiap kenaikan 0.5 derajat hingga mencapai 10.0 derajat celcius. untuk celcius dan f10.2 untuk fahrenheit. struktur perulangan dikendalikan oleh pernyataan if dan goto. mohon maaf untuk program 5 dan 6 disamakan karena pada activity program 6 tidak bisa di run sepertinya ada kesalahan ss atau bagaimana, tidak di jelaskan. ingin menanya secara langsung lewat google meet, namun selama waktu praktikum berlangsung tidak ada instruksi atau arahan mengenai penggunaan google meet. mohon maaf apabila ada kata yang kurang mengenakan. output",68f9f32ee5878222086bc7c1bc4f3eb897fe12658bb90237fce00cabbc7a8397,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c24ea033ea2c8152db,RK_Bagus Fathoni_50422316_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:14.319Z,"logika pertama, program meminta input dari pengguna berupa tahun, yang kemudian disimpan dalam variabel itahun. setelah itu, program menghitung hasil pembagian itahun dengan 4 dalam dua bentuk: bilangan riil (xtahun) dan bilangan bulat (jtahun). langkah ini bertujuan untuk memeriksa apakah tahun tersebut habis dibagi 4. jika hasil pembagian dalam bentuk riil sama persis dengan hasil pembagian dalam bentuk bilangan bulat, maka tahun tersebut dianggap habis dibagi 4 dan program menyatakan bahwa tahun tersebut adalah tahun kabisat. jika tidak sama, maka program menyatakan bahwa tahun tersebut bukan tahun kabisat. pertama, program mendeklarasikan variabel angka sebagai bilangan bulat (integer*2) dan menampilkan pesan untuk meminta input angka dari pengguna. nilai yang dimasukkan kemudian disimpan dalam variabel angka. setelah itu, digunakan pernyataan if(arithmetic) bergaya lama untuk melakukan percabangan berdasarkan nilai angka. jika angka kurang dari nol, program melompat ke label 10 dan mencetak bahwa angka adalah bilangan negatif. jika angka sama dengan nol, maka program menuju label 20 dan mencetak bahwa angka adalah bilangan nol. jika angka lebih dari nol, program akan menuju label 30 dan mencetak bahwa angka adalah bilangan positif. setelah mencetak hasilnya, setiap blok percabangan akan menuju ke label 100 yang hanya berisi perintah continue, sebagai penanda akhir dari logika program sebelum ditutup dengan perintah end. program utama memanggil subrutin bernama cetak menggunakan perintah call cetak, yang mencetak deretan karakter strip ('-------'). setelah itu, program mencetak kata 'fortran', lalu memanggil kembali subrutin cetak untuk mencetak baris strip kedua. subrutin cetak sendiri didefinisikan terpisah dengan kata kunci subroutine, dan hanya berisi satu perintah write yang mencetak '-------'. pertama, program meminta pengguna untuk memasukkan nilai x dalam format bilangan pecahan (floating point) dengan dua angka di belakang koma, lalu nilai tersebut dibaca dan disimpan ke dalam variabel x. setelah itu, program memanggil subrutin hitung. di dalam subrutin hitung, dilakukan perhitungan dan hasilnya disimpan dalam variabel y. nilai y kemudian ditampilkan ke layar dengan dua angka desimal. pertama tama program akan mendeklarasi fungsi fah(c) dengan rumus f=1.8×c+32.0. selanjutnya, program mencetak garis pembatas dan judul kolom ""celcius"" dan ""fahrenheit"", diikuti oleh garis pembatas lainnya. variabel celcius diinisialisasi dengan nilai 0.0, dan kemudian ditampilkan bersama nilai fahrenheit hasil konversi dengan format rapi. setelah pencetakan, program memeriksa apakah nilai celcius masih kurang dari 10.0. jika ya, maka celcius akan ditambah 0.5, dan program kembali ke label 5, yang artinya mencetak kembali baris berikutnya. proses ini berulang hingga celcius mencapai 10.0 atau lebih. setelah selesai, program mencetak garis pembatas sebagai penutup tabel. output",154f18fab704d716ecef2d804de8a8a58b3a83451a6f656c16c07c6dd964c7de,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c34ea033ea2c8152dc,RK_Evandri Ridho Hasmono_50422473_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:15.071Z,"logika program. program fortran ini dirancang untuk menentukan apakah suatu tahun merupakan tahun kabisat atau bukan. pertama, program akan menampilkan pertanyaan ""tahun?"" di layar dan menunggu pengguna memasukkan sebuah angka tahun. tahun yang dimasukkan disimpan dalam variabel itahun. selanjutnya, program membagi nilai itahun dengan 4.0 dan menyimpannya dalam variabel xtahun sebagai bilangan pecahan (floating point). kemudian, nilai itahun juga dibagi 4 secara bulat dan hasilnya disimpan dalam jtahun. program lalu membandingkan xtahun dan jtahun. jika keduanya sama, artinya tahun tersebut habis dibagi 4, maka dianggap sebagai tahun kabisat. jika berbeda, berarti tahun tersebut tidak habis dibagi 4, sehingga bukan tahun kabisat. berdasarkan hasil perbandingan ini, program akan mencetak apakah tahun tersebut adalah tahun kabisat atau bukan. perlu dicatat bahwa logika ini hanya mempertimbangkan kelipatan 4 dan tidak memperhitungkan aturan lengkap penentuan tahun kabisat menurut kalender gregorian, yang melibatkan pengecualian untuk tahun-tahun abad. program fortran ini berfungsi untuk menentukan apakah sebuah angka yang dimasukkan oleh pengguna merupakan bilangan negatif, nol, atau positif. setelah pengguna memasukkan angka, program menggunakan struktur pemilihan if (angka) 10, 20, 30, yang secara langsung memeriksa apakah nilai tersebut kurang dari nol, sama dengan nol, atau lebih dari nol. jika angka negatif, program melompat ke label 10 dan mencetak bahwa angka tersebut adalah bilangan negatif; jika nol, ke label 20 dan mencetak bahwa itu adalah bilangan nol; dan jika positif, ke label 30 dan mencetak bahwa itu bilangan positif. setelah mencetak hasil, program akan melompat ke label 100 dan menyelesaikan proses. ask chatgpt program ini mendemonstrasikan penggunaan subrutin (subroutine) dalam bahasa fortran. program utama memanggil subrutin bernama cetak, kemudian mencetak kata 'fortran', dan setelah itu memanggil kembali subrutin cetak. subrutin cetak berfungsi hanya untuk mencetak garis '-------'. jadi, hasil output dari program ini akan tampak seperti garis, tulisan fortran, dan diakhiri garis lagi. ini merupakan cara yang sederhana namun jelas untuk menunjukkan bagaimana modularitas dapat dilakukan dengan subrutin dalam fortran. program ini meminta pengguna untuk memasukkan sebuah nilai x, lalu menghitung hasil dari fungsi matematika y = x^2 - 2x menggunakan subrutin hitung(x). subrutin ini akan melakukan perhitungan berdasarkan nilai x yang dimasukkan pengguna, lalu mencetak hasilnya. dengan demikian, program ini menunjukkan bagaimana parameter bisa dikirim ke subrutin untuk melakukan perhitungan terpisah dari program utama. ini berguna dalam pemrograman terstruktur untuk memisahkan logika perhitungan dari logika input/output. program ini berfungsi untuk mencetak daftar nilai suhu dalam celcius dan konversinya ke fahrenheit dalam rentang 0 hingga kurang dari 10 derajat celcius, dengan kenaikan sebesar 0.5 derajat. fungsi konversi fah(c) didefinisikan di awal sebagai 1.8 * c + 32.0. program mencetak header tabel, kemudian menggunakan label 5 untuk menandai perulangan pencetakan nilai celcius dan fahrenheit. selama nilai c masih kurang dari 10.0 (c .lt. 10.0), nilai c akan terus ditambahkan 0.5 dan proses pencetakan akan diulang. setelah mencapai batas, program mencetak garis penutup dan berakhir. program ini sangat tepat untuk memperkenalkan looping dan fungsi dalam fortran. program ini hampir identik dengan program 5, tetapi perbedaannya adalah bahwa fungsi fah(celcius) tidak didefinisikan secara eksplisit seperti pada program 5. dalam program ini, kita mengasumsikan bahwa fungsi fah telah didefinisikan sebelumnya atau secara implisit diasumsikan di fortran. logikanya sama: dimulai dari suhu 0.0 derajat celcius dan dinaikkan bertahap 0.5 derajat hingga kurang dari 10.0, lalu dikonversi ke fahrenheit dan dicetak dalam format yang rapi. output dari program ini juga berbentuk tabel suhu seperti pada program 5, hanya saja struktur fungsi lebih ringkas. output program.",598e00093f52affafaa303e5da739424549393f0bad5d586f0caac8757a14ab1,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c34ea033ea2c8152dd,RK_Farriz Abdillah Mukmin_50422536_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:15.399Z,"logika program pertama digunakan untuk menentukan apakah suatu tahun merupakan tahun kabisat. program ini membaca input dari pengguna, yaitu sebuah tahun yang disimpan dalam variabel itahun. kemudian, tahun tersebut dibagi dengan 4 dan hasilnya dibandingkan untuk memeriksa apakah pembagian tersebut menghasilkan angka bulat (tidak ada sisa). jika hasil pembagian dengan 4 sama antara versi bilangan real (xtahun) dan bilangan integer (jtahun), maka tahun tersebut adalah kabisat dan ditampilkan pesan bahwa itu adalah tahun kabisat. jika tidak, maka ditampilkan pesan bahwa tahun tersebut bukan tahun kabisat. program kedua digunakan untuk mengevaluasi apakah suatu bilangan yang diinputkan oleh pengguna adalah bilangan negatif, nol, atau positif. input disimpan dalam variabel angka, dan program menggunakan struktur kontrol if dengan label untuk membandingkan nilai tersebut. jika angka negatif, program lompat ke label 10 dan menampilkan bahwa bilangan tersebut negatif. jika nol, ke label 20, dan jika positif, ke label 30. setelah menampilkan hasil, program kembali ke awal menggunakan goto 100. program ketiga menunjukkan penggunaan subrutin dalam fortran. subrutin cetak berfungsi untuk menampilkan garis strip ('------'). dalam program utama, subrutin cetak dipanggil dua kali: sekali sebelum mencetak teks 'fortran' dan sekali setelahnya. hasilnya, program menampilkan garis strip, tulisan 'fortran', lalu garis strip lagi. program keempat menggunakan subrutin untuk menghitung nilai fungsi kuadrat. program dimulai dengan meminta input dari pengguna berupa nilai x, yang dibaca dalam format desimal dua angka di belakang koma menggunakan read(*,'(f5.2)'). selanjutnya, subrutin hitung(x) dipanggil untuk menghitung nilai y = x^2 - 2x. di dalam subrutin, hasil perhitungan disimpan dalam variabel y dan ditampilkan menggunakan format f8.2, sehingga hasil output memiliki dua digit di belakang koma. program ini menunjukkan pemisahan proses input dan perhitungan menggunakan subrutin untuk menjaga keteraturan kode. program kelima digunakan untuk mencetak tabel konversi suhu dari celsius ke fahrenheit. fungsi fah(c) didefinisikan di awal sebagai 1.8 * c + 32.0, yang merupakan rumus standar konversi dari celsius ke fahrenheit. program mencetak header tabel terlebih dahulu, lalu menginisialisasi variabel celcius dengan nilai awal 0.0. dalam blok if, program melakukan perulangan menggunakan goto untuk menampilkan nilai celcius dan hasil konversinya. nilai celcius ditingkatkan sebesar 0.5 setiap iterasi sampai mencapai kurang dari 10.0. output ditampilkan dalam format rapi dengan dua kolom: suhu dalam celsius dan fahrenheit. program ini dimulai dengan mendefinisikan fungsi fah(c) yang berisi rumus konversi suhu, yaitu 1.8 * c + 32.0. selanjutnya, program mencetak judul tabel dan memulai perulangan dari nilai c = 0.0. selama nilai c masih kurang dari 10.0, program akan mencetak suhu dalam celsius dan fahrenheit secara berdampingan. setiap kali mencetak, nilai c akan ditambah 0.5 dan perulangan dilakukan lagi dengan goto. setelah selesai, program mencetak garis penutup sebagai akhir tabel. output",2712d8c5173f12af169fbfe565e5004537af5f6647c418f9cb099fe322f798f1,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c44ea033ea2c8152de,RK_Gading Raditya Pratama_50422596_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:16.156Z,"logika pada program pertama ada “write(*,'(1x,a)') ‘tahun ?’” akan menampilkan pertanyaan ""tahun ?"" ke layar, meminta input tahun dari pengguna. lalu “read(*,'(bn,i4)') itahun” membaca input tahun dari user dan disimpan dalam variabel itahun. kemudian “xtahun = itahun / 4.0” adalah hasil pembagian tahun secara float dan “jtahun = itahun / 4” adalah hasil pembagian tahun secara integer. selanjutnya “if (xtahun .eq. jtahun) goto 100” akan mengecek apakah hasil pembagian float (xtahun) sama dengan hasil pembagian integer (jtahun). untuk line 6-7 jika tahun bukan kabisat, tampilkan pesan tersebut dan lanjut ke baris 200. lalu “100 write(*,'(1x,a,i4,a)') ‘tahun ‘, itahun, ‘, adalah tahun kabisat’” jika tahun kabisat, tampilkan pesan tersebut dan “200 continue” sebagai titik akhir program. pada program kedua ada “integer*2 angka” mendeklarasikan variabel angka sebagai integer 16-bit. untuk “write(*,'(1x,a)') ‘masukkan angka :’” menampilkan pesan untuk meminta input angka dari pengguna dan “read(*,'(i4)') angka” akan membaca input angka dari user dan menyimpannya dalam variabel angka. lalu “if(angka) 10,20,30” dalah bentuk if tiga arah (arithmetic if) dan line 5-6 jika angka negative, maka akan menampilkan pesan ""adalah bilangan negatif"" lalu lompat ke akhir (100). kemudian line 7-8 jika angka nol → tampilkan pesan ""adalah bilangan nol"", lalu lompat ke akhir (100) dan line 9-10 jika angka positif → tampilkan pesan ""adalah bilangan positif"", lalu lompat ke akhir (100). lalu “100 continue” sebagai titik akhir program. pada program ketiga ada “call cetak” memanggil subroutine bernama cetak. untuk “write(*,* ) ‘fortran’” menampilkan teks ""fortran"" ke layar dan line 5-7 fungsinya hanya mencetak garis ""--------"" ke layar setiap kali dipanggil. pada program keempat ada “write(*,'(1x,a)') ‘nilai dari x :’” menampilkan pesan ""nilai dari x :"" untuk meminta input dari pengguna. untuk “read(*,'(f5.2)') x” akan membaca input dari pengguna ke dalam variabel x dengan format real dan “call hitung(x)” memanggil subroutine hitung. lalu line 5-8 akan menampilkan hasil y dengan format float 8 digit total dan 2 digit di belakang koma. pada program kelima ada “fah(c) = 1.8 * c + 32.0” mendefinisikan fungsi internal sederhana fah(c) untuk menghitung suhu fahrenheit dari celcius. untuk line 2-4 akan menampilkan judul tabel ke layar dengan garis pemisah dan “c = 0.0” inisialisasi variabel c dengan nilai awal 0.0. lalu “5 write(*,'(1x,f7.2,4x,f10.2)') c, fah(c)” digunakan untuk loop manual dan menampilkan nilai c dan hasil fah(c). selanjutnya line 7-10 jika c masih kurang dari 10.0, tambahkan 0.5 dan kembali ke label 5. untuk line 11-12 nilai c mencapai 10.0 atau lebih, keluar dari loop dan cetak garis penutup. pada program keenam ada “fah(celcius) = 1.8 * c + 32.0” mendefinisikan fungsi internal sederhana fah(celcius) untuk menghitung suhu fahrenheit dari celcius. untuk line 2- 4 akan menampilkan judul tabel ke layar dengan garis pemisah dan “celcius = 0.0” inisialisasi variabel celcius dengan nilai awal 0.0. lalu “5 write(*,'(1x,f7.2,4x,f10.2)') celcius, fah(celcius)” digunakan untuk loop manual dan menampilkan nilai celcius dan hasil fah(celcius). setelah line 7-10 jika c masih kurang dari 10.0, tambahkan 0.5 dan kembali ke label 5. untuk line 11-12 nilai c mencapai 10.0 atau lebih, keluar dari loop dan cetak garis penutup. output program 1 program 2 program 3 program 4 program 5 program 6",2063a47911647fcee9053ac93e0ff41ecc091838f38838f703c1e1c66cc297b5,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c54ea033ea2c8152df,RK_Gilang Putra Firmansyah_50422621_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:17.593Z,"logika program : pada laporan akhir praktikum rekayasa komputasional pertemuan 2, saya ditugaskan untuk membuat logika di bagian listing program pada fotran. dalam bagian listing program fotran akan melibatkan input, proses, dan output. pada baris 2 terdapat perintah write(*,'(1x,a)') 'tahun ?' untuk mencetak prompt ke layar dengan format sederhana, lalu * pertama berarti unit i/o default (layar). lalu '(1x,a)' adalah string format, artinya cetak satu spasi (1x), kemudian cetak sebuah string (a). 'tahun ?' adalah teks yang akan ditampilkan. selanjutnya pada baris 3 terdapat perintah read(*,'(bn,i4)') itahun untuk membaca masukan (input) dari pengguna, * berarti baca dari unit i/o default (keyboard). lalu '(bn,i4)' adalah format baca, bn berarti “blank numeric”, yaitu blank (spasi) dianggap sebagai nol ketika membaca angka. lalu i4 berarti baca sebuah integer sepanjang 4 digit. itahun adalah variabel integer yang akan diisi nilai yang dibaca. jadi, program menunggu pengguna memasukkan tahun (misal 2024) lalu menekannya enter. kemudian pada baris 4 terdapat perintah xtahun = itahun/4.0 dibuat variabel xtahun (tipe real) yang menyimpan hasil pembagian itahun dengan 4.0 (tipe real). contoh: jika itahun = 2024, maka xtahun = 2024 / 4.0 = 506.0. berikutnya pada baris 5 terdapat jtahun = itahun/4 variabel jtahun (tipe integer) diisi dengan hasil pembagian integer itahun div 4. karena kedua operand integer, pembagian ini menghasilkan pembulatan ke bawah (floor). setelah itu pada baris 6 terdapat perintah if (xtahun .eq. jtahun) goto 100 pada pernyataan if tersebut membandingkan xtahun dan jtahun, lalu eq artinya “equal” (sama). jika xtahun sama dengan jtahun, maka lompat (goto) ke label 100. apabila pembagian real dan integer memberikan nilai yang sama persis, berarti itahun habis dibagi 4 (calon tahun kabisat sederhana). seterusnya pada baris 7 terdapat write(*,'(1x,a,i4,a)') 'tahun ',itahun,' bukan tahun kabisat' jika syarat if di atas tidak terpenuhi (berarti itahun tidak habis dibagi 4), maka baris dieksekusi format '(1x,a,i4,a)' mencetak satu spasi (1x), sebuah string (a), satu integer 4-digit (i4), lalu sebuah string (a). lalu pada baris 8 terdapat goto 200 yakni setelah mencetak bahwa bukan tahun kabisat, program melompat ke label 200 untuk melewati blok tahun kabisat. selanjutnya pada baris 8 terdapat 100 write(*,'(1x,a,i4,a)')'tahun ', itahun,' adalah tahun kabisat' 4 untuk label 100 adalah titik tujuan jika itahun habis dibagi 4. kemudian pada baris 10 terdapat 200 continue pada label 200 diikuti perintah continue—hanya penanda, tidak melakukan apa-apa, berfungsi agar goto 200 dapat melompat ke sini dan melanjutkan eksekusi. kemudian end berfungsi untuk menandai akhir program utama. setelah baris ini, eksekusi berhenti. setelah itu, pada baris 1 terdapat integer*2 angka untuk mendefinisikan variabel bernama angka dengan tipe integer sepanjang 2 byte. berarti angka dapat menyimpan bilangan bulat dalam rentang tertentu (biasanya –32 768 hingga 32 767). pada baris 2 terdapat perintah write(*,'(1x,a,/)') 'masukkan angka :' untuk mencetak prompt ke layer, lalu * sebagai unit i/o default (layar). lalu '(1x,a,/)' format output, artinya cetak satu spasi (1x), lalu sebuah string (a), kemudian baris baru (/), lalu 'masukkan angka :' adalah teks yang akan ditampilkan. selanjutnya pada baris 3 terdapat perintah read(*,'(i4)') angka untuk membaca input dari pengguna ke variabel angka * berarti dari unit i/o default (keyboard). lalu '(i4)' format baca: sebuah integer 4 digit. contoh: jika pengguna mengetik -5 lalu enter, maka angka = -5. kemudian pada baris 4 terdapat perintah if(angka) 10,20,30 merupakan arithmetic if klasik di fortran apabila angka < 0, lompat ke label 10. bila angka = 0, lompat ke label 20. bila angka > 0, lompat ke label 30. berikutnya pada baris 5 terdapat perintah 10 write(*,'(1x,i4,a)') angka,' adalah bilangan negatif' goto 100 jika angka < 0, eksekusi tiba di sini. lalu write(*,'(1x,i4,a)') mencetak satu spasi, kemudian nilai integer 4- digit angka, lalu string. setelah mencetak, goto 100 melompat ke label 100 untuk mengakhiri percabangan. jika angka = 0, eksekusi tiba di label 20 dan akan mencetak “ adalah bilangan nol”, kemudian lompat ke 100. jika angka > 0, eksekusi tiba di label 30 dan akan mencetak “adalah bilangan positif”. 5 setelah itu pada baris 1 terdapat perintah untuk memanggil subrutin bernama cetak untuk dieksekusi. call digunakan dalam fortran untuk mengeksekusi prosedur atau subrutin. saat dijalankan, akan menampilkan tulisan '--------' karena isi dari subroutine cetak adalah mencetak garis tersebut. seterusnya pada baris 2 terdapat perintah untuk menampilkan teks 'fortran' ke layar (standard output), pada fungsi perintah write(*,*) berarti * pertama menunjukkan output ke layar (unit standar), lalu * kedua menunjukkan format default (tanpa format spesifik). jadi, baris tersebut mencetak teks fortran ke layar. lalu pada baris 3 terdapat perintah untuk memanggil lagi subrutin cetak. sama seperti baris 1, yakni akan mencetak '--------' lagi ke layar. selanjutnya pada baris 6 dan 7 terdapat perintah dengan mendefinisikan subrutin bernama cetak. subrutin adalah blok kode terpisah yang dapat dipanggil berkali-kali dari program utama atau dari subrutin lain. mencetak garis '--------' ke layar yang merupakan isi dari subrutin cetak. pada baris 1 terdapat perintah write(*,'(1x,a,/)') 'masukkan angka :' untuk mencetak prompt ke layer, lalu * sebagai unit i/o default (layar). lalu '(1x,a,/)' format output, artinya cetak satu spasi (1x), lalu sebuah string (a), kemudian baris baru (/), lalu 'masukkan angka :' adalah teks yang akan ditampilkan. selanjutnya pada baris 2 terdapat perintah read(*,'(f5,2)') itahun untuk membaca masukan (input) dari pengguna, * berarti baca dari unit i/o default (keyboard). lalu (f5.2) f untuk format numerik real (floating point), lalu 5 sebagai total lebar bidang input 5 karakter (termasuk titik desimal), lalu .2 ialah dua angka di belakang koma desimal. contoh: jika pengguna mengetik 3.14 (5 karakter), maka x = 3.14. seterusnya pada baris 3 dan 4 terdapat perintah call hitung(x) untuk memanggil subrutin bernama hitung, dengan x sebagai argument. lalu call dalam fortran mengeksekusi prosedur/subrutin terpisah, 6 end untuk menandai akhir program utama. karena tidak ada deklarasi program … end program, fortran menganggap program tersebut sebagai utama anonim. berikutnya pada baris 6, 7, dan 8 terdapat perintah subroutine hitung(x) untuk mendefinisikan subrutin bernama hitung dengan satu parameter masukan x. subrutin adalah blok kode terpisah yang dapat dipanggil berkali-kali. lalu pada y = x**2 - 2*x akan melakukan perhitungan x**2 x pangkat 2, lalu - 2*x dikurangi dua kali x, akan menyimpan hasilnya di variabel y. lalu write (*,'(1x,a,f8.2)') 'y = ', y untuk mencetak hasil y ke layar dengan format 1x satu spasi di awal. a untuk cetak string literal ('y = '), lalu f8.2 akan cetak nilai numerik y dalam bidang lebar 8 karakter, dengan 2 angka di belakang koma. berikutnya pada baris 1 terdapat statement function di fortran 77 akan mendefinisikan fungsi fah yang mengambil argumen c (celcius) dan mengembalikan nilai (1.8*c + 32.0). lalu fah adalah nama fungsi, lalu (c) artinya fungsi ini punya satu parameter bernama c, lalu 1.8 * c + 32.0 adalah rumus konversi dari celcius ke fahrenheit. catatan karena tidak ada deklarasi tipe eksplisit, c dan hasil fah diasumsikan tipe real (floating point). selanjutnya pada baris 2, 3, dan 4 terdapat perintah write mencetak teks ke layar (unit standar * berarti layar/console). lalu parameter format (*,*) pakai list-directed i/o, artinya fortran otomatis memilih format dasar. tujuan: menampilkan header tabel dengan garis pemisah agar output lebih jelas. setelah itu, pada baris 5 terdapat inisialisasi variabel celcius dengan nilai 0.0. karena tidak ada implicit none atau deklarasi real, fortran 77 secara otomatis menganggap variabel yang namanya dimulai dengan huruf c (atau d–k) sebagai real. selanjutnya pada baris 6 terdapat nomor 5 di sebelah kiri adalah label. digunakan untuk target perintah goto pada baris selanjutnya. lalu write (*,'(1x,f7.2,4x,f10.2)') artinya 1x sisipkan 1 spasi sebelum mulai menulis angka, lalu f7.2 field lebar 7 karakter total, dengan 2 angka di belakang koma, untuk variabel celcius. lalu 4x sisipkan 4 spasi sebagai pemisah kolom. lalu f10.2 field lebar 10 karakter total, 2 angka di belakang koma, untuk hasil fah(celcius). fungsi: mencetak satu baris angka “celcius” dan “fahrenheit” sesuai format. kemudian pada baris 7, 8, 7 9, dan 10 terdapat kondisi lt. adalah operator “less than” (kurang dari). mengecek apakah celcius < 10.0. kalau benar celcius = celcius + 0.5 → tingkatkan nilai celcius sebesar 0.5, lalu goto 5 → loncat kembali ke label 5 untuk mencetak baris berikutnya. kalau salah (celcius ≥ 10.0), program melanjutkan ke baris setelah endif, tanpa kembali. setelah loop selesai (yakni celcius sudah tidak < 10.0), cetak garis penutup sama seperti header. 8 output : 9 10",102ae84d5c9f732175a24002b039aaaca5547448b7d00db4edefb294d546eae6,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c74ea033ea2c8152e0,RK_Janssen Mauren Benedict_50422733_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:19.247Z,"logika program dimulai dengan perintah write(*,'(1x,a,/)')'tahun ?' yang digunakan untuk menampilkan pesan ke layar berupa “tahun ?” sebagai permintaan input kepada pengguna. format (1x,a,/) berarti menambahkan satu spasi di awal, mencetak sebuah string (a), lalu melakukan pindah baris (/). setelah itu, perintah read(*,'(bn,i4)') itahun digunakan untuk membaca input tahun dari pengguna dan menyimpannya ke dalam variabel itahun. format bn,i4 berarti blank null (mengabaikan spasi kosong saat membaca input) dan membaca bilangan bulat 4 digit. selanjutnya adalah menentukan apakah tahun tersebut habis dibagi 4. variabel xtahun diisi dengan hasil pembagian itahun/4.0, yang menghasilkan angka pecahan (real) karena 4.0 bertipe real. sementara itu, variabel jtahun diisi dengan hasil pembagian itahun/4 yang merupakan pembagian bilangan bulat (integer), sehingga hasilnya juga integer. kemudian program melakukan perbandingan if (xtahun .eq. jtahun) goto 100, yang artinya jika hasil pembagian real (xtahun) sama dengan hasil pembagian integer (jtahun), maka itahun adalah kelipatan 4, dan program akan melompat ke label 100 yang mencetak bahwa tahun tersebut adalah tahun kabisat. jika tidak sama (berarti bukan kelipatan 4), program akan mengeksekusi baris berikutnya, yaitu write(*,'(1x,a,i4,a)') 'tahun ',itahun,' bukan tahun kabisat' yang mencetak bahwa tahun tersebut bukan tahun kabisat. setelah mencetak hasil, program melompat ke label 200, yaitu perintah goto 200 untuk menyelesaikan eksekusi program. di label 100, program mencetak bahwa tahun tersebut adalah tahun kabisat, kemudian juga melompat ke label 200 yang berisi perintah continue. terakhir, end menunjukkan akhir dari program. program berikutnya dimulai dengan mendeklarasi integer*2 angka yang menyatakan bahwa variabel angka bertipe integer 2-byte (atau integer pendek. variabel ini akan digunakan untuk menyimpan input dari pengguna. selanjutnya write(*,'(1x,a,/)')'masukkan angka :' mencetak pesan ""masukkan angka :"" ke layar untuk meminta pengguna memasukkan sebuah angka. format (1x,a,/) menunjukkan bahwa akan ada satu spasi sebelum teks, dan setelah teks akan dilakukan pindah baris. setelah itu read(*,'(i4)') angka digunakan untuk membaca bilangan bulat dengan maksimal 4 digit dari input pengguna dan menyimpannya dalam variabel angka. baris if(angka) 10,20,30 merupakan bentuk if tiga arah yang di mana kondisi angka akan dievaluasi jika angka kurang dari nol, program akan lompat ke label 10, angka sama dengan nol, program akan lompat ke label 20, dan angka lebih dari nol, program akan lompat ke label 30. pada label 10, program menampilkan hasil dengan write(*,'(1x,i4,a)') angka,' adalah bilangan negatif', yaitu mencetak angka tersebut diikuti dengan keterangan bahwa angka itu negatif, lalu melompat ke goto 100 untuk menyelesaikan program. jika angka berisikan nol, program menuju label 20 dan mengeksekusi perintah serupa: mencetak bahwa angka tersebut adalah bilangan nol, lalu juga melompat ke 100. untuk bilangan positif, label 30 digunakan, dan program mencetak bahwa angka tersebut adalah bilangan positif, kemudian juga melompat ke 100. label 100 berisi continue, yang merupakan perintah kosong sebagai penanda bahwa eksekusi program telah mencapai bagian akhir, dan end menandai berakhirnya program. program berikutnya dimulai dengan perintah call cetak yang memanggil subroutine bernama cetak. ketika subroutine ini dipanggil, program akan melompat sementara ke bagian definisi subroutine cetak dan mengeksekusi perintah yang ada di dalamnya. selanjutnya, baris write (*,*) 'fortran' menampilkan kata ""fortran"" ke layar, menggunakan format default dari write(*,*) yang mencetak output ke layar dengan spasi antar elemen dan pindah baris otomatis. kemudian, subroutine cetak kembali dipanggil melalui call cetak, sehingga program kembali menampilkan baris strip -------- di bawah tulisan fortran. terakhir, perintah end menandai bahwa eksekusi program utama telah selesai. dalam subroutine cetak, terdapat perintah write (*,*) '--------', yang mencetak baris tanda strip (--------) ke layar. program selanjutnya dimulai dengan perintah write (*,'(1x,a,/)') 'nilai dari x :', yang digunakan untuk mencetak pesan ""nilai dari x :"" ke layar sebagai permintaan agar pengguna memasukkan nilai untuk variabel x. format (1x,a,/) berarti satu spasi di awal, pencetakan teks (a), dan pindah baris (/). selanjutnya, read (*,'(f5.2)') x digunakan untuk membaca bilangan real yang dimasukkan oleh pengguna dan menyimpannya ke dalam variabel x. format f5.2 berarti nilai real dengan total 5 digit, termasuk 2 angka di belakang koma. kemudian, call hitung(x) memanggil subroutine bernama hitung, dan mengirimkan nilai x sebagai argumen ke subroutine tersebut. program akan melompat ke bagian subrutin hitung untuk melanjutkan eksekusi. di dalam subroutine hitung(x), dilakukan perhitungan y = x**2 - 2*x, yang artinya menghitung nilai y sebagai kuadrat dari x dikurangi dua kali x. operator ** digunakan untuk pemangkatan dalam fortran. nilai y ini akan dihitung berdasarkan input x yang diberikan dari program utama. selanjutnya, perintah write (*,'(1x,a,f8.2)') 'y = ',y akan mencetak hasil y ke layar dalam format satu spasi awal, string ""y = "", diikuti oleh nilai y dengan format real f8.2, yaitu lebar total 8 karakter termasuk 2 angka di belakang koma. akhir dari subrutin ditandai dengan end, yang menunjukkan bahwa eksekusi subroutine selesai, dan program akan kembali ke bagian utama setelah call hitung(x). setelah itu, end di program utama juga menandai akhir dari seluruh eksekusi program. program kelima dimulai dengan perintah fah(c) = 1.8 * c + 32.0 untuk mendefinisikan fungsi sederhana dalam satu baris. fungsi ini bernama fah dan memiliki parameter c. fungsinya adalah mengonversi suhu dari celcius ke fahrenheit dengan rumus f = 1.8 × c + 32. kemudian write (*,*) '------------------------------' mencetak garis pembatas sebagai header dari tabel suhu. baris berikutnya write (*,*) ' celcius fahrenheit ' mencetak judul kolom untuk suhu dalam celcius dan fahrenheit. setelah itu, satu garis pembatas lagi dicetak dengan perintah write (*,*) '------------------------------' untuk memisahkan judul dari data tabel. selanjutnya variabel c diinisialisasi dengan c = 0.0, yaitu titik awal dari suhu dalam celcius yang akan dikonversi. baris 5 write (*,'(1x,f7.2,4x,f10.2)') c,fah(c) digunakan untuk mencetak nilai c dan hasil konversinya fah(c) ke fahrenheit. format '1x,f7.2,4x,f10.2' berarti 1x satu spasi di awal, f7.2 mencetak nilai c dalam format float dengan 7 karakter lebar, 2 angka di belakang koma, 4x 4 spasi di antara kolom, dan f10.2 mencetak hasil fahrenheit dalam 10 karakter lebar, 2 angka di belakang koma. setelah mencetak satu baris data, program memeriksa kondisi dengan if (c .lt. 10.0) then, yang berarti jika nilai c masih kurang dari 10.0, maka c ditambah 0.5, lalu program melompat kembali ke label 5 dengan goto 5 untuk mencetak baris berikutnya dalam tabel. jika nilai c sudah mencapai atau melewati 10.0, kondisi tersebut tidak lagi terpenuhi, sehingga program keluar dari if dan melanjutkan ke perintah write (*,*) '------------------------------', yang mencetak garis penutup tabel. akhir program ditandai dengan end. program keenam ini sama seperti dengan program kelima, untuk mengkonversi suhu dari celcius ke fahrenhait. perintah fah(celcius) = 1.8 * celcius + 32.0 untuk mendefinisikan fungsi sederhana dalam satu baris. fungsi ini bernama fah dan memiliki parameter celcius. fungsinya adalah mengonversi suhu dari celcius ke fahrenheit dengan rumus f = 1.8 × celcius + 32. kemudian write (*,*) '------------------------------' mencetak garis pembatas sebagai header dari tabel suhu. baris berikutnya write (*,*) ' celcius fahrenheit ' mencetak judul kolom untuk suhu dalam celcius dan fahrenheit. setelah itu, satu garis pembatas lagi dicetak dengan perintah write (*,*) '------------------------------' untuk memisahkan judul dari data tabel. selanjutnya variabel celcius diinisialisasi dengan celcius = 0.0, yaitu titik awal dari suhu dalam celcius yang akan dikonversi. baris 5 write (*,'(1x,f7.2,4x,f10.2)') c,fah(celcius) digunakan untuk mencetak nilai celcius dan hasil konversinya fah(celcius) ke fahrenheit. format '1x,f7.2,4x,f10.2' berarti 1x satu spasi di awal, f7.2 mencetak nilai c dalam format float dengan 7 karakter lebar, 2 angka di belakang koma, 4x 4 spasi di antara kolom, dan f10.2 mencetak hasil fahrenheit dalam 10 karakter lebar, 2 angka di belakang koma. setelah mencetak satu baris data, program memeriksa kondisi dengan if (celcius .lt. 10.0) then, yang berarti jika nilai celcius masih kurang dari 10.0, maka celcius ditambah 0.5, lalu program melompat kembali ke label 5 dengan goto 5 untuk mencetak baris berikutnya dalam tabel. jika nilai celcius sudah mencapai atau melewati 10.0, kondisi tersebut tidak lagi terpenuhi, sehingga program keluar dari if dan melanjutkan ke perintah write (*,*) '------------ ------------------', yang mencetak garis penutup tabel. akhir program ditandai dengan end. output",e9f7437386c5e5c4a3932128668f97720f06a92e9201e64d2c5174a2dcaaada7,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c74ea033ea2c8152e1,RK_JonathanRegan_50422752_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:19.848Z,"logika: langkah pertama membuat program 1 yaitu menentukan apakah suatu tahun merupakan tahun kabisat atau bukan. program ini dimulai dengan menampilkan pertanyaan ""tahun ?"" ke layar, lalu membaca input tahun dari pengguna dan menyimpannya dalam variabel itahun. selanjutnya, nilai itahun dibagi dengan 4 dalam dua cara: satu dengan pembagian real (xtahun = itahun/4.0) dan satu lagi dengan pembagian bilangan bulat (jtahun = itahun/4). jika hasil dari kedua pembagian tersebut sama (xtahun .eq. jtahun), artinya itahun habis dibagi 4, maka program menganggap tahun tersebut adalah tahun kabisat dan melompat ke label 100 untuk menampilkan pesan ""tahun xxxx adalah tahun kabisat"". namun, jika tidak sama, maka program menampilkan bahwa tahun tersebut bukan tahun kabisat. langkah kedua membuat program 2 yaitu mengklasifikasikan sebuah bilangan apakah bernilai negatif, nol, atau positif. program dimulai dengan mendeklarasikan variabel angka sebagai bilangan bulat 2 byte (integer*2). kemudian, program menampilkan prompt ""masukkan angka :"" ke layar dan membaca masukan pengguna melalui perintah read. setelah itu, program menggunakan pernyataan if(angka) 10,20,30, yang merupakan bentuk lama dari if bertingkat tiga di fortran. struktur ini akan mengarahkan eksekusi ke label 10 jika angka < 0, ke label 20 jika angka = 0, dan ke label 30 jika angka > 0. pada masing-masing label, program mencetak nilai angka beserta keterangannya (negatif, nol, atau positif), kemudian melompat ke label 100 untuk menyelesaikan program. langkah ketiga membuat program 3 yaitu menggunakan subrutin untuk mencetak garis pembatas dalam output. eksekusi program dimulai dengan memanggil subrutin cetak menggunakan perintah call cetak, yang akan menampilkan baris '-------'. setelah itu, program menampilkan teks 'fortran' ke layar, lalu kembali memanggil subrutin cetak untuk mencetak baris garis yang sama sekali lagi. subrutin cetak sendiri didefinisikan di bagian bawah program dan hanya berisi satu perintah write(*,*) '-------', yang menampilkan baris pemisah tersebut. dengan demikian, output dari program ini membentuk struktur yang rapi seperti header dan footer di sekitar kata ""fortran"". langkah keempat membuat program 4 yaitu menghitung nilai y berdasarkan input x, dengan menggunakan subrutin terpisah untuk melakukan perhitungan. program dimulai dengan menampilkan prompt “nilai dari x :” dan membaca input pengguna ke dalam variabel x dalam format bilangan real dengan dua angka di belakang koma (f5.2). setelah nilai x diperoleh, program memanggil subrutin hitung(x), yang bertanggung jawab untuk menghitung nilai y berdasarkan rumus y=x2−2xy = x^2 - 2xy=x2−2x. hasil dari perhitungan ini kemudian ditampilkan ke layar dalam format float dengan lebar 8 karakter dan 2 angka di belakang koma. langkah kelima membuat program 5 yaitu mengonversi suhu dari celcius ke fahrenheit dan menampilkannya dalam bentuk tabel. program ini menggunakan fungsi inline fah(c) = 1.8 * c + 32.0 yang mendefinisikan rumus konversi suhu: f=1,8×c+32f = 1{,}8 \times c + 32f=1,8×c+32. setelah itu, program mencetak garis pemisah dan judul tabel. nilai awal celcius diinisialisasi sebesar 0.0 dan kemudian masuk ke dalam perulangan yang dimulai pada label 5. di dalam perulangan, nilai celcius dan hasil konversinya ke fahrenheit ditampilkan dengan format dua kolom terpisah. jika nilai celcius masih kurang dari 10.0, maka nilai tersebut ditambah 0.5 dan proses diulangi menggunakan goto 5. ketika nilai celcius mencapai 10.0 atau lebih, perulangan berhenti dan program mencetak garis pemisah terakhir sebelum berakhir. langkah terakhir membuat program 6 yaitu menghitung dan menampilkan tabel konversi suhu dari celcius ke fahrenheit. program dimulai dengan deklarasi variabel celcius sebagai bilangan real, dan menyatakan bahwa fungsi fah adalah fungsi eksternal yang akan didefinisikan di luar program utama. program kemudian mencetak garis pemisah dan judul tabel. nilai awal celcius diatur menjadi 0.0, dan program memasuki perulangan mulai dari label 5. pada setiap iterasi, nilai celcius dan hasil konversinya ke fahrenheit (yang dihitung oleh fungsi fah) dicetak dalam format tabel yang rapi. jika celcius masih kurang dari 10.0, maka nilainya ditambah 0.5 dan perulangan dilanjutkan. jika sudah mencapai atau melebihi 10.0, maka perulangan berhenti dan program mencetak garis penutup. fungsi fah sendiri didefinisikan di bagian bawah sebagai fungsi bertipe real yang menerima satu argumen c bertipe real, dan menghitung fahrenheit dengan rumus f=1,8×c+32f = 1{,}8 \times c + 32f=1,8×c+32. output: program 1 program 2 program 3 program 4 program 5 program 6",944485215f29b648b0cebca8e180b07b26ef15e9eea69e5639131de6cbc69157,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c84ea033ea2c8152e2,RK_Kartika Sari_50422020_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:20.194Z,"logika pada awal program, perintah write dideklarasikan untuk untuk meminta pengguna memasukkan tahun dengan mencetak teks “tahun ?” ke layar sebagai keterangan. lalu, inputan tersebut dibaca dan disimpan ke dalam variabel itahun dengan tipe data integer sebanyak 4 digit (i4) menggunakan perintah read(*,'(bn,i4)'), di mana format bn berfungsi untuk mengabaikan spasi kosong yang ada dalam inputan. setelah nilai tahun berhasil dibaca dan disimpan, melakukan dua buah operasi pembagian. pertama, nilai itahun dibagi dengan 4.0 secara desimal dan hasilnya disimpan ke dalam variabel xtahun. kedua, nilai itahun juga dibagi dengan 4 secara integer dan hasilnya disimpan ke dalam variabel jtahun. selanjutnya, terdapat kondisi if(xtahun .eq. jtahun) yang digunakan untuk membandingkan apakah variabel xtahun bernilai sama dengan variabel jtahun. jika kedua nilai sama dan tidak ada sisa pembagian sehingga xtahun .eq. jtahun bernilai benar, maka eksekusi program beralih ke label 100 dengan perintah goto 100. namun, jika tidak sama, perintah write akan mencetak pernyataan ”tahun .... bukan tahun kabisat”. setelahnya, eksekusi program akan dilanjutkan dengan melompat ke baris yang ditandai label 200 dengan perintah goto 200. jika kondisi untuk tahun kabisat terpenuhi, maka baris dengan label 100 akan dijalankan untuk mencetak pernyataan ”tahun .... adalah tahun kabisat” ke layar. setelah itu, program dilanjutkan ke label 200, di mana terdapat perintah continue sebagai penanda akhir dari blok kontrol tanpa melakukan eksekusi tambahan. kemudian, menjalankan perintah end untuk mengakhiri eksekusi program fortran. 3 output 4",488016b384871f6f0612cad71ca85074b3be493557932a081b7587e95bd0b6e1,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c84ea033ea2c8152e3,RK_MatthewClark_50422868_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:20.524Z,"logika langkah pertama dalam program adalah menampilkan pertanyaan ""tahun ?"" untuk meminta input dari pengguna. setelah pengguna memasukkan nilai tahun, input tersebut dibaca dan disimpan dalam variabel itahun. kemudian, program menghitung hasil pembagian tahun tersebut dengan 4 dalam dua bentuk: sebagai bilangan desimal (disimpan di xtahun) dan sebagai bilangan bulat (disimpan di jtahun). selanjutnya, program membandingkan apakah xtahun sama dengan jtahun. jika hasil keduanya sama, maka artinya tahun tersebut habis dibagi 4, dan program melompat ke bagian berlabel 100, yang mencetak bahwa tahun tersebut adalah tahun kabisat. namun, jika hasil pembagian tidak sama, maka program mencetak bahwa tahun tersebut bukan tahun kabisat dan melompat ke label 200, yang menjadi akhir program. secara keseluruhan, logika ini menyimpulkan bahwa sebuah tahun adalah kabisat jika dan hanya jika habis dibagi 4. untuk yang pertama kita deklarasikan variabel angka sebagai bilangan integer berdigit 2. selanjutnya, program mencetak permintaan ""masukkan angka :"" dan membaca input dari pengguna yang kemudian disimpan dalam variabel angka. lalu selanjutnya kita gunakan perintah if yang dimana jika nilai angka kurang dari nol, maka eksekusi dialihkan ke label 10, yang mencetak bahwa angka tersebut adalah bilangan negatif. jika nilai angka sama dengan nol, program akan lompat ke label 20 dan mencetak bahwa angka tersebut adalah bilangan nol. sementara itu, jika nilai angka lebih besar dari nol, program akan berpindah ke label 30 dan mencetak bahwa angka tersebut adalah bilangan positif. setelah mencetak hasil, setiap blok akan melompat ke label 100 yang berisi perintah continue sebagai titik akhir. untuk yang pertama pertama, program memanggil subrutin cetak, yang akan mencetak deretan tanda hubung '------' ke layar. setelah itu, program mencetak kata 'fortran' ke layar sebagai teks utama. selanjutnya, subrutin cetak dipanggil kembali untuk mencetak garis pemisah kedua, sehingga teks 'fortran' akan terlihat diapit oleh dua garis. program mencetak pesan 'nilai dari x :' sebagai permintaan input, lalu membaca nilai real x dengan format desimal dua angka di belakang koma. setelah nilai x dimasukkan, program memanggil subrutin hitung(x) untuk melakukan perhitungan. di dalam subrutin tersebut, nilai y dihitung berdasarkan rumus y = x^2 – 2x. hasil dari perhitungan ini ditampilkan ke layar dengan y = <nilai> program dimulai dengan mendefinisikan rumus konversi suhu, yaitu fah = 1.8 * c + 32 setelah itu, program mencetak garis pembatas dan judul kolom tabel. nilai suhu awal dalam celcius (c) diatur ke 0.0. program kemudian mencetak nilai celcius dan hasil konversinya ke fahrenheit dalam format dua kolom angka. jika nilai c masih kurang dari 10.0, maka nilainya akan ditambah 0.5 dan proses pencetakan diulang menggunakan perintah goto yang kembali ke label 5. perulangan ini akan terus dilakukan hingga nilai c mencapai 10.0 atau lebih. setelah semua data ditampilkan, program mencetak garis penutup dan diakhiri. langkah yang sama seperti diatas dilakukan pada kode ini yang membedakan hanya jika diatas c maka disini pakai celcius output",47de705aecd07b886557e5a9d5eb422ef922d63a6d8297c4426cceb11895af94,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c84ea033ea2c8152e4,RK_Muhammad Faiz Rashid_51422029_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:20.704Z,"logika program program diatas merupakan baris program sederhana untuk implementasi subroutine (mirip function pada bahas pemrograman lain) di fortran. pertama perintah “call cetak” artinya program akan menjalankan subroutine cetak. setelah subrutin cetak selesai dijalankan dan kontrol kembali ke program utama, baris “write (,) 'fortran'” akan dieksekusi. ini akan mencetak kata ""fortran"" ke output. lalu akan memanggil kembali subroutine cetak dengan perintah “call cetak”. lalu program di end untuk mengakhiri jalannya program. blok program diatas adalah program untuk subroutine cetak. ketika subrutin ini dipanggil, ia akan menjalankan instruksi di dalamnya. baris program “write (,) '_'” akan mencetak karakter garis bawah (_) ke layar. output program",52d24164c09c1b39e6aee3f7754cf11efa6c4ccadda8ce7f2a44d84605a79228,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c94ea033ea2c8152e5,RK_Muhammad Yassin_51422730_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:21.053Z,"logika pada codingan pertama ini adalah codingan untuk meminta input tahun dari pengguna, lalu memeriksa apakah tahun tersebut adalah tahun kabisat atau bukan. nilai tahun dibaca ke dalam variabel itahun, kemudian dilakukan pembagian terhadap 4 dalam dua bentuk: xtahun (hasil pembagian desimal) dan jtahun (hasil pembagian bulat). jika kedua hasil pembagian itu sama (artinya tidak ada sisa pembagian), maka program menyimpulkan bahwa tahun tersebut adalah tahun kabisat dan mencetak pesan sesuai. jika berbeda, maka tahun tersebut bukan tahun kabisat. setelah mencetak hasil, program berakhir. codingan selanjutnya digunakan untuk mengecek apakah sebuah bilangan yang dimasukkan pengguna merupakan bilangan negatif, nol, atau positif. program dimulai dengan mendeklarasikan variabel angka bertipe integer*2, lalu mencetak prompt agar pengguna memasukkan nilai. nilai tersebut dibaca dan kemudian diperiksa menggunakan pernyataan if(angka) 10,20,30 yang merupakan bentuk arithmetic if, yaitu mengevaluasi ekspresi angka dan melompat ke label 10 jika negatif, ke 20 jika nol, dan ke 30 jika positif. masing-masing label mencetak hasil yang sesuai dan akhirnya melompat ke label 100 untuk mengakhiri program. selanjutnya penggunaan subroutine untuk mencetak garis pemisah. program utama memanggil call cetak, yang menjalankan subroutine bernama cetak untuk mencetak teks '-------'. setelah itu, program mencetak kata 'fortran', lalu memanggil lagi subrutin cetak, sehingga hasil outputnya akan memiliki garis pemisah sebelum dan sesudah tulisan 'fortran'. subrutin cetak berfungsi untuk menyederhanakan pencetakan garis, sehingga bisa digunakan berkali- kali tanpa menulis ulang kode yang sama. program selanjutnya membaca sebuah nilai x bertipe real dari pengguna dengan format desimal dua angka di belakang koma (f5.2), lalu mengirimkan nilai tersebut ke subroutine bernama hitung. di dalam subrutin hitung, dilakukan perhitungan y = x**2 - 2*x, yang merupakan sebuah fungsi kuadrat. hasil dari perhitungan tersebut kemudian ditampilkan ke layar dengan format f8.2, yang berarti total 8 digit termasuk 2 digit di belakang koma. program ini menunjukkan cara sederhana menggunakan subrutin dengan parameter input. dan codingan berikutnya digunakan untuk menampilkan konversi suhu dari celcius ke fahrenheit dari nilai 0.0 hingga 10.0 dengan kenaikan 0.5. fungsi fah(c) didefinisikan sebagai 1.8 * c + 32.0, sesuai dengan rumus konversi dari celcius ke fahrenheit. program mencetak header tabel terlebih dahulu, lalu mencetak pasangan nilai celcius dan hasil konversinya ke fahrenheit menggunakan perulangan goto ke label 5. setiap kali c kurang dari 10.0, nilainya akan ditambah 0.5 dan proses pengulangan dilanjutkan hingga kondisi tidak terpenuhi. di akhir program, dicetak garis penutup. dan pada program terakhir berfungsi menampilkan tabel konversi suhu dari celcius ke fahrenheit dalam rentang 0.0 hingga 10.0 dengan interval 0.5. fungsi fah(c) digunakan untuk mengonversi nilai celcius ke fahrenheit menggunakan rumus 1.8 * c + 32.0. setelah mencetak header tabel, program memulai dari nilai celcius = 0.0 dan mencetak hasil konversi menggunakan write. perulangan dilakukan menggunakan goto yang melompat ke label 5 selama nilai celcius masih kurang dari 10.0, dan akan berhenti setelah mencapai batas. di akhir program, garis penutup tabel dicetak. output 1. 2. 3. 4. 5. 6.",8223855b64e6b8782d757f008111a6f137feb6baeaa117b7d1b00a5ddb37fc04,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730c94ea033ea2c8152e6,RK_Mutia Dewi Prameswari_51422181_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:21.519Z,"logika program dimulai dengan menampilkan pertanyaan ""tahun?"" untuk meminta masukan dari pengguna. setelah pengguna mengetikkan nilai tahun, input tersebut disimpan ke dalam variabel itahun. selanjutnya, program melakukan dua jenis pembagian terhadap nilai tersebut menggunakan angka 4. hasil pembagian sebagai bilangan desimal disimpan dalam variabel xtahun, sedangkan hasil pembagian sebagai bilangan bulat disimpan dalam variabel jtahun. program kemudian membandingkan apakah nilai xtahun sama dengan jtahun. jika keduanya bernilai sama, berarti tahun tersebut habis dibagi 4 tanpa sisa, sehingga program menuju bagian yang diberi label 100 dan menampilkan bahwa tahun tersebut merupakan tahun kabisat. jika nilai keduanya berbeda, maka tahun tidak habis dibagi 4, dan program akan mencetak bahwa tahun tersebut bukan tahun kabisat, lalu melanjutkan ke bagian yang diberi label 200, yang menandai akhir dari program. program yang kedua, diawali dengan mendeklarasikan variabel angka sebagai bilangan bulat dua digit. selanjutnya, program menampilkan pesan ""masukkan angka :"" untuk meminta input dari pengguna, lalu nilai yang dimasukkan disimpan ke dalam variabel angka. setelah itu, program menggunakan perintah if untuk melakukan pengecekan terhadap nilai yang dimasukkan. jika nilai angka kurang dari nol, maka eksekusi diarahkan ke label 10, yang akan mencetak bahwa angka tersebut merupakan bilangan negatif. jika nilainya sama dengan nol, program akan melompat ke label 20 dan menampilkan bahwa angka tersebut adalah bilangan nol. sebaliknya, apabila nilai angka lebih dari nol, program akan menuju label 30 dan mencetak bahwa angka tersebut adalah bilangan positif. setelah mencetak hasil pada masing- masing kondisi, program akan melanjutkan ke label 100 yang berfungsi sebagai titik akhir dengan perintah continue. pada langkah pertama, program menjalankan subrutin bernama cetak, yang berfungsi untuk menampilkan deretan tanda hubung '------' di layar. setelah itu, program mencetak kata 'fortran' sebagai teks utama. kemudian, subrutin cetak dipanggil sekali lagi untuk mencetak garis pemisah kedua, sehingga teks 'fortran' akan berada di antara dua baris tanda hubung. program diawali dengan menampilkan pesan 'nilai dari x :' sebagai permintaan input kepada pengguna, kemudian membaca nilai x sebagai bilangan real dengan dua angka di belakang koma. setelah pengguna memasukkan nilai tersebut, program memanggil subrutin hitung(x) untuk melakukan proses perhitungan. di dalam subrutin tersebut, nilai y dihitung menggunakan rumus y = x² – 2x. hasil dari perhitungan tersebut kemudian ditampilkan di layar dalam format y = . program diawali dengan mendefinisikan rumus konversi suhu, yaitu fah = 1.8 * c + 32. setelah itu, program mencetak garis pembatas serta judul kolom pada tabel. nilai awal suhu dalam celcius (c) diset pada 0.0. program kemudian menampilkan nilai celcius beserta hasil konversinya ke fahrenheit dalam format dua kolom angka. jika nilai c masih kurang dari 10.0, maka nilainya akan ditambah 0.5 dan proses pencetakan akan diulang menggunakan perintah goto yang mengarahkan kembali ke label 5. proses ini terus berulang hingga nilai c mencapai atau melebihi 10.0. setelah seluruh data ditampilkan, program mencetak garis penutup dan program pun selesai dijalankan. program diawali dengan mendefinisikan rumus konversi suhu, yaitu fah = 1.8 * c + 32.0, untuk mengubah suhu dari celcius ke fahrenheit. setelah itu, program mencetak garis pembatas dan judul kolom bertuliskan “celcius fahrenheit” ke layar. nilai awal suhu dalam celcius (c) diatur menjadi 0.0, lalu program mencetak nilai celcius dan hasil konversinya ke fahrenheit dalam dua kolom angka dengan format desimal dua angka di belakang koma. jika nilai c masih kurang dari 10.0, program akan menambahkan 0.5 pada nilai c, lalu kembali mencetak nilai baru beserta hasil konversinya menggunakan perintah goto yang mengarah ke label 5. proses ini akan terus berulang hingga nilai c mencapai atau melebihi 10.0. setelah seluruh data selesai ditampilkan, program mencetak garis penutup dan diakhiri dengan perintah end. output",74013f742f59f2d25732d4facc86ae13d84842c5f83a88ab3211a87a66e2995f,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730ca4ea033ea2c8152e7,RK_Nickson Winil_51422241_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:22.408Z,"logika program 1 berfungsi untuk menentukan apakah sebuah tahun yang dimasukkan oleh pengguna adalah tahun kabisat atau bukan. pertama, program menampilkan pesan “tahun?” di layar dan meminta pengguna memasukkan nilai tahun yang diinginkan. setelah tahun dimasukkan, program menghitung hasil pembagian tahun tersebut dengan 4 dalam bentuk bilangan real (xtahun) dan bilangan bulat (jtahun). program kemudian memeriksa apakah nilai real (xtahun) sama dengan nilai bilangan bulat (jtahun). jika sama, artinya tahun tersebut habis dibagi 4 dan merupakan tahun kabisat, sehingga program mencetak “tahun xxxx adalah tahun kabisat.” jika tidak sama, berarti tahun tersebut bukan tahun kabisat, sehingga program mencetak “tahun xxxx bukan tahun kabisat.” program kemudian selesai dijalankan. program 2 digunakan untuk menentukan apakah suatu bilangan yang dimasukkan oleh pengguna adalah bilangan negatif, nol, atau positif. pertama, program menampilkan pesan “masukkan angka:” untuk meminta pengguna memasukkan sebuah bilangan. setelah bilangan dimasukkan ke dalam variabel angka, program menggunakan statement percabangan tiga arah if(angka) 10,20,30 untuk memeriksa nilai bilangan tersebut. jika bilangan tersebut bernilai negatif (kurang dari nol), maka program akan melompat ke label 10 dan mencetak pesan “xxxx adalah bilangan negatif.” jika bilangan tersebut sama dengan nol, program melompat ke label 20 dan mencetak pesan “xxxx adalah bilangan nol.” sedangkan jika bilangan tersebut bernilai positif (lebih dari nol), program melompat ke label 30 dan mencetak pesan “xxxx adalah bilangan positif.” setelah mencetak hasilnya, program kemudian melompat ke label 100 dan selesai dijalankan. program 3 menampilkan teks sederhana di layar dengan bantuan subrutin. pertama, program memanggil subrutin bernama cetak, yang berfungsi untuk mencetak garis “-------” di layar. setelah itu, program mencetak kata “fortran” di layar. kemudian, program kembali memanggil subrutin cetak sehingga garis “-------” dicetak lagi di bawah tulisan “fortran”. dengan demikian, hasil akhir yang terlihat di layar adalah garis, tulisan “fortran”, lalu garis lagi. program kemudian selesai dijalankan. program 4 bertujuan untuk menghitung dan menampilkan nilai fungsi tertentu berdasarkan input pengguna. pertama, program menampilkan pesan “nilai dari x :” untuk meminta pengguna memasukkan sebuah bilangan real x dengan format dua angka di belakang koma. setelah nilai x dimasukkan, program memanggil subrutin bernama hitung sambil mengirimkan nilai x tersebut. di dalam subrutin hitung, dilakukan perhitungan nilai y dengan rumus y=x^22−2x. hasil perhitungan nilai y ini kemudian dicetak ke layar dengan format dua angka di belakang koma, disertai label “y = ” di depannya. setelah itu, program selesai dijalankan. program 5 digunakan untuk menampilkan tabel konversi suhu dari celcius ke fahrenheit. pertama, program mendefinisikan fungsi fah(c) yang akan menghitung suhu fahrenheit dari suhu celcius c dengan rumus fahrenheit=1.8×c+32.0. program kemudian mencetak garis pemisah dan judul “celcius fahrenheit” di layar. setelah itu, nilai c diinisialisasi dengan 0.0. program masuk ke label 5, di mana dilakukan pencetakan nilai c dan hasil konversinya ke fahrenheit menggunakan fungsi fah(c). selama nilai c masih kurang dari 10.0, program akan menambah nilai c sebesar 0.5 dan kembali ke label 5 untuk mencetak baris berikutnya. proses ini terus berulang hingga c mencapai atau melebihi 10.0. setelah selesai, program mencetak garis pemisah di bagian akhir dan kemudian selesai dijalankan. program 5 membuat tabel yang hanya mencetak dua kolom berisi nilai suhu dalam satuan celcius. pertama, program mencetak garis pemisah dan judul “celcius fahrenheit”, lalu garis pemisah lagi. setelah itu, variabel celcius diinisialisasi ke 0.0. program masuk ke label 5 dan mencetak dua nilai celcius dan (celcius). tetapi di sini, kolom kedua sebenarnya tidak dihitung sebagai fahrenheit melainkan hanya mengulang nilai celcius, karena program hanya menulis (celcius) lagi, bukan melakukan konversi. setelah mencetak satu baris, program memeriksa apakah nilai celcius kurang dari 10.0. jika ya, maka celcius akan ditambah 0.5 dan program lompat kembali ke label 5 untuk mencetak baris berikutnya. proses ini berulang sampai celcius mencapai atau melebihi 10.0. akhirnya, program mencetak garis pemisah lagi di bagian bawah sebagai penutup dan selesai dijalankan. output program 1 program 2 program 3 program 4 program 5 program 6",961ade3c654b6cd6825474f6cac8ea4601e0432103bb3894e1f975490627048f,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730ca4ea033ea2c8152e8,RK_Nida Rofiah Hassan_51422243_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:22.865Z,"logika pada program 1 ini digunakan untuk menentukan apakah suatu tahun merupakan tahun kabisat. input tahun dibaca dan disimpan dalam variabel itahun. tahun tersebut kemudian dibagi dengan 4 secara desimal dan bilangan bulat. jika hasil pembagian desimal (xtahun) sama dengan hasil pembagian bulat (jtahun), maka tahun tersebut habis dibagi 4 dan dianggap sebagai tahun kabisat. jika tidak, maka tahun tersebut bukan tahun kabisat. hasilnya ditampilkan dengan perintah write. program 2 ini dibuat untuk mengklasifikasikan bilangan yang dimasukkan oleh pengguna sebagai negatif, nol, atau positif. input bilangan dibaca ke dalam variabel angka. kemudian program menggunakan perintah if(angka) 10,20,30, yang merupakan bentuk percabangan dalam fortran untuk bilangan negatif, nol, dan positif. jika angka bernilai negatif, program lompat ke label 10 dan mencetak bahwa angka tersebut adalah bilangan negatif. jika bernilai nol, program lompat ke label 20 dan mencetak bahwa angka adalah nol. jika positif, program lompat ke label 30. setelah mencetak hasil, program akan teruskan ke label 100 yang berisi perintah continue, lalu berakhir dengan end. program 3 ini menampilkan kata ""fortran"" di antara dua baris garis pembatas menggunakan subrutin. subrutin bernama cetak berisi perintah untuk mencetak garis ""-------"". di bagian utama program, subrutin cetak dipanggil sebelum dan sesudah mencetak kata ""fortran"", sehingga hasil outputnya tampak rapi dengan garis pembatas di atas dan bawah teks. program 4 ini digunakan untuk menghitung nilai fungsi kuadrat menggunakan subrutin. pertama, pengguna diminta untuk memasukkan nilai x. nilai tersebut kemudian dikirim ke subrutin hitung(x) untuk diproses. di dalam subrutin, dilakukan perhitungan nilai y dengan rumus: y = x² − 2x. hasil dari perhitungan tersebut kemudian ditampilkan dengan format dua angka di belakang koma. program 5 ini digunakan untuk menampilkan konversi suhu dari celcius ke fahrenheit dalam bentuk tabel. program menggunakan fungsi fah(c) yang berisi rumus konversi: f = 1.8 * c + 32.0. nilai awal suhu c diset ke 0.0 dan akan bertambah 0.5 setiap kali program mencetak hasil konversinya. pengulangan dilakukan dengan perintah goto selama nilai c masih kurang dari 10.0. setiap hasil akan ditampilkan dalam format dua angka desimal untuk nilai celcius dan fahrenheit. di awal dan akhir program juga dicetak garis pemisah agar tampilan tabel lebih rapi. program 6 ini bertujuan untuk menampilkan tabel konversi suhu dari celcius ke fahrenheit. pertama-tama, didefinisikan sebuah fungsi fah(c) yang menghitung nilai fahrenheit dari input suhu celcius c dengan menggunakan rumus: f = 1.8 * c + 32.0. program kemudian mencetak header berupa tulisan “celcius fahrenheit” serta garis pemisah sebagai batas tabel. nilai awal c diatur ke 0.0, kemudian program masuk ke proses perulangan menggunakan struktur if dan goto. selama nilai c masih kurang dari 10.0 (c .lt. 10.0), program mencetak nilai c dan hasil konversi fahrenheit-nya dalam format terstruktur, lalu menambahkan 0.5 ke c dan kembali ke label baris 5 untuk mengulangi proses pencetakan. setelah c mencapai atau melebihi 10.0, perulangan berhenti dan program mencetak garis penutup. program kemudian diakhiri dengan perintah end. output program 1 program 2 bilangan positif bilangan negatif bilangan nol program 3 program 4 program 5 program 6",41764419446419f4950e7436115e4cd0b36780b3038461fa9d726da28d759918,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730cb4ea033ea2c8152e9,RK_Prambudi Alief Yahya_51422297_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:23.225Z,"logika program dimulai dengan menampilkan pertanyaan “tahun?” kepada pengguna, kemudian membaca input tahun yang dimasukkan. nilai tahun tersebut disimpan dalam variabel itahun. selanjutnya, program membagi nilai itahun dengan 4 dua kali, yaitu sekali dalam bentuk pecahan (xtahun = itahun / 4.0) dan sekali dalam bentuk bilangan bulat (jtahun = itahun / 4). tujuannya adalah untuk membandingkan apakah hasil pembagian tersebut menghasilkan angka bulat, dengan cara membandingkan xtahun dan jtahun. jika keduanya sama, maka tahun tersebut habis dibagi 4 dan dianggap sebagai tahun kabisat, sehingga program menampilkan pesan bahwa tahun tersebut adalah tahun kabisat. jika tidak sama, maka program menyimpulkan bahwa tahun tersebut bukan tahun kabisat. program dimulai dengan mendeklarasikan sebuah variabel bernama angka bertipe integer*2, yang berarti variabel tersebut merupakan bilangan bulat 16-bit. selanjutnya, program menampilkan pesan untuk meminta pengguna memasukkan sebuah angka, kemudian membaca nilai input tersebut dan menyimpannya ke dalam variabel angka. setelah itu, program menggunakan bentuk pemilihan kondisi khas fortran, yaitu if(angka) 10,20,30, yang merupakan bentuk tripartit dari pernyataan if. instruksi ini mengevaluasi nilai dari angka, dan jika nilai tersebut negatif maka kontrol program akan dialihkan ke label 10, jika bernilai nol ke label 20, dan jika positif ke label 30. pada masing-masing label, program mencetak pernyataan yang sesuai untuk menjelaskan apakah angka tersebut negatif, nol, atau positif. setelah mencetak hasilnya, program melompat ke label 100 yang merupakan bagian akhir program, sebelum akhirnya program selesai. program di atas adalah contoh sederhana penggunaan subrutin dalam bahasa fortran. program utama memanggil subrutin bernama cetak sebelum dan sesudah mencetak kata ""fortran"". subrutin cetak berisi perintah untuk mencetak garis ""-------"" ke layar. saat program dijalankan, urutan output yang ditampilkan adalah: garis ""-------"", kata ""fortran"", lalu garis ""-------"" lagi. ini menunjukkan bagaimana subrutin dapat digunakan untuk menghindari penulisan kode yang sama berulang kali, sehingga membuat program lebih modular dan rapi. program di atas merupakan program fortran yang menghitung nilai dari sebuah fungsi kuadrat menggunakan subrutin. program utama meminta pengguna untuk memasukkan nilai x, yang dibaca sebagai bilangan pecahan (real) dengan format dua angka desimal. nilai x tersebut kemudian dikirim ke subrutin hitung, yang melakukan perhitungan y = x² - 2x. setelah perhitungan selesai, subrutin mencetak hasil nilai y ke layar dengan format angka pecahan sebanyak dua digit di belakang koma. program ini menunjukkan penggunaan parameter dalam pemanggilan subrutin untuk memisahkan logika perhitungan dari bagian utama program. program di atas adalah program fortran yang digunakan untuk menampilkan konversi suhu dari celcius ke fahrenheit dalam bentuk tabel. fungsi fah(c) menghitung suhu fahrenheit dari suhu celcius dengan rumus 1.8 * c + 32.0. program mencetak header tabel terlebih dahulu, lalu memulai perulangan dari nilai c = 0.0. dalam setiap iterasi, program mencetak nilai c (celcius) dan hasil konversinya ke fahrenheit menggunakan format dua angka desimal. nilai c akan bertambah 0.5 setiap kali hingga mencapai 10.0. setelah perulangan selesai, program mencetak garis penutup tabel. program ini menunjukkan penggunaan fungsi, perulangan dengan goto, dan pemformatan output dalam fortran. output",f8afc78e1267cebc0d924f5bdd3fc311c26a5b71f154372820bc91212ac86dbc,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730cb4ea033ea2c8152ea,RK_RizqiFathurrohman_51422475_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:23.651Z,"logika pada la kali ini kita membuat program fortran untuk mengecek apakah suatu tahun merupakan tahun kabisat. program dimulai dengan deklarasi variabel itahun (integer2), jtahun (integer2), dan xtahun (real*4). kemudian program menampilkan ""tahun?"" menggunakan perintah write, lalu membaca input tahun dari user dengan read dan menyimpannya ke dalam itahun. selanjutnya dilakukan dua pembagian: xtahun = itahun / 4.0 dan jtahun = itahun / 4. kedua hasil tersebut dibandingkan. jika nilainya sama, maka tahun dianggap habis dibagi 4 dan program menampilkan bahwa itu tahun kabisat. jika tidak sama, berarti bukan tahun kabisat. program ditutup dengan menampilkan nama menggunakan print* dan diakhiri dengan end. selanjutnya pada program suatu angka bernilai negatif, nol, atau positif pertama deklarasi variabel angka bertipe integer*2. kemudian ditampilkan pesan ""masukkan angka :"" menggunakan write, lalu input angka dibaca melalui read dan disimpan ke dalam variabel angka. percabangan if(angka) 10,20,30 digunakan untuk mengecek nilai input. jika negatif, program lompat ke label 10 dan menampilkan bahwa angka negatif. jika nol, ke label 20 dan ditampilkan sebagai bilangan nol. jika positif, lompat ke label 30 dan ditampilkan sebagai bilangan positif. program diakhiri di label 100 dengan continue dan end. selanjutnya membuat program fortran dengan subrutin. program memanggil subrutin cetak, lalu menampilkan teks ""fortran"", dan memanggil kembali subrutin cetak. subrutin cetak sendiri berfungsi untuk mencetak garis '------' ke layar. program diakhiri dengan end. selanjutnya membuat program fortran untuk menghitung nilai fungsi dari input pengguna. program diawali dengan menampilkan pesan ""nilai dari x :"", kemudian membaca input berupa bilangan real dan menyimpannya ke variabel x. selanjutnya program memanggil subrutin hitung(x). di dalam subrutin hitung, dilakukan perhitungan nilai y dengan rumus y = x**2 - 2*x, lalu hasil dari y ditampilkan menggunakan perintah write. program ini menunjukkan penggunaan subrutin untuk memisahkan proses perhitungan dari program utama, dan diakhiri dengan end. selanjutnya membuat program fortran untuk menampilkan konversi suhu dari celcius ke fahrenheit. pertama, kita mendefinisikan fungsi fah(c) dengan rumus 1.8 * c + 32.0. program kemudian menampilkan judul tabel dan menginisialisasi nilai celcius dengan 0.0. melalui perintah write, program mencetak nilai celcius dan hasil konversinya ke fahrenheit. selama nilai celcius masih kurang dari 10, program akan menambahkan 0.5 pada celcius dan mengulang proses pencetakan dengan goto. setelah kondisi tidak terpenuhi, program mencetak garis penutup dan diakhiri dengan perintah end. selanjutnya membuat program fortran untuk menampilkan konversi suhu dari celcius ke fahrenheit. pertama, kita mendefinisikan fungsi fah(c) dengan rumus 1.8 * c + 32.0. program kemudian menampilkan judul tabel dan menginisialisasi nilai celcius dengan 0.0. melalui perintah write, program mencetak nilai celcius dan hasil konversinya ke fahrenheit. selama nilai celcius masih kurang dari 10, program akan menambahkan 0.5 pada celcius dan mengulang proses pencetakan dengan goto. setelah kondisi tidak terpenuhi, program mencetak garis penutup dan diakhiri dengan perintah end. output p1 p2 p3 p4 p5 p6",b0080afbdda45edec0e1c01164979829ddd020e88c10488a5343de64ed67b001,bd772327-9c5e-4651-b4cc-6559f2782c9d
686730cc4ea033ea2c8152eb,RK_Yosephine Cahaya Permatahari_51422653_LA2.pdf,uploaded_reports/37cc26e2-3db3-443d-acd6-32fff36f6285_RK3IA21-LA Pertemuan 2-19187.zip,2025-07-04T01:39:24.027Z,"logika pada pertemuan kedua praktikum rekayasa komputasional, saya mempelajari tentang array, operator dan format dalam fotran. disini saya akan menjelaskan 6 program sederhana menggunakan fotran. program pertama berfungsi untuk mengecek apakah suatu tahun termasuk tahun kabisat atau bukan. program ini meminta input dari pengguna berupa tahun yang disimpan dalam variabel itahun. tahun tersebut kemudian dibagi 4, dan hasilnya dibandingkan dalam dua bentuk: sebagai bilangan real (xtahun) dan sebagai bilangan bulat (jtahun). jika kedua hasil pembagian tersebut bernilai sama, artinya pembagian tidak memiliki sisa, maka tahun tersebut dianggap sebagai tahun kabisat dan akan ditampilkan pesan bahwa tahun tersebut adalah tahun kabisat. sebaliknya, jika hasilnya berbeda, maka akan ditampilkan bahwa tahun tersebut bukan tahun kabisat. program kedua digunakan untuk menentukan apakah bilangan yang dimasukkan oleh pengguna merupakan bilangan negatif, nol, atau positif. nilai yang dimasukkan disimpan dalam variabel angka, lalu diperiksa menggunakan struktur percabangan if yang diarahkan ke label tertentu. jika nilai angka kurang dari nol, program akan menuju label 10 dan mencetak bahwa angka tersebut negatif. jika bernilai nol, program akan melompat ke label 20 dan mencetak bahwa angka tersebut nol. sedangkan jika lebih dari nol, program akan melanjutkan ke label 30 dan menampilkan bahwa angka tersebut positif. setelah menampilkan hasilnya, program kembali ke awal melalui goto 100. program ketiga memperlihatkan cara penggunaan subrutin dalam bahasa fortran. subrutin bernama cetak digunakan untuk mencetak garis strip ('------') ke layar. di dalam program utama, subrutin ini dipanggil dua kali, yaitu sebelum dan sesudah menampilkan kata 'fortran'. dengan demikian, output yang dihasilkan adalah garis strip, diikuti oleh tulisan 'fortran', dan ditutup dengan garis strip lagi. program keempat memanfaatkan subrutin untuk menghitung nilai dari sebuah fungsi kuadrat. program dimulai dengan meminta pengguna memasukkan nilai x, yang dibaca dalam format desimal dengan dua angka di belakang koma menggunakan read(*,'(f5.2)'). setelah itu, nilai tersebut dikirim ke subrutin hitung(x), yang bertugas menghitung y = x^2 - 2x. hasil perhitungan disimpan dalam variabel y dan ditampilkan dengan format f8.2, sehingga output ditampilkan dengan dua angka desimal. program ini menggambarkan pemisahan antara bagian input dan proses perhitungan melalui penggunaan subrutin, sehingga kode menjadi lebih terstruktur dan rapi. program kelima berfungsi untuk menampilkan tabel konversi suhu dari celsius ke fahrenheit. di awal, didefinisikan fungsi fah(c) yang berisi rumus konversi standar, yaitu 1.8 * c + 32.0. program dimulai dengan mencetak judul tabel, lalu mengatur nilai awal variabel celcius menjadi 0.0. melalui struktur if dan perintah goto, program menjalankan perulangan untuk mencetak nilai celsius beserta hasil konversinya ke fahrenheit. setiap kali perulangan dijalankan, nilai celcius akan ditambah 0.5 hingga nilainya kurang dari 10.0. data yang ditampilkan tersusun dalam dua kolom. program keenam diawali dengan mendefinisikan fungsi fah(c) yang menggunakan rumus 1.8 * c + 32.0 untuk mengubah suhu dari celsius ke fahrenheit. setelah itu, program mencetak header tabel dan memulai proses perulangan dengan nilai awal c = 0.0. selama nilai c masih di bawah 10.0, program akan mencetak pasangan nilai suhu dalam celsius dan hasil konversinya ke fahrenheit. setelah mencetak, nilai c akan dinaikkan sebesar 0.5 dan perulangan dilanjutkan menggunakan perintah goto. output",53c5c786dbc31c77b84e3f1ae3ff8e7568a34382fe1c553bdcbc161ccd02adff,bd772327-9c5e-4651-b4cc-6559f2782c9d
686779987c187be5c3b2849d,Dokumen Uji Coba C.pdf,uploaded_reports/447ebdce-6ac7-453d-8e51-187abca70a4a_Dokumen Uji Coba C.pdf,2025-07-04T06:50:00.778Z,"logika program kode ini mendefinisikan struktur data untuk sebuah node dalam linked list menggunakan bahasa c. struktur `node` memiliki dua atribut: `info`, yang bertipe `int` untuk menyimpan data, dan `next`, yang merupakan pointer ke node berikutnya dalam linked list. struktur ini akan digunakan untuk membangun daftar terhubung (linked list) yang dapat menyimpan serangkaian elemen. bagian kode ini adalah awal dari fungsi `main` untuk program linked list dalam bahasa c. kode mendefinisikan tipe `simpul` sebagai pointer ke struktur `node`. di dalam `main`, beberapa pointer diinisialisasi: `baru`, `head`, `tail`, `temp`, dan `prev`, serta beberapa variabel untuk pilihan pengguna dan data. program kemudian membersihkan layar menggunakan `system(""cls"")` dan menampilkan menu interaktif yang memungkinkan pengguna untuk memilih opsi untuk menyisipkan, melihat, mencari, atau menghapus elemen dalam linked list, serta untuk keluar dari program. bagian kode ini menangani opsi pertama dari menu, yaitu menyisipkan data ke dalam linked list. setelah pengguna memasukkan data, program mengalokasikan memori untuk node baru menggunakan `malloc` dan menyimpan data tersebut dalam atribut `info` dari node baru. jika linked list kosong (ketika `head` adalah `null`), node baru menjadi `head` dan `tail`. jika linked list sudah memiliki elemen, node baru disambungkan di belakang node terakhir (tail), dan `tail` diperbarui untuk menunjuk ke node baru tersebut. ini memastikan linked list selalu terhubung dengan benar. bagian kode ini menangani opsi kedua dari menu, yaitu menampilkan semua elemen dalam linked list. program mulai dengan mengatur pointer `temp` ke `head`, yang merupakan node pertama dalam linked list. selama `temp` tidak `null`, program mencetak nilai `info` dari node saat ini dan kemudian menggeser `temp` ke node berikutnya menggunakan `temp- >next`. proses ini berlanjut hingga semua elemen di linked list ditampilkan, dan akhirnya mencetak baris baru untuk format yang lebih baik. bagian kode ini menangani opsi ketiga dari menu, yaitu mencari sebuah angka dalam linked list. program meminta pengguna untuk memasukkan angka yang ingin dicari, kemudian memulai pencarian dari `head`. selama `temp` tidak `null` dan nilai `info` dari node saat ini tidak sama dengan angka yang dicari, program akan menggeser `temp` ke node berikutnya. jika setelah pencarian `temp` tidak `null` dan nilai `info` yang ditemukan sama dengan angka yang dicari, program mencetak ""data ditemukan"". jika tidak, program mencetak ""data tidak ditemukan"", menandakan bahwa angka tersebut tidak ada dalam linked list. bagian kode ini menangani penghapusan angka dari linked list. setelah meminta pengguna untuk memasukkan angka yang ingin dihapus, program mencari node yang sesuai menggunakan pointer `temp` dan melacak node sebelumnya dengan pointer `prev`. jika node ditemukan, program meminta konfirmasi dari pengguna untuk melanjutkan penghapusan. jika pengguna setuju, program menangani beberapa skenario: jika node yang dihapus berada di tengah atau akhir, pointer `prev` diatur untuk melewati node tersebut; jika node yang dihapus adalah satu-satunya node dalam linked list, `head` diatur ke `null`; jika node yang dihapus adalah `head`, pointer `head` diperbarui untuk menunjuk ke node berikutnya; dan jika node tersebut berada di akhir, `tail` juga diperbarui. setelah penghapusan, memori untuk node yang dihapus dibebaskan, dan program memberi tahu pengguna bahwa data telah berhasil dihapus, atau jika node tidak ditemukan, mencetak pesan yang sesuai. bagian kode ini mengakhiri loop program dengan menggunakan `do...while`, yang akan terus menampilkan menu dan memproses pilihan pengguna hingga pengguna memilih opsi untuk keluar (5). setelah pilihan 5 dipilih, program keluar dari loop dan mengembalikan nilai 0, menandakan bahwa eksekusi program selesai dengan sukses. dengan demikian, seluruh fungsi `main` memberikan pengguna kesempatan untuk berinteraksi dengan linked list hingga mereka memutuskan untuk menutup program. output program",4fcbc794fee168d3a4c7a7a3ed3fbedfa5c12e98795d41635bec9a1bca883664,8572d625-373c-4ded-be83-2e2e91e8402f
686779997c187be5c3b2849e,Dokumen Uji Coba D.pdf,uploaded_reports/a01a2473-9474-42b4-a4be-61134a2522b6_Dokumen Uji Coba D.pdf,2025-07-04T06:50:01.418Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,8572d625-373c-4ded-be83-2e2e91e8402f
6867799a7c187be5c3b2849f,Dokumen Uji Coba A.pdf,uploaded_reports/95d4ff61-262f-46b2-a045-ef7dc8fa639b_Dokumen Uji Coba A.pdf,2025-07-04T06:50:02.127Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,8572d625-373c-4ded-be83-2e2e91e8402f
6867799a7c187be5c3b284a0,Dokumen Uji Coba B.pdf,uploaded_reports/a48b2a48-2276-44df-bd84-420ac5183fc1_Dokumen Uji Coba B.pdf,2025-07-04T06:50:02.412Z,"logika  program ini adalah implementasi linked list sederhana dalam bahasa c, yang menyediakan fungsi untuk menambah, menampilkan, mencari, dan menghapus data dari dalam linked list. program ini dimulai dengan mendefinisikan struktur node, yang memiliki dua anggota: info, yang menyimpan data integer, dan next, yang merupakan pointer ke node berikutnya dalam linked list. program juga menggunakan typedef struct node *simpul untuk mendefinisikan tipe data simpul sebagai pointer ke node. di dalam fungsi main, beberapa pointer dideklarasikan, termasuk head sebagai pointer awal linked list, tail untuk mengakses node terakhir, serta temp dan prev untuk membantu operasi lainnya. program berisi loop utama yang menampilkan menu dengan lima opsi: insert, view, search, delete, dan keluar. pada opsi insert, program meminta pengguna untuk memasukkan data baru yang akan disimpan dalam linked list. node baru akan dibuat dengan malloc, diisi dengan data, lalu ditambahkan ke akhir linked list. jika linked list kosong, node ini akan menjadi head dan tail; jika tidak, tail diperbarui ke node baru. opsi view menampilkan semua elemen di dalam linked list dari head hingga tail. program melintasi linked list dan mencetak nilai info dari setiap node hingga akhir. opsi search memungkinkan pengguna mencari data tertentu dalam linked list. program mencari node dengan nilai info yang sesuai, lalu menampilkan pesan apakah data ditemukan atau tidak. opsi delete memungkinkan pengguna menghapus node dengan nilai tertentu dari linked list. jika node ditemukan, program meminta konfirmasi pengguna untuk menghapusnya. jika pengguna memilih ""y"", node tersebut akan dihapus dan linked list diperbarui. pointer head atau tail juga diperbarui jika node yang dihapus adalah node pertama atau terakhir. jika node tidak ditemukan, program menampilkan pesan ""data tidak ditemukan"". loop utama terus berjalan sampai pengguna memilih opsi ""keluar"" (pilih 5). program kemudian mengakhiri eksekusi dengan menampilkan pesan untuk menekan tombol apa saja agar keluar. output",e1768802ed40487085c43e6413c155240117f667eb4a03bd3cb61b4b4200330c,8572d625-373c-4ded-be83-2e2e91e8402f
686780657c187be5c3b284a2,Dokumen Uji Coba C.pdf,uploaded_reports/a76e7198-9076-49e1-ae2a-6754f8d8739a_Dokumen Uji Coba C.pdf,2025-07-04T07:19:01.889Z,"logika program kode ini mendefinisikan struktur data untuk sebuah node dalam linked list menggunakan bahasa c. struktur `node` memiliki dua atribut: `info`, yang bertipe `int` untuk menyimpan data, dan `next`, yang merupakan pointer ke node berikutnya dalam linked list. struktur ini akan digunakan untuk membangun daftar terhubung (linked list) yang dapat menyimpan serangkaian elemen. bagian kode ini adalah awal dari fungsi `main` untuk program linked list dalam bahasa c. kode mendefinisikan tipe `simpul` sebagai pointer ke struktur `node`. di dalam `main`, beberapa pointer diinisialisasi: `baru`, `head`, `tail`, `temp`, dan `prev`, serta beberapa variabel untuk pilihan pengguna dan data. program kemudian membersihkan layar menggunakan `system(""cls"")` dan menampilkan menu interaktif yang memungkinkan pengguna untuk memilih opsi untuk menyisipkan, melihat, mencari, atau menghapus elemen dalam linked list, serta untuk keluar dari program. bagian kode ini menangani opsi pertama dari menu, yaitu menyisipkan data ke dalam linked list. setelah pengguna memasukkan data, program mengalokasikan memori untuk node baru menggunakan `malloc` dan menyimpan data tersebut dalam atribut `info` dari node baru. jika linked list kosong (ketika `head` adalah `null`), node baru menjadi `head` dan `tail`. jika linked list sudah memiliki elemen, node baru disambungkan di belakang node terakhir (tail), dan `tail` diperbarui untuk menunjuk ke node baru tersebut. ini memastikan linked list selalu terhubung dengan benar. bagian kode ini menangani opsi kedua dari menu, yaitu menampilkan semua elemen dalam linked list. program mulai dengan mengatur pointer `temp` ke `head`, yang merupakan node pertama dalam linked list. selama `temp` tidak `null`, program mencetak nilai `info` dari node saat ini dan kemudian menggeser `temp` ke node berikutnya menggunakan `temp- >next`. proses ini berlanjut hingga semua elemen di linked list ditampilkan, dan akhirnya mencetak baris baru untuk format yang lebih baik. bagian kode ini menangani opsi ketiga dari menu, yaitu mencari sebuah angka dalam linked list. program meminta pengguna untuk memasukkan angka yang ingin dicari, kemudian memulai pencarian dari `head`. selama `temp` tidak `null` dan nilai `info` dari node saat ini tidak sama dengan angka yang dicari, program akan menggeser `temp` ke node berikutnya. jika setelah pencarian `temp` tidak `null` dan nilai `info` yang ditemukan sama dengan angka yang dicari, program mencetak ""data ditemukan"". jika tidak, program mencetak ""data tidak ditemukan"", menandakan bahwa angka tersebut tidak ada dalam linked list. bagian kode ini menangani penghapusan angka dari linked list. setelah meminta pengguna untuk memasukkan angka yang ingin dihapus, program mencari node yang sesuai menggunakan pointer `temp` dan melacak node sebelumnya dengan pointer `prev`. jika node ditemukan, program meminta konfirmasi dari pengguna untuk melanjutkan penghapusan. jika pengguna setuju, program menangani beberapa skenario: jika node yang dihapus berada di tengah atau akhir, pointer `prev` diatur untuk melewati node tersebut; jika node yang dihapus adalah satu-satunya node dalam linked list, `head` diatur ke `null`; jika node yang dihapus adalah `head`, pointer `head` diperbarui untuk menunjuk ke node berikutnya; dan jika node tersebut berada di akhir, `tail` juga diperbarui. setelah penghapusan, memori untuk node yang dihapus dibebaskan, dan program memberi tahu pengguna bahwa data telah berhasil dihapus, atau jika node tidak ditemukan, mencetak pesan yang sesuai. bagian kode ini mengakhiri loop program dengan menggunakan `do...while`, yang akan terus menampilkan menu dan memproses pilihan pengguna hingga pengguna memilih opsi untuk keluar (5). setelah pilihan 5 dipilih, program keluar dari loop dan mengembalikan nilai 0, menandakan bahwa eksekusi program selesai dengan sukses. dengan demikian, seluruh fungsi `main` memberikan pengguna kesempatan untuk berinteraksi dengan linked list hingga mereka memutuskan untuk menutup program. output program",4fcbc794fee168d3a4c7a7a3ed3fbedfa5c12e98795d41635bec9a1bca883664,3dcf38f8-4f6a-4908-ae3c-cb688a62067a
686780667c187be5c3b284a3,Dokumen Uji Coba D.pdf,uploaded_reports/0003b965-66c8-4dce-b5ef-039b935398e6_Dokumen Uji Coba D.pdf,2025-07-04T07:19:02.534Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,3dcf38f8-4f6a-4908-ae3c-cb688a62067a
686780687c187be5c3b284a4,Dokumen Uji Coba A.pdf,uploaded_reports/aded181f-83f2-4248-8ec8-7c078a6fa7a3_Dokumen Uji Coba A.pdf,2025-07-04T07:19:04.302Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,3dcf38f8-4f6a-4908-ae3c-cb688a62067a
686780687c187be5c3b284a5,Dokumen Uji Coba B.pdf,uploaded_reports/7918031c-1547-42c1-b01e-1f1247d09bd1_Dokumen Uji Coba B.pdf,2025-07-04T07:19:04.588Z,"logika  program ini adalah implementasi linked list sederhana dalam bahasa c, yang menyediakan fungsi untuk menambah, menampilkan, mencari, dan menghapus data dari dalam linked list. program ini dimulai dengan mendefinisikan struktur node, yang memiliki dua anggota: info, yang menyimpan data integer, dan next, yang merupakan pointer ke node berikutnya dalam linked list. program juga menggunakan typedef struct node *simpul untuk mendefinisikan tipe data simpul sebagai pointer ke node. di dalam fungsi main, beberapa pointer dideklarasikan, termasuk head sebagai pointer awal linked list, tail untuk mengakses node terakhir, serta temp dan prev untuk membantu operasi lainnya. program berisi loop utama yang menampilkan menu dengan lima opsi: insert, view, search, delete, dan keluar. pada opsi insert, program meminta pengguna untuk memasukkan data baru yang akan disimpan dalam linked list. node baru akan dibuat dengan malloc, diisi dengan data, lalu ditambahkan ke akhir linked list. jika linked list kosong, node ini akan menjadi head dan tail; jika tidak, tail diperbarui ke node baru. opsi view menampilkan semua elemen di dalam linked list dari head hingga tail. program melintasi linked list dan mencetak nilai info dari setiap node hingga akhir. opsi search memungkinkan pengguna mencari data tertentu dalam linked list. program mencari node dengan nilai info yang sesuai, lalu menampilkan pesan apakah data ditemukan atau tidak. opsi delete memungkinkan pengguna menghapus node dengan nilai tertentu dari linked list. jika node ditemukan, program meminta konfirmasi pengguna untuk menghapusnya. jika pengguna memilih ""y"", node tersebut akan dihapus dan linked list diperbarui. pointer head atau tail juga diperbarui jika node yang dihapus adalah node pertama atau terakhir. jika node tidak ditemukan, program menampilkan pesan ""data tidak ditemukan"". loop utama terus berjalan sampai pengguna memilih opsi ""keluar"" (pilih 5). program kemudian mengakhiri eksekusi dengan menampilkan pesan untuk menekan tombol apa saja agar keluar. output",e1768802ed40487085c43e6413c155240117f667eb4a03bd3cb61b4b4200330c,3dcf38f8-4f6a-4908-ae3c-cb688a62067a
6878aef3505655e93dbcea23,Dokumen Uji Coba C.pdf,uploaded_reports/65f689ea-5e73-4137-ac06-ce071b99bd5b_Dokumen Uji Coba C.pdf,2025-07-17T08:06:11.652Z,"logika program kode ini mendefinisikan struktur data untuk sebuah node dalam linked list menggunakan bahasa c. struktur `node` memiliki dua atribut: `info`, yang bertipe `int` untuk menyimpan data, dan `next`, yang merupakan pointer ke node berikutnya dalam linked list. struktur ini akan digunakan untuk membangun daftar terhubung (linked list) yang dapat menyimpan serangkaian elemen. bagian kode ini adalah awal dari fungsi `main` untuk program linked list dalam bahasa c. kode mendefinisikan tipe `simpul` sebagai pointer ke struktur `node`. di dalam `main`, beberapa pointer diinisialisasi: `baru`, `head`, `tail`, `temp`, dan `prev`, serta beberapa variabel untuk pilihan pengguna dan data. program kemudian membersihkan layar menggunakan `system(""cls"")` dan menampilkan menu interaktif yang memungkinkan pengguna untuk memilih opsi untuk menyisipkan, melihat, mencari, atau menghapus elemen dalam linked list, serta untuk keluar dari program. bagian kode ini menangani opsi pertama dari menu, yaitu menyisipkan data ke dalam linked list. setelah pengguna memasukkan data, program mengalokasikan memori untuk node baru menggunakan `malloc` dan menyimpan data tersebut dalam atribut `info` dari node baru. jika linked list kosong (ketika `head` adalah `null`), node baru menjadi `head` dan `tail`. jika linked list sudah memiliki elemen, node baru disambungkan di belakang node terakhir (tail), dan `tail` diperbarui untuk menunjuk ke node baru tersebut. ini memastikan linked list selalu terhubung dengan benar. bagian kode ini menangani opsi kedua dari menu, yaitu menampilkan semua elemen dalam linked list. program mulai dengan mengatur pointer `temp` ke `head`, yang merupakan node pertama dalam linked list. selama `temp` tidak `null`, program mencetak nilai `info` dari node saat ini dan kemudian menggeser `temp` ke node berikutnya menggunakan `temp- >next`. proses ini berlanjut hingga semua elemen di linked list ditampilkan, dan akhirnya mencetak baris baru untuk format yang lebih baik. bagian kode ini menangani opsi ketiga dari menu, yaitu mencari sebuah angka dalam linked list. program meminta pengguna untuk memasukkan angka yang ingin dicari, kemudian memulai pencarian dari `head`. selama `temp` tidak `null` dan nilai `info` dari node saat ini tidak sama dengan angka yang dicari, program akan menggeser `temp` ke node berikutnya. jika setelah pencarian `temp` tidak `null` dan nilai `info` yang ditemukan sama dengan angka yang dicari, program mencetak ""data ditemukan"". jika tidak, program mencetak ""data tidak ditemukan"", menandakan bahwa angka tersebut tidak ada dalam linked list. bagian kode ini menangani penghapusan angka dari linked list. setelah meminta pengguna untuk memasukkan angka yang ingin dihapus, program mencari node yang sesuai menggunakan pointer `temp` dan melacak node sebelumnya dengan pointer `prev`. jika node ditemukan, program meminta konfirmasi dari pengguna untuk melanjutkan penghapusan. jika pengguna setuju, program menangani beberapa skenario: jika node yang dihapus berada di tengah atau akhir, pointer `prev` diatur untuk melewati node tersebut; jika node yang dihapus adalah satu-satunya node dalam linked list, `head` diatur ke `null`; jika node yang dihapus adalah `head`, pointer `head` diperbarui untuk menunjuk ke node berikutnya; dan jika node tersebut berada di akhir, `tail` juga diperbarui. setelah penghapusan, memori untuk node yang dihapus dibebaskan, dan program memberi tahu pengguna bahwa data telah berhasil dihapus, atau jika node tidak ditemukan, mencetak pesan yang sesuai. bagian kode ini mengakhiri loop program dengan menggunakan `do...while`, yang akan terus menampilkan menu dan memproses pilihan pengguna hingga pengguna memilih opsi untuk keluar (5). setelah pilihan 5 dipilih, program keluar dari loop dan mengembalikan nilai 0, menandakan bahwa eksekusi program selesai dengan sukses. dengan demikian, seluruh fungsi `main` memberikan pengguna kesempatan untuk berinteraksi dengan linked list hingga mereka memutuskan untuk menutup program. output program",4fcbc794fee168d3a4c7a7a3ed3fbedfa5c12e98795d41635bec9a1bca883664,5c09978f-2501-4aa0-b0c9-f21ddb10f983
6878aef4505655e93dbcea24,Dokumen Uji Coba D.pdf,uploaded_reports/3e70cb01-02df-412c-863a-79b94d3de1dd_Dokumen Uji Coba D.pdf,2025-07-17T08:06:12.316Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,5c09978f-2501-4aa0-b0c9-f21ddb10f983
6878aef4505655e93dbcea25,Dokumen Uji Coba A.pdf,uploaded_reports/756cd9fc-875e-4853-b478-c039bfffc800_Dokumen Uji Coba A.pdf,2025-07-17T08:06:12.849Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,5c09978f-2501-4aa0-b0c9-f21ddb10f983
6878aef5505655e93dbcea26,Dokumen Uji Coba B.pdf,uploaded_reports/d58d3b7b-5809-4b37-860a-bf55261cedfe_Dokumen Uji Coba B.pdf,2025-07-17T08:06:13.053Z,"logika  program ini adalah implementasi linked list sederhana dalam bahasa c, yang menyediakan fungsi untuk menambah, menampilkan, mencari, dan menghapus data dari dalam linked list. program ini dimulai dengan mendefinisikan struktur node, yang memiliki dua anggota: info, yang menyimpan data integer, dan next, yang merupakan pointer ke node berikutnya dalam linked list. program juga menggunakan typedef struct node *simpul untuk mendefinisikan tipe data simpul sebagai pointer ke node. di dalam fungsi main, beberapa pointer dideklarasikan, termasuk head sebagai pointer awal linked list, tail untuk mengakses node terakhir, serta temp dan prev untuk membantu operasi lainnya. program berisi loop utama yang menampilkan menu dengan lima opsi: insert, view, search, delete, dan keluar. pada opsi insert, program meminta pengguna untuk memasukkan data baru yang akan disimpan dalam linked list. node baru akan dibuat dengan malloc, diisi dengan data, lalu ditambahkan ke akhir linked list. jika linked list kosong, node ini akan menjadi head dan tail; jika tidak, tail diperbarui ke node baru. opsi view menampilkan semua elemen di dalam linked list dari head hingga tail. program melintasi linked list dan mencetak nilai info dari setiap node hingga akhir. opsi search memungkinkan pengguna mencari data tertentu dalam linked list. program mencari node dengan nilai info yang sesuai, lalu menampilkan pesan apakah data ditemukan atau tidak. opsi delete memungkinkan pengguna menghapus node dengan nilai tertentu dari linked list. jika node ditemukan, program meminta konfirmasi pengguna untuk menghapusnya. jika pengguna memilih ""y"", node tersebut akan dihapus dan linked list diperbarui. pointer head atau tail juga diperbarui jika node yang dihapus adalah node pertama atau terakhir. jika node tidak ditemukan, program menampilkan pesan ""data tidak ditemukan"". loop utama terus berjalan sampai pengguna memilih opsi ""keluar"" (pilih 5). program kemudian mengakhiri eksekusi dengan menampilkan pesan untuk menekan tombol apa saja agar keluar. output",e1768802ed40487085c43e6413c155240117f667eb4a03bd3cb61b4b4200330c,5c09978f-2501-4aa0-b0c9-f21ddb10f983
687df4736fb68f7890d971a4,Dokumen Uji Coba C.pdf,uploaded_reports/4ce2b263-8ac9-4824-9ade-ed35ebb7009f_Dokumen Uji Coba C.pdf,2025-07-21T08:04:03.976Z,"logika program kode ini mendefinisikan struktur data untuk sebuah node dalam linked list menggunakan bahasa c. struktur `node` memiliki dua atribut: `info`, yang bertipe `int` untuk menyimpan data, dan `next`, yang merupakan pointer ke node berikutnya dalam linked list. struktur ini akan digunakan untuk membangun daftar terhubung (linked list) yang dapat menyimpan serangkaian elemen. bagian kode ini adalah awal dari fungsi `main` untuk program linked list dalam bahasa c. kode mendefinisikan tipe `simpul` sebagai pointer ke struktur `node`. di dalam `main`, beberapa pointer diinisialisasi: `baru`, `head`, `tail`, `temp`, dan `prev`, serta beberapa variabel untuk pilihan pengguna dan data. program kemudian membersihkan layar menggunakan `system(""cls"")` dan menampilkan menu interaktif yang memungkinkan pengguna untuk memilih opsi untuk menyisipkan, melihat, mencari, atau menghapus elemen dalam linked list, serta untuk keluar dari program. bagian kode ini menangani opsi pertama dari menu, yaitu menyisipkan data ke dalam linked list. setelah pengguna memasukkan data, program mengalokasikan memori untuk node baru menggunakan `malloc` dan menyimpan data tersebut dalam atribut `info` dari node baru. jika linked list kosong (ketika `head` adalah `null`), node baru menjadi `head` dan `tail`. jika linked list sudah memiliki elemen, node baru disambungkan di belakang node terakhir (tail), dan `tail` diperbarui untuk menunjuk ke node baru tersebut. ini memastikan linked list selalu terhubung dengan benar. bagian kode ini menangani opsi kedua dari menu, yaitu menampilkan semua elemen dalam linked list. program mulai dengan mengatur pointer `temp` ke `head`, yang merupakan node pertama dalam linked list. selama `temp` tidak `null`, program mencetak nilai `info` dari node saat ini dan kemudian menggeser `temp` ke node berikutnya menggunakan `temp- >next`. proses ini berlanjut hingga semua elemen di linked list ditampilkan, dan akhirnya mencetak baris baru untuk format yang lebih baik. bagian kode ini menangani opsi ketiga dari menu, yaitu mencari sebuah angka dalam linked list. program meminta pengguna untuk memasukkan angka yang ingin dicari, kemudian memulai pencarian dari `head`. selama `temp` tidak `null` dan nilai `info` dari node saat ini tidak sama dengan angka yang dicari, program akan menggeser `temp` ke node berikutnya. jika setelah pencarian `temp` tidak `null` dan nilai `info` yang ditemukan sama dengan angka yang dicari, program mencetak ""data ditemukan"". jika tidak, program mencetak ""data tidak ditemukan"", menandakan bahwa angka tersebut tidak ada dalam linked list. bagian kode ini menangani penghapusan angka dari linked list. setelah meminta pengguna untuk memasukkan angka yang ingin dihapus, program mencari node yang sesuai menggunakan pointer `temp` dan melacak node sebelumnya dengan pointer `prev`. jika node ditemukan, program meminta konfirmasi dari pengguna untuk melanjutkan penghapusan. jika pengguna setuju, program menangani beberapa skenario: jika node yang dihapus berada di tengah atau akhir, pointer `prev` diatur untuk melewati node tersebut; jika node yang dihapus adalah satu-satunya node dalam linked list, `head` diatur ke `null`; jika node yang dihapus adalah `head`, pointer `head` diperbarui untuk menunjuk ke node berikutnya; dan jika node tersebut berada di akhir, `tail` juga diperbarui. setelah penghapusan, memori untuk node yang dihapus dibebaskan, dan program memberi tahu pengguna bahwa data telah berhasil dihapus, atau jika node tidak ditemukan, mencetak pesan yang sesuai. bagian kode ini mengakhiri loop program dengan menggunakan `do...while`, yang akan terus menampilkan menu dan memproses pilihan pengguna hingga pengguna memilih opsi untuk keluar (5). setelah pilihan 5 dipilih, program keluar dari loop dan mengembalikan nilai 0, menandakan bahwa eksekusi program selesai dengan sukses. dengan demikian, seluruh fungsi `main` memberikan pengguna kesempatan untuk berinteraksi dengan linked list hingga mereka memutuskan untuk menutup program. output program",4fcbc794fee168d3a4c7a7a3ed3fbedfa5c12e98795d41635bec9a1bca883664,c535b6d9-f171-4608-8e11-ddf189eedf77
687df4746fb68f7890d971a5,Dokumen Uji Coba D.pdf,uploaded_reports/65ba6c8a-3009-4bb2-b0ff-d33ea4f21132_Dokumen Uji Coba D.pdf,2025-07-21T08:04:04.542Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,c535b6d9-f171-4608-8e11-ddf189eedf77
687df4756fb68f7890d971a6,Dokumen Uji Coba A.pdf,uploaded_reports/ce21bdee-9e49-4a17-9107-99b39f08035c_Dokumen Uji Coba A.pdf,2025-07-21T08:04:05.123Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,c535b6d9-f171-4608-8e11-ddf189eedf77
687df4756fb68f7890d971a7,Dokumen Uji Coba B.pdf,uploaded_reports/2e661996-5ad6-4860-9899-63d342bf604e_Dokumen Uji Coba B.pdf,2025-07-21T08:04:05.374Z,"logika  program ini adalah implementasi linked list sederhana dalam bahasa c, yang menyediakan fungsi untuk menambah, menampilkan, mencari, dan menghapus data dari dalam linked list. program ini dimulai dengan mendefinisikan struktur node, yang memiliki dua anggota: info, yang menyimpan data integer, dan next, yang merupakan pointer ke node berikutnya dalam linked list. program juga menggunakan typedef struct node *simpul untuk mendefinisikan tipe data simpul sebagai pointer ke node. di dalam fungsi main, beberapa pointer dideklarasikan, termasuk head sebagai pointer awal linked list, tail untuk mengakses node terakhir, serta temp dan prev untuk membantu operasi lainnya. program berisi loop utama yang menampilkan menu dengan lima opsi: insert, view, search, delete, dan keluar. pada opsi insert, program meminta pengguna untuk memasukkan data baru yang akan disimpan dalam linked list. node baru akan dibuat dengan malloc, diisi dengan data, lalu ditambahkan ke akhir linked list. jika linked list kosong, node ini akan menjadi head dan tail; jika tidak, tail diperbarui ke node baru. opsi view menampilkan semua elemen di dalam linked list dari head hingga tail. program melintasi linked list dan mencetak nilai info dari setiap node hingga akhir. opsi search memungkinkan pengguna mencari data tertentu dalam linked list. program mencari node dengan nilai info yang sesuai, lalu menampilkan pesan apakah data ditemukan atau tidak. opsi delete memungkinkan pengguna menghapus node dengan nilai tertentu dari linked list. jika node ditemukan, program meminta konfirmasi pengguna untuk menghapusnya. jika pengguna memilih ""y"", node tersebut akan dihapus dan linked list diperbarui. pointer head atau tail juga diperbarui jika node yang dihapus adalah node pertama atau terakhir. jika node tidak ditemukan, program menampilkan pesan ""data tidak ditemukan"". loop utama terus berjalan sampai pengguna memilih opsi ""keluar"" (pilih 5). program kemudian mengakhiri eksekusi dengan menampilkan pesan untuk menekan tombol apa saja agar keluar. output",e1768802ed40487085c43e6413c155240117f667eb4a03bd3cb61b4b4200330c,c535b6d9-f171-4608-8e11-ddf189eedf77
687dffa46fb68f7890d971a9,LA1_SD.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:48.681Z,"logika pada pertemuaan pertama praktikum ini kita menggunakan bahasa go atau bahasa golang setelah kita mempelajari bahasa program tersebut tentunya kita membuat suatu program tersebut. berikut program yang telah di buat. kode program di atas mendefinisikan sebuah struktur data untuk merepresentasikan buku, kemudian membuat sebuah array untuk menyimpan daftar buku. fungsi addbook digunakan untuk menambahkan buku baru ke dalam daftar tersebut. fungsi ini meminta pengguna untuk memasukkan informasi buku dan menyimpan ke dalam array. jadi program yang lebih besar yang mungkin digunakan untuk mengelola data buku di sebuah perpustakaan. kode program yang anda berikan merupakan lanjutan dari kode sebelumnya yang fokus pada fungsi-fungsi untuk menampilkan daftar buku, meminjam buku, dan mengembalikan buku. perintah ddbook() digunakan untuk menambahkan buku baru ke dalam daftar. lalu perintah displaybooks() digunakan untuk menampilkan informasi semua buku yang ada. perintah borrowbook() digunakan untuk mengubah status buku menjadi ""dipinjam"". perintah returnbook() digunakan untuk mengubah status buku menjadi ""tersedia"". kode program ini secara keseluruhan merupakan program sederhana untuk mengelola data buku dalam sebuah perpustakaan. fungsi utama dari kode ini adalah untuk mengelola proses pengembalian buku dalam sistem perpustakaan. kode ini memeriksa status ketersediaan buku berdasarkan id yang diberikan dan memperbarui statusnya jika buku tersebut berhasil dikembalikan. perintah validasi input untuk menambahkan validasi input untuk memastikan bahwa id buku yang dimasukkan pengguna adalah valid (misalnya, berupa angka positif). perintah pesan kesalahan yang lebih detail untuk emberikan pesan kesalahan yang lebih informatif, misalnya jika terjadi kesalahan saat mengakses array library. perintah pengecekan status pengembalian untuk menambahkan fitur untuk memeriksa riwayat peminjaman buku, sehingga dapat diketahui oleh siapa buku tersebut terakhir dipinjam. perintah untuk memisahkan logika pengecekan status ketersediaan buku ke dalam sebuah fungsi terpisah untuk meningkatkan modularitas kode. bagian dari sebuah program yang lebih besar untuk memahami keseluruhan fungsionalitas program, perlu dilihat konteksnya dalam program yang lengkap. program sederhana untuk mengelola perpustakaan. bagian ini bertanggung jawab untuk menampilkan menu utama kepada pengguna dan menjalankan fungsi yang sesuai berdasarkan pilihan. perintah program di atas memungkinkan pengguna untuk berinteraksi dengan program dengan memilih berbagai opsi yang tersedia. fungsi returnbook() yang dipanggil pada pilihan 4kemungkinan besar berisi logika untuk mencari buku yang ingin dikembalikan, memperbarui status ketersediaan buku dan mungkin juga melakukan operasi lain yang terkait dengan pengembalian buku. output",42717a93700ae3af7320f55ae931ec74c424f42a7bb892e60482962b7a06c176,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffa46fb68f7890d971aa,Aditya Permana Putra_2IA24_LA1.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:48.853Z,"logika header untuk standar input/output, lalu mendefinisikan variable mahasiswa dengan menggunakan struct agar dapat menyimpan nilai nama dengan max 50 char, npm dengan max 15 char, kelas dengan max 10 char, absenpertemuan sebagai int dan nilai untuk 7 pertemuan dalam array. void itu mendefinisikan fungsi yaitu cetak dengan struct mahasiswa as (alias) mhs, mencetak nama, npm, kelas, absen pertemuan dan nilai mahasiswa dengan perulangan for yang akan mengulang sebanyak 7 kali, berikut format format yang saya gunakan %s untuk mencetak string, %d untuk mencetak integer dan \n untuk membuat line baru data seperti nama diambil dengan parameter yang sudah diberikan pada fungsi yaitu mhs.(apa yang akan dipanggil). fungsi main tempat utama menjalankan program, mendeklarasikan variable mhs1 dengan type mahasiswa yang berisikan nama, npm, kelas, absenpertemuan dan nilai setiap pertemuan, lalu memanggil fungsi cetak dengan parameter mhs1 yang sudah berisikan data mahasiswa, return 0 untuk mengakhiri program. output",9aef181dde4b77503c000b4b95cea5c91e1b08cec68f11873ed645150386a317,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffa46fb68f7890d971ab,Agsutino_Wijaya_Hursepuny_2IA24_SD.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:48.959Z,"logika menambahkan header di awal untuk input/output dan untuk memanipulasi string, lalu mendefinisikan sebuah data baru, lalu di seting nama maksimal 50 karakter, usia menyimpan usia menggunakan interger lalu kelas untuk menyipan kelas maksimal 10 karakter, lalu nilai untuk menyimpan nilai dengan variabel interger ditutup }siswa untuk akhir struktur pertama. masuk ke blok kode itama disini dibuat variabel bernama siswa, lalu menggunkan fungsi strcpy untuk menyalin string “agustino” ke dalam siswa.nama, begitujuga siswa.usia “21” mengisi 21 ke variabrl usia dalam struktur siswa, 2ia24 ke dalam kelas dan 95 ke nilai.lalu akhirnya akan di cetak nama usia kelas nilai.return akan mengakhiri kode. output",7fa3c4a70b566241db172aff3cf9ec6913417da09764eca710b9d1db75c31ca1,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffa56fb68f7890d971ac,Ahmad Yazid Ilmi_50423091_2IA24_LA.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:49.131Z,"logika #include <stdio.h>: menginklusikan header file stdio.h yang berisi fungsi-fungsi untuk input/output standar seperti printf dan scanf.#include <string.h>: menginklusikan header file string.h yang berisi fungsi-fungsi untuk manipulasi string seperti strcpy, strcat, dan lainnya. typedef struct { ... } komik; adalah deklarasi sebuah struktur bernama komik yang terdiri dari dua anggota berupa array karakter: judul (maksimum 50 karakter) untuk menyimpan judul komik dan penulis (maksimum 30 karakter) untuk menyimpan nama penulis. void cetak(komik komik): ini adalah deklarasi fungsi. void berarti fungsi ini tidak mengembalikan nilai apapun. cetak adalah nama fungsi, dan komik komik menunjukkan bahwa fungsi ini menerima satu argumen (data masukan) yang bertipe komik. printf(""judul: %s\n"", komik.judul);: perintah ini digunakan untuk mencetak teks ke layar. %s adalah placeholder untuk string, yang akan digantikan oleh nilai dari komik.judul. jadi, kalimat ""judul: "" akan diikuti oleh judul komik yang sesuai. printf(""penulis: %s\n"", komik.penulis);: sama seperti di atas, tapi ini yang dicetak adalah nama penulis komik. int main(): ini adalah awal dari setiap program c. semua instruksi akan dimulai dari sini. lalu komik komik1 = {""naruto"", ""masashi kishimoto""};: kita membuat sebuah data komik baru bernama komik1 dan langsung mengisi informasinya. cetak(komik1);: kita meminta komputer untuk menjalankan fungsi cetak dengan memberikan data komik1 sebagai input. fungsi cetak ini akan menampilkan informasi komik ke layar. dan return 0;: ini menandakan bahwa program sudah selesai dan tidak ada kesalahan. output",d5b46584245120350765a466e2bea4586718f2ac6f4bc16154ae140d1ea87572,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffa86fb68f7890d971ad,LA1_Ali Mukodessait_50423122.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:52.110Z,"logika program ini merupakan implementasi sistem manajemen perpustakaan sederhana dalam c, yang menangani entitas seperti buku, anggota, dan peminjaman. berikut penjelasan logika utama dari program ini: 1. definisi struktur data • book: menyimpan data buku yang mencakup isbn, judul buku, penulis, tahun penerbitan, dan jumlah salinan yang tersedia di perpustakaan. • // definisi record buku • typedef struct { • char isbn[20]; • char title[100]; • char author[100]; • int year; • int availablecopies; • } book; • member: menyimpan data anggota perpustakaan. masing-masing anggota memiliki id, nama, alamat, daftar isbn buku yang dipinjam (maksimal 5 buku), dan jumlah buku yang dipinjam saat ini. • // definisi record anggota • typedef struct { • int memberid; • char name[100]; • char address[200]; • char borrowedbooks[5][20]; // simpan isbn buku yang dipinjam • int borrowedcount; • } member; • loan: menyimpan informasi tentang peminjaman buku, termasuk id peminjaman, id anggota, isbn buku, tanggal peminjaman, dan tanggal pengembalian. • // definisi record peminjaman • typedef struct { • int loanid; • int memberid; • char isbn[20]; • char borrowdate[11]; // format tanggal: dd-mm-yyyy • char returndate[11]; • } loan; 2. fungsi untuk menampilkan informasi program menyediakan tiga fungsi untuk menampilkan data masing-masing entitas: • displaybook(book book): menampilkan informasi sebuah buku. • // fungsi untuk menampilkan informasi buku • void displaybook(book book) { • printf(""isbn: %s\n"", book.isbn); • printf(""title: %s\n"", book.title); • printf(""author: %s\n"", book.author); • printf(""year: %d\n"", book.year); • printf(""available copies: %d\n"", book.availablecopies); • printf("" \n""); • } • displaymember(member member): menampilkan informasi seorang anggota, termasuk buku yang sedang dipinjam. • // fungsi untuk menampilkan informasi anggota • void displaymember(member member) { • printf(""member id: %d\n"", member.memberid); • printf(""name: %s\n"", member.name); • printf(""address: %s\n"", member.address); • printf(""borrowed books: %d\n"", member.borrowedcount); • for (int i = 0; i < member.borrowedcount; i++) { • printf("" - %s\n"", member.borrowedbooks[i]); • } • printf("" \n""); • } • displayloan(loan loan): menampilkan informasi peminjaman buku. jika buku belum dikembalikan, maka ditampilkan teks ""not returned"". // fungsi untuk menampilkan informasi peminjaman void displayloan(loan loan) { printf(""loan id: %d\n"", loan.loanid); printf(""member id: %d\n"", loan.memberid); printf(""isbn: %s\n"", loan.isbn); printf(""borrow date: %s\n"", loan.borrowdate); printf(""return date: %s\n"", loan.returndate[0] ? loan.returndate : ""not returned""); • printf("" \n""); • } 3. main program pada fungsi main(), dilakukan inisialisasi array buku, anggota, dan peminjaman. lalu, data- data tersebut ditampilkan dengan menggunakan fungsi-fungsi yang sudah didefinisikan sebelumnya. • inisialisasi buku: tiga buku disimpan dalam array books. setiap buku berisi informasi tentang isbn, judul, penulis, tahun terbit, dan jumlah salinan yang tersedia. • // array buku yang ada di perpustakaan • book books[3] = { • {""978-1234567890"", ""pemrograman untuk pemula"", ""andi s."", 2020, 10}, • {""978-9876543210"", ""data structures and algorithms"", ""jane d."", 2018, 5}, • {""978-2233445566"", ""introduction to c programming"", ""john c."", 2021, 3} • }; • inisialisasi anggota: dua anggota disimpan dalam array members. salah satu anggota telah meminjam satu buku, dan informasi isbn buku tersebut dicatat dalam borrowedbooks. • // array anggota yang terdaftar • member members[2] = { • {1, ""ali mukodessait"", ""jalan doang jadian kaga no. 1"", {""978-1234567890""}, 1}, • {2, ""mauliza syafira"", ""jalan pahlawan no. 5"", {}, 0} • }; • inisialisasi peminjaman: dua peminjaman disimpan dalam array loans. peminjaman pertama memiliki tanggal pengembalian, sedangkan yang kedua belum dikembalikan. • // array peminjaman • loan loans[2] = { • {1001, 1, ""978-1234567890"", ""15-10-2024"", ""22-10-2024""}, • {1002, 2, ""978-9876543210"", ""16-10-2024"", """"} • }; • menampilkan data: o buku: semua buku di books ditampilkan dengan menggunakan fungsi displaybook(). o anggota: semua anggota di members ditampilkan dengan menggunakan fungsi displaymember(). o peminjaman: semua peminjaman di loans ditampilkan dengan menggunakan fungsi displayloan(). • // menampilkan semua buku • printf(""=== buku yang tersedia di perpustakaan ===\n""); • for (int i = 0; i < 3; i++) { • displaybook(books[i]); • } • • // menampilkan semua anggota • printf(""\n=== anggota yang terdaftar di perpustakaan ===\n""); • for (int i = 0; i < 2; i++) { • displaymember(members[i]); • } • • // menampilkan semua peminjaman • printf(""\n=== peminjaman buku ===\n""); • for (int i = 0; i < 2; i++) { • displayloan(loans[i]); • } • • return 0; • } kesimpulan: program ini menampilkan daftar buku yang tersedia, anggota yang terdaftar, dan peminjaman buku yang sedang berlangsung di perpustakaan. setiap informasi ditampilkan dengan menggunakan fungsi yang sesuai, yang memudahkan proses pemanggilan dan penanganan data. output",d0df1910b0de1dc8c5b88a90522d26ea737ed4743f398ff0c964c6d8dbc64229,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffa86fb68f7890d971ae,Angga Rizki Nugraha_50423181_2IA24_LA1.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:52.466Z,"logika : pada pertemuan pertama kelas struktur data, saya membuat program sederhana dengan menggunakan bahasa pemrograman c++ pada visual studio code, ada bagian awal kode, terdapat tiga pernyataan #include, yaitu : 1. #include <stdio.h> digunakan untuk memasukkan pustaka standar input-output c, yang menyediakan fungsi seperti printf dan scanf. 2. #include <string.h> pustaka ini digunakan untuk menangani operasi string, meskipun dalam kode ini tidak ada fungsi yang secara eksplisit menggunakan fungsi dari pustaka ini. 3. #include <stdlib.h> pustaka ini diperlukan untuk fungsi-fungsi umum dalam c, seperti alokasi memori atau exit, meskipun tidak digunakan secara langsung. selanjutnya, ada definisi #define yang mendeklarasikan tiga konstanta, yaitu max_buku, max_anggota, dan max_pinjaman, masing-masing bernilai 100. ini berarti perpustakaan hanya dapat menampung maksimal 100 buku, 100 anggota, dan 100 transaksi peminjaman. kemudian, terdapat tiga struktur data (struct) yang didefinisikan: 1. buku: berisi informasi tentang buku seperti judul, pengarang, tahun terbit, dan kategori. 2. anggota: berisi data anggota seperti nama, alamat, nomor anggota, dan tanggal pendaftaran. 3. peminjaman: menyimpan informasi peminjaman seperti nomor transaksi, nomor anggota, judul buku yang dipinjam, tanggal pinjam, dan tanggal kembali. ada juga tiga variabel integer global (jumlahbuku, jumlahanggota, jumlahpeminjaman) yang berfungsi untuk melacak jumlah buku, anggota, dan peminjaman yang terdaftar di perpustakaan. selanjutnya, kode terdiri dari beberapa fungsi utama: 1. tambahbuku(): fungsi ini digunakan untuk menambahkan buku ke daftar buku perpustakaan. jika jumlah buku belum mencapai batas maksimum (max_buku), user diminta untuk memasukkan informasi buku (judul, pengarang, tahun terbit, dan kategori), yang kemudian disimpan dalam array daftarbuku. 2. tampilkandaftarbuku(): fungsi ini menampilkan seluruh buku yang terdaftar di perpustakaan. informasi yang ditampilkan meliputi nomor buku, judul, pengarang, tahun terbit, dan kategori. 3. tambahanggota(): fungsi ini menambahkan anggota baru ke perpustakaan. user diminta memasukkan informasi anggota (nama, alamat, tanggal pendaftaran), dan secara otomatis, nomor anggota ditentukan berdasarkan jumlah anggota yang sudah ada. 4. pinjambuku(): fungsi ini memungkinkan anggota untuk meminjam buku. user diminta memasukkan nomor anggota, judul buku, tanggal pinjam, dan tanggal kembali. informasi ini kemudian disimpan dalam array daftarpeminjaman, dengan nomor transaksi yang dihasilkan secara otomatis. 5. tampilkandaftarpeminjaman(): fungsi ini menampilkan daftar semua peminjaman buku yang telah terjadi di perpustakaan, termasuk nomor transaksi, nomor anggota, judul buku, tanggal pinjam, dan tanggal kembali. pada fungsi main(), terdapat loop do-while yang menampilkan menu kepada user, memungkinkan mereka untuk memilih salah satu opsi yang telah disebutkan di atas (menambah buku, menambah anggota, meminjam buku, menampilkan daftar buku, dan menampilkan daftar peminjaman). pilihan yang dimasukkan oleh user diproses dengan switch-case, dan program terus berjalan hingga user memilih opsi untuk keluar (pilihan 0). output :",f6e6f2b74825d38daee608f572973069a0b74e243247d2e912056c1f84b6453e,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffa86fb68f7890d971af,Ardi Lowes Fernanda_2IA24_LA1.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:52.989Z,"logika program membuat logika dari kasus array, record, dan oop pada c. langkah pertama #include <stdio.h> digunakan untuk fungsi input/output standar seperti printf dan fgets. #include <string.h> digunakan untuk fungsi yang berkaitan dengan string, seperti strlen() untuk menghitung panjang string dan strcmp() untuk membandingkan string. max_books menunjukkan bahwa program dapat menangani hingga 100 buku. max_members menunjukkan bahwa program dapat menangani hingga 50 anggota perpustakaan. max_transactions menunjukkan bahwa program dapat menangani hingga 200 transaksi peminjaman atau pengembalian buku. typedef struct ini adalah cara untuk mendefinisikan sebuah tipe data baru. kata kunci typedef digunakan untuk memberi nama alias pada tipe data yang baru didefinisikan. char judul[100];: ini mendeklarasikan sebuah array karakter dengan panjang maksimum 100 karakter. array ini digunakan untuk menyimpan judul buku. char penulis[100];: sama seperti judul, ini juga merupakan array karakter untuk menyimpan nama penulis buku. int stok;: ini adalah sebuah variabel bertipe integer yang digunakan untuk menyimpan jumlah stok buku yang tersedia. char nama[100];: ini adalah array karakter dengan panjang maksimal 100 karakter. array ini digunakan untuk menyimpan nama anggota. batasan 100 karakter ini berarti kita dapat menyimpan nama dengan panjang maksimal 99 karakter (karena karakter ke-100 biasanya digunakan untuk karakter null '\0' yang menandai akhir string). char id[10];: ini juga merupakan array karakter, namun dengan panjang maksimal 10 karakter. biasanya digunakan untuk menyimpan id anggota yang unik, seperti nomor anggota atau username. char telepon[15];: ini adalah array karakter lagi, kali ini dengan panjang 15 karakter. field ini digunakan untuk menyimpan nomor telepon anggota. char id_transaksi[10];: ini adalah array karakter dengan panjang maksimal 10 karakter. field ini biasanya digunakan untuk menyimpan id unik untuk setiap transaksi peminjaman. char id_anggota[10];: ini juga merupakan array karakter dengan panjang maksimal 10 karakter. field ini digunakan untuk menyimpan id anggota yang melakukan peminjaman. char judul_buku[100];: ini adalah array karakter dengan panjang maksimal 100 karakter. field ini digunakan untuk menyimpan judul buku yang dipinjam. books[max_books]: array ini digunakan untuk menyimpan data dari beberapa buku. max_books adalah konstanta yang mendefinisikan kapasitas maksimum array ini. members[max_members]: array ini digunakan untuk menyimpan data dari beberapa anggota perpustakaan. max_members adalah konstanta yang mendefinisikan kapasitas maksimum array ini. transactions[max_transactions]: array ini digunakan untuk menyimpan data dari beberapa transaksi peminjaman. max_transactions adalah konstanta yang mendefinisikan kapasitas maksimum array ini. book_count: variabel ini digunakan untuk melacak jumlah buku yang sebenarnya ada dalam array books, tidak peduli berapa besar kapasitas maksimum array tersebut. member_count: variabel ini digunakan untuk melacak jumlah anggota yang sebenarnya ada dalam array members. transaction_count: variabel ini digunakan untuk melacak jumlah transaksi yang sebenarnya ada dalam array transactions. addbook: nama fungsi yang jelas menunjukkan tujuan fungsinya, yaitu untuk menambahkan buku. const char* judul, const char* penulis, int stok: parameter yang diterima fungsi: strcpy: fungsi strcpy digunakan untuk menyalin string judul dan penulis ke dalam elemen array books pada indeks book_count. books[book_count].stok = stok: nilai stok yang diberikan sebagai parameter akan disimpan dalam field stok dari objek buku yang baru ditambahkan. book_count++: nilai book_count ditingkatkan untuk menandai bahwa sebuah buku baru telah ditambahkan. addmember: nama fungsi yang jelas menunjukkan tujuan fungsinya, yaitu untuk menambahkan anggota. const char* nama, const char* id, const char* telepon: parameter yang diterima fungsi: strcpy: fungsi strcpy digunakan untuk menyalin string nama, id, dan telepon ke dalam elemen array members pada indeks member_count. member_count++: nilai member_count ditingkatkan untuk menandai bahwa seorang anggota baru telah ditambahkan. int main(): ini adalah titik awal eksekusi program. semua kode dalam fungsi main() akan dijalankan secara berurutan. addbook(""clean code"", ""robert c. martin"", 5); addbook(""the pragmatic programmer"", ""andrew hunt"", 3); kedua baris kode di atas memanggil fungsi addbook untuk menambahkan dua buku baru ke dalam sistem perpustakaan. addmember(""rina"", ""a001"", ""08123456789"");addmember(""budi"", ""a002"", ""08123456788""); sama seperti sebelumnya, kode ini memanggil fungsi addmember untuk menambahkan dua anggota baru. borrowbook(""t1001"", ""a001"", ""clean code"");borrowbook(""t1002"", ""a002"", ""the pragmatic programmer""); kedua baris kode ini memanggil fungsi borrowbook) untuk mencatat dua transaksi peminjaman. output program ketika di run :",fcd36dde89536c17a957f7e85146ca2d7269221dd84220322a772995e5ca8e62,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffa96fb68f7890d971b0,Arkan Odessamahendra_50423210_2IA24_LA1.docx,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:53.098Z,"logika  struct kamar mendefinisikan struktur data untuk menyimpan informasi mengenai kamar hotel. struct ini memiliki tiga anggota: nomor_kamar untuk menyimpan nomor kamar sebagai integer, tipe_kamar untuk menyimpan tipe kamar sebagai string (dalam hal ini array dari char), dan harga_per_malam yang menyimpan harga per malam kamar dalam bentuk float.  struct tamu digunakan untuk menyimpan informasi tentang tamu hotel. struct ini memiliki tiga anggota: id_tamu untuk menyimpan id tamu sebagai integer, nama untuk menyimpan nama tamu sebagai string (array char), dan nomor_telepon untuk menyimpan nomor telepon tamu sebagai string.  struct reservasi digunakan untuk menyimpan informasi reservasi yang dibuat oleh tamu. struct ini terdiri dari lima anggota: id_reservasi sebagai integer, id_tamu untuk referensi ke struct tamu, nomor_kamar untuk referensi ke struct kamar, serta tanggal_checkin dan tanggal_checkout yang merupakan string yang menyimpan tanggal check-in dan check-out.  fungsi ini menerima parameter berupa struct kamar dan digunakan untuk menampilkan informasi kamar, yaitu nomor kamar, tipe kamar, dan harga per malam. output ditampilkan menggunakan printf.  fungsi ini menerima parameter berupa struct tamu dan digunakan untuk menampilkan detail tamu seperti id tamu, nama, dan nomor telepon.  fungsi ini menerima parameter berupa struct reservasi, tamu, dan kamar. fungsinya adalah untuk menampilkan informasi reservasi lengkap, termasuk id reservasi, nama tamu, nomor kamar, tanggal check-in, dan tanggal check-out. fungsi ini menggabungkan data tamu dan kamar yang relevan untuk reservasi tersebut.  pada fungsi utama ini, pertama-tama dibuat array yang menyimpan daftar dua kamar, dua tamu, dan dua reservasi. setiap array berisi data yang diinisialisasi untuk masing-masing struct. setelah data diinisialisasi, program akan mencetak informasi mengenai semua kamar, tamu, dan reservasi menggunakan loop for. dalam loop reservasi, program akan mencari tamu dan kamar yang terkait dengan reservasi berdasarkan id tamu dan nomor kamar, kemudian memanggil fungsi tampilkan_reservasi untuk menampilkan detailnya.                             output",2d9325549b8884e2f32fd72f2d8b845bd6bbd1934c1ab11e34929e401014811a,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffa96fb68f7890d971b1,Axl Regan Yohande_50423237_2IA24_LA SD (1).pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:53.439Z,"logika 1. deklarasi struct (record): pada bagian ini, dideklarasikan sebuah struct bernama alattulis yang akan digunakan untuk merepresentasikan data alat tulis dengan beberapa properti/atribut. struktur ini memiliki beberapa field: • nama: string (array karakter) dengan panjang maksimal 50 karakter untuk menyimpan nama alat tulis. • tipe: string (array karakter) dengan panjang maksimal 30 karakter untuk menyimpan tipe alat tulis. • stok: variabel integer untuk menyimpan jumlah stok alat tulis. • harga_per_unit: variabel integer untuk menyimpan harga per unit dari alat tulis tersebut. • kode_barang: string (array karakter) dengan panjang maksimal 10 karakter untuk menyimpan kode barang alat tulis. 2. fungsi main(): fungsi main() berisi logika utama dari program ini. 2.1. deklarasi array untuk menyimpan data alat tulis: di sini, dibuat sebuah array dari alattulis yang berisi 3 alat tulis. array ini dinamai daftar_alat_tulis, dan dapat menampung 3 item (indeks dari 0 sampai 2): c salin kode struct alattulis daftar_alat_tulis[3]; 2.2. inisialisasi data alat tulis: selanjutnya, dilakukan inisialisasi data alat tulis secara manual. setiap elemen dari array daftar_alat_tulis diisi dengan data alat tulis, termasuk nama, tipe, stok, harga per unit, dan kode barang. • alat tulis pertama (pulpen pilot gel): o nama: pulpen pilot gel o tipe: pulpen gel o stok: 250 o harga per unit: rp7.000 o kode barang: atk001 • alat tulis kedua (buku tulis 38 a5): o nama: buku tulis 38 a5 o tipe: buku catatan o stok: 80 o harga per unit: rp18.000 o kode barang: atk002 • alat tulis ketiga (penghapus faber-castell): pada elemen indeks 2, diisi data: o nama: penghapus faber-castell o tipe: penghapus o stok: 400 o harga per unit: rp5.000 o kode barang: atk003 2.3. menampilkan daftar alat tulis: setelah inisialisasi selesai, program akan menampilkan data alat tulis dengan melakukan iterasi (pengulangan) menggunakan loop for. loop ini berjalan sebanyak 3 kali (sesuai jumlah elemen dalam array daftar_alat_tulis), dan setiap iterasi mencetak informasi alat tulis: output dari bagian ini akan berupa daftar alat tulis, mencetak informasi nama, tipe, jumlah stok, harga per unit, dan kode barang. 2.4. menambah dan mengurangi stok: setelah menampilkan daftar alat tulis, program akan melakukan operasi penambahan dan pengurangan stok untuk alat tulis tertentu. • menambah stok pulpen pilot gel sebanyak 30: program menambah stok alat tulis pada elemen indeks 0 (pulpen pilot gel) sebanyak 30 unit dan mencetak stok terbaru setelah penambahan: jadi, stok pulpen pilot gel awalnya adalah 250, dan setelah ditambah 30, stoknya menjadi 280. • mengurangi stok buku tulis 38 sebanyak 20: program mengurangi stok alat tulis pada elemen indeks 1 (buku tulis 38 a5) sebanyak 20 unit dan mencetak stok terbaru setelah pengurangan: jadi, stok buku tulis 38 a5 awalnya adalah 80, dan setelah dikurangi 20, stoknya menjadi 60. 3. akhir program: setelah semua operasi selesai, program mengembalikan nilai 0 sebagai penanda bahwa program berjalan dengan sukses: return 0; output",5048adf6ee27a0899381d010c1aabf0d79fd7871d3d7f48ba82f4f2c1bd9c749,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffab6fb68f7890d971b2,Fadhiil Wibysono_50423423_2IA24_LA1.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:55.474Z,"logika #include <stdio.h> digunakan untuk memasukkan pustaka standar c yang berisi fungsi-fungsi terkait input dan output, seperti printf dan scanf. ini diperlukan untuk menampilkan informasi atau menerima input dari pengguna. #include <string.h> digunakan untuk memasukkan pustaka string dalam bahasa c yang menyediakan fungsi-fungsi untuk manipulasi string, seperti strcpy, strlen, dan lainnya. ini berguna untuk bekerja dengan string seperti menyalin atau membandingkan nilai-nilai string. struct mobil ini mendefinisikan sebuah struct atau struktur bernama mobil yang digunakan untuk merepresentasikan data mobil. struktur ini menggabungkan beberapa variabel yang berkaitan dengan mobil dalam satu unit data. char merk[50];array karakter yang dapat menampung hingga 50 karakter, digunakan untuk menyimpan nama merk mobil. dalam c, string diwakili oleh array karakter, dan merk adalah atribut dari mobil yang menyimpan nama merk. char model[50]; array karakter yang menyimpan nama model mobil. seperti merk, ini adalah string yang dapat menampung hingga 50 karakter. int tahun; sebuah integer yang menyimpan tahun pembuatan mobil. void setmerk(struct mobil *m, const char *merk) {: fungsi ini digunakan untuk mengatur merk mobil. fungsi menerima dua parameter: pointer ke struct mobil (*m) dan pointer ke string merk. strcpy(m->merk, merk); menyalin nilai string merk ke dalam atribut 4 merk pada struct mobil yang ditunjuk oleh pointer m. void setmodel(struct mobil *m, const char *model) { : fungsi ini mengatur atribut model dalam struct mobil. menerima dua parameter: pointer ke struct mobil dan string model. strcpy(m->model, model); menyalin string model ke atribut model dalam struct mobil. void settahun(struct mobil *m, int tahun) { fungsi `settahun` mengatur nilai tahun produksi mobil dengan menerima dua parameter: pointer ke `struct mobil` dan sebuah integer `tahun`. pointer ini memungkinkan akses langsung ke objek asli di memori, sehingga perubahan pada atribut `tahun` berlaku langsung pada data asli. operator `->` digunakan untuk mengakses atribut `tahun` dan meng-assign nilai dari parameter `tahun` ke dalamnya. m- >tahun = tahun; pada m->tahun menggunakan operator panah (->) untuk mengakses atribut tahun dari struktur mobil yang ditunjuk oleh pointer m. = tahun menetapkan nilai dari parameter tahun ke atribut tahun dari struktur tersebut. void printmobil(struct mobil m) mendefinisikan fungsi yang bernama printmobil, di mana tipe kembalian adalah void, menunjukkan bahwa fungsi ini tidak mengembalikan nilai. parameter struct mobil m berarti fungsi ini menerima sebuah objek mobil sebagai input, dan m merupakan nama variabel lokal yang merepresentasikan objek tersebut di dalam fungsi. printf(""merk: %s\n"", m.merk); menggunakan fungsi printf untuk mencetak merk mobil. %s adalah format spesifier untuk string, yang diisi dengan nilai dari m.merk, sehingga saat fungsi ini dipanggil, akan mencetak merk mobil yang terdapat dalam objek mobil. 5 printf(""model: %s\n"", m.model); berfungsi dengan cara yang sama, mencetak model mobil dengan menggunakan format spesifier %s untuk string, mengakses atribut model dari objek m. printf(""tahun: %d\n"", m.tahun); mencetak tahun mobil. di sini, %d adalah format spesifier untuk integer, yang mengambil nilai dari m.tahun. dengan demikian, fungsi printmobil secara keseluruhan menyediakan cara yang terstruktur untuk menampilkan informasi tentang objek mobil, mencetak merk, model, dan tahun mobil ke konsol. int main(), mendefinisikan fungsi utama dengan tipe kembalian int, yang berarti fungsi ini akan mengembalikan nilai integer saat selesai dieksekusi. ini penting untuk menunjukkan status akhir dari program kepada sistem operasi, di mana 0 biasanya menandakan keberhasilan. struct mobil mobillist[3]; dideklarasikan sebuah array bernama mobillist yang dapat menyimpan tiga elemen bertipe struct mobil. dengan ini, program menyiapkan tempat untuk menyimpan informasi tentang tiga mobil, termasuk merk, model, dan tahun mereka. array ini memungkinkan pengelolaan data beberapa mobil secara terstruktur. setmerk(&mobillist[0], ""toyota"");fungsi setmerk dipanggil untuk menetapkan merk mobil pertama dalam array mobillist. dengan menggunakan operator alamat (&), alamat dari elemen pertama mobillist[0] dikirimkan ke fungsi, yang memungkinkan fungsi untuk mengakses dan memodifikasi nilai atribut merk dari struct mobil yang bersangkutan, sehingga diatur menjadi ""toyota"". setmodel(&mobillist[0], ""camry""); fungsi setmodel dipanggil untuk mengisi atribut model dari mobil pertama. fungsi ini juga menerima alamat dari elemen pertama dalam array, mengubah nilai model menjadi ""camry"". 6 settahun(&mobillist[0], 2020); fungsi settahun dipanggil untuk mengatur tahun dari mobil pertama menjadi 2020. dengan cara yang sama, alamat dari elemen pertama dikirimkan ke fungsi, yang kemudian memperbarui nilai atribut tahun dalam struct mobil tersebut. secara keseluruhan, ketiga baris ini secara bertahap mengisi informasi untuk mobil pertama dalam array mobillist. setmerk(&mobillist[1], ""honda""); fungsi setmerk dipanggil untuk mengatur merk dari mobil kedua dalam array mobillist. dengan mengirimkan alamat dari elemen kedua (mobillist[1]) menggunakan operator alamat (&), fungsi dapat mengakses dan mengubah atribut merk pada struct mobil tersebut, sehingga diatur menjadi ""honda"". setmodel(&mobillist[1], ""civic""); fungsi setmodel digunakan untuk menetapkan model dari mobil kedua. fungsi ini juga menerima alamat dari elemen kedua dalam array, yang memungkinkan fungsi untuk mengubah nilai atribut model menjadi ""civic"". settahun(&mobillist[1], 2019); fungsi settahun dipanggil untuk mengatur tahun mobil kedua menjadi 2019. sama seperti sebelumnya, alamat dari elemen kedua dikirimkan ke fungsi, yang kemudian memperbarui nilai atribut tahun dalam struct mobil. secara keseluruhan, ketiga baris ini secara efektif mengisi informasi untuk mobil kedua dalam array mobillist. setmerk(&mobillist[2], ""ford""); fungsi setmerk dipanggil untuk mengatur merk dari mobil ketiga dalam array mobillist. dengan menggunakan operator alamat (&), alamat dari elemen ketiga (mobillist[2]) dikirimkan ke fungsi, memungkinkan akses dan modifikasi atribut merk pada struct mobil yang bersangkutan, sehingga diatur menjadi ""ford"". setmodel(&mobillist[2], ""mustang""); fungsi setmodel digunakan untuk menetapkan model dari mobil ketiga. sama seperti sebelumnya, alamat dari elemen ketiga dalam array diberikan kepada fungsi, yang memungkinkan fungsi untuk mengubah nilai atribut model menjadi ""mustang"". 7 settahun(&mobillist[2], 2022); fungsi settahun dipanggil untuk mengatur tahun mobil ketiga menjadi 2022. dengan cara yang sama, alamat dari elemen ketiga dikirimkan ke fungsi, yang kemudian memperbarui nilai atribut tahun dalam struct mobil. ketiga baris ini bersama-sama mengisi informasi lengkap untuk mobil ketiga dalam array mobillist. for (int i = 0; i < 3; i++) sebuah loop for dideklarasikan untuk mengulangi eksekusi kode di dalamnya sebanyak tiga kali, dengan variabel i sebagai indeks yang dimulai dari 0 dan meningkat satu setiap iterasi hingga mencapai 2 (total 3 iterasi). printf(""\ndata mobil ke-%d:\n"", i+1); fungsi printf digunakan untuk mencetak judul yang menunjukkan data mobil yang sedang dicetak. menggunakan format spesifier %d, nilai i+1 ditampilkan, sehingga hasilnya adalah ""data mobil ke-1"", ""data mobil ke-2"", dan ""data mobil ke-3"" pada setiap iterasi. printmobil(mobillist[i]); fungsi printmobil dipanggil untuk mencetak informasi lengkap dari mobil yang sesuai dengan indeks i dalam array mobillist. dengan mengirimkan elemen mobillist[i], fungsi ini akan mengakses dan menampilkan merk, model, dan tahun mobil yang telah diisi sebelumnya. return 0; fungsi main mengakhiri eksekusinya dan mengembalikan nilai 0 ke sistem operasi, menandakan bahwa program telah berjalan dengan sukses tanpa kesalahan. secara keseluruhan, bagian ini dari kode bertanggung jawab untuk mencetak informasi dari semua mobil yang telah diisi sebelumnya ke layar. 8 output 9",dac2780fe058aaf525b76637961a6f7bec096b4dd2b5de8fce26a4bdb9faa74f,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffab6fb68f7890d971b3,Farrel Akmal Akhsanudin_50423463_2IA24_LA1.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:55.935Z,"logika struct satelitcuaca digunakan untuk menyimpan informasi mengenai satelit cuaca. struct ini memiliki beberapa atribut penting seperti int id yang berfungsi sebagai id unik untuk satelit, char nama[50] yang menyimpan nama satelit, char wilayahpemantauan[50] untuk menyimpan wilayah yang dipantau oleh satelit, char status[10] yang berisi status operasional satelit (misalnya: aktif, nonaktif), dan char tanggalpeluncuran[15] yang berisi tanggal peluncuran satelit. struct datacuaca digunakan untuk menyimpan data pengukuran cuaca yang diambil oleh satelit. struct ini memiliki beberapa atribut seperti int iddata yang berfungsi sebagai id unik untuk setiap data cuaca, float suhu untuk menyimpan suhu udara dalam derajat celcius, float kelembapan untuk menyimpan persentase kelembapan udara, float tekananudara untuk menyimpan tekanan udara dalam hpa, float kecepatanangin untuk menyimpan kecepatan angin dalam km/jam, dan **char waktupengambilan[20] yang berfungsi untuk menyimpan waktu pengambilan data cuaca. struct riwayatpemeliharaan digunakan untuk menyimpan catatan tentang pemeliharaan satelit. struct ini memiliki beberapa atribut seperti int idpemeliharaan yang berfungsi sebagai id unik untuk setiap riwayat pemeliharaan, int idsatelit untuk menyimpan id satelit yang dipelihara, char tanggalpemeliharaan[15] yang berisi tanggal pemeliharaan satelit, char deskripsi[100] untuk menyimpan deskripsi pemeliharaan yang dilakukan, dan char 3 teknisi[50] yang menyimpan nama teknisi yang bertanggung jawab. fungsi tampilkanstatussatelit digunakan untuk menampilkan informasi mengenai sebuah satelit. fungsi ini menerima sebuah parameter berupa struct satelitcuaca dan mencetak informasi terkait satelit tersebut. informasi yang ditampilkan meliputi id satelit (dengan menggunakan satelit.id), nama satelit (satelit.nama), wilayah pemantauan (satelit.wilayahpemantauan), status operasional satelit (satelit.status), serta tanggal peluncuran satelit (satelit.tanggalpeluncuran). fungsi tampilkandatacuaca digunakan untuk menerima struct datacuaca dan mencetak data cuaca yang telah diambil. fungsi ini mencetak beberapa informasi, yaitu id data cuaca (menggunakan data.iddata), suhu dalam derajat celcius (data.suhu), kelembapan dalam persentase (data.kelembapan), tekanan udara dalam hpa (data.tekananudara), kecepatan angin dalam km/jam (data.kecepatanangin), dan waktu pengambilan data cuaca (data.waktupengambilan). fungsi tampilkanriwayatpemeliharaan digunakan untuk menerima struct riwayatpemeliharaan dan menampilkan catatan pemeliharaan untuk satelit. fungsi ini mencetak beberapa informasi, yaitu id pemeliharaan (menggunakan riwayat.idpemeliharaan), id satelit (riwayat.idsatelit), tanggal pemeliharaan (riwayat.tanggalpemeliharaan), deskripsi pemeliharaan (riwayat.deskripsi), dan nama teknisi yang bertanggung jawab (riwayat.teknisi). fungsi `main` berfungsi sebagai titik awal program. dalam fungsi ini, terdapat array yang 4 digunakan untuk menyimpan daftar satelit cuaca. dua buah satelit cuaca dimasukkan ke dalam array tersebut, yang memiliki fungsi untuk menyimpan informasi satelit. informasi yang disimpan mencakup id satelit, nama satelit, wilayah pemantauan, status operasional, dan tanggal peluncuran. array tersebut diisi dengan dua satelit: satelit alpha yang berada di wilayah a dan dalam status aktif, serta satelit beta yang berada di wilayah b dan juga dalam status aktif. terdapat array yang digunakan untuk menyimpan data cuaca. dua buah data cuaca disimpan dalam array tersebut, yang memiliki fungsi untuk menyimpan informasi seperti suhu, kelembapan, tekanan udara, kecepatan angin, dan waktu pengambilan data. data yang disimpan mencakup data cuaca dengan id 101 yang memiliki suhu 30.5 derajat celcius, kelembapan 65.2%, tekanan udara 1013.1 hpa, kecepatan angin 12.4 km/jam, dan waktu pengambilan pada ""10-10-2024 12:00"". selain itu, terdapat juga data cuaca dengan id 102 yang memiliki suhu 28.3 derajat celcius, kelembapan 72.1%, tekanan udara 1010.5 hpa, kecepatan angin 8.7 km/jam, dan waktu pengambilan pada ""10- 10-2024 14:00"". terdapat array yang digunakan untuk menyimpan riwayat pemeliharaan satelit. array ini memiliki fungsi untuk menyimpan riwayat pemeliharaan dari dua satelit. informasi yang disimpan mencakup id pemeliharaan, id satelit yang dipelihara, tanggal pemeliharaan, deskripsi pemeliharaan yang dilakukan, dan nama teknisi yang bertanggung jawab. data yang disimpan terdiri dari riwayat pemeliharaan dengan id 1001 untuk satelit dengan id 1 pada tanggal ""05-07-2024"", yang mencakup pemeriksaan rutin sistem navigasi oleh teknisi farrel akmal akhsanudin. selain itu, terdapat juga riwayat pemeliharaan dengan id 1002 untuk satelit dengan id 2 pada tanggal “10-08-2024”, yang meliputi penggantian baterai satelit oleh teknisi vladimir kodi. program menampilkan informasi mengenai satelit cuaca dan data cuaca yang telah disimpan. pertama, program mencetak judul ""=== informasi satelit cuaca ==="" dan menggunakan loop untuk iterasi melalui array satelit. untuk setiap elemen dalam array, 5 fungsi `tampilkanstatussatelit` dipanggil untuk menampilkan informasi masing-masing satelit. setelah itu, program mencetak judul ""=== data cuaca ==="" dan menggunakan loop yang sama untuk iterasi melalui array data cuaca. untuk setiap elemen dalam array, fungsi `tampilkandatacuaca` dipanggil untuk menampilkan informasi data cuaca yang telah diambil. dengan demikian, informasi mengenai kedua satelit dan data cuaca yang terkait dapat dilihat secara terpisah. program menampilkan riwayat pemeliharaan satelit. pertama, program mencetak judul ""=== riwayat pemeliharaan satelit ==="". selanjutnya, menggunakan loop, program iterasi melalui array `riwayatpemeliharaan`. untuk setiap elemen dalam array, fungsi `tampilkanriwayatpemeliharaan` dipanggil untuk menampilkan informasi terkait pemeliharaan masing-masing satelit. setelah semua informasi ditampilkan, program mengakhiri eksekusinya dengan pernyataan `return 0;`, yang menandakan bahwa program telah berjalan dengan sukses. dengan langkah ini, pengguna dapat melihat catatan pemeliharaan dari kedua satelit yang terdaftar. 6 output 7",63b9b45865ccc681d5d149b170022e60fec83f11c82ccbee9f3c3935dede9408,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffac6fb68f7890d971b4,Hafiz Surya Nugraha_50423551_2IA24.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:56.521Z,"logika program program ini dirancang menggunakan bahasa c untuk mengelola data kendaraan pada sebuah bengkel. program memanfaatkan struct untuk menyimpan informasi kendaraan, dan menyediakan fungsi-fungsi untuk menambah serta mengedit data kendaraan yang tersimpan. program ini dirancang agar dapat menyimpan hingga 100 kendaraan. inklusi header program menggunakan dua header utama, yaitu stdio.h dan string.h. header stdio.h digunakan untuk mendukung operasi input/output, seperti pencetakan data ke layar, sementara string.h digunakan untuk mendukung manipulasi data string, seperti menyalin string menggunakan fungsi strcpy. pendefinisian struct kendaraan struct kendaraan digunakan untuk menyimpan informasi mengenai kendaraan di bengkel. setiap kendaraan yang ditambahkan akan memiliki atribut merk, tipe, tahun produksi, serta deskripsi masalah. atribut-atribut ini disimpan dalam array dengan kapasitas yang telah ditentukan. pendefinisian variabel program mendefinisikan sebuah konstanta max_kendaraan dengan nilai 100, yang menunjukkan kapasitas maksimum kendaraan yang dapat disimpan. selain itu, sebuah array bengkel dideklarasikan dengan tipe data kendaraan untuk menampung data kendaraan. variabel totalkendaraan digunakan untuk melacak jumlah kendaraan yang telah terdaftar. fungsi tambahkendaraan fungsi tambahkendaraan digunakan untuk menambahkan data kendaraan baru. fungsi ini menerima parameter berupa merk, tipe, tahun, dan masalah kendaraan. pertama, fungsi akan memeriksa apakah jumlah kendaraan yang terdaftar sudah mencapai kapasitas maksimum. jika belum, fungsi akan menambahkan kendaraan baru ke dalam array bengkel, dan mengupdate jumlah kendaraan yang tersimpan. jika kapasitas penuh, pesan kesalahan akan ditampilkan. fungsi editkendaraan fungsi editkendaraan digunakan untuk memperbarui informasi kendaraan yang telah terdaftar. fungsi ini menerima parameter berupa indeks kendaraan yang ingin diubah, beserta informasi baru dari merk, tipe, tahun, dan masalah. sebelum melakukan pembaruan, fungsi akan memastikan bahwa indeks yang diberikan valid, yaitu berada dalam rentang jumlah kendaraan yang terdaftar. jika indeks valid, data kendaraan pada indeks tersebut akan diperbarui sesuai dengan informasi baru yang diterima. jika tidak valid, pesan kesalahan akan ditampilkan. program ini mampu mengelola data kendaraan dengan operasi penambahan dan pengeditan informasi. dengan kapasitas maksimum 100 kendaraan, program memastikan bahwa data yang dimasukkan dan diubah valid melalui pengecekan batas kapasitas dan validasi indeks kendaraan. fungsi hapuskendaraan(int index) fungsi ini dirancang untuk menghapus data kendaraan pada indeks tertentu dalam sebuah array (mungkin bernama bengkel). logika kerjanya sebagai berikut: 1. cek indeks: memastikan indeks yang diberikan valid (lebih besar sama dengan 0 dan kurang dari jumlah total kendaraan). 2. geser elemen: jika indeks valid, maka elemen-elemen setelah indeks yang dihapus akan digeser satu posisi ke kiri. ini dilakukan dengan menggunakan loop for. tujuannya adalah untuk ""menimpa"" data kendaraan yang dihapus dengan data kendaraan berikutnya. 3. kurangi jumlah kendaraan: setelah pergeseran selesai, jumlah total kendaraan dikurangi satu untuk merefleksikan penghapusan data. 4. pesan konfirmasi: program mencetak pesan konfirmasi apakah penghapusan berhasil atau tidak, tergantung dari validitas indeks. fungsi tampilkankendaraan() fungsi ini berfungsi untuk menampilkan seluruh data kendaraan yang tersimpan dalam array bengkel. logika kerjanya: 1. cek jumlah kendaraan: memeriksa apakah ada kendaraan yang tercatat. jika tidak ada, maka akan dicetak pesan bahwa tidak ada data. 2. iterasi dan tampilkan: jika ada kendaraan, maka program akan melakukan iterasi melalui seluruh elemen array bengkel dan mencetak informasi setiap kendaraan seperti merk, tipe, tahun, dan masalah. kode program ini mengelola data kendaraan dalam sebuah array. fungsi hapuskendaraan memungkinkan penghapusan data kendaraan secara efisien dengan menggeser elemen-elemen setelah data yang dihapus. fungsi tampilkankendaraan memberikan cara untuk melihat seluruh data kendaraan yang tersimpan. deklarasi variabel merk[50], tipe[50], masalah[100]: ini adalah array of characters (string) untuk menyimpan data merk, tipe, dan masalah kendaraan. panjang array menentukan jumlah karakter maksimum yang bisa disimpan. tahun, index: variabel integer untuk menyimpan tahun pembuatan kendaraan dan indeks untuk mengakses elemen dalam array. pilihan: variabel integer untuk menyimpan pilihan pengguna dari menu. looping menu utama do-while: struktur kontrol ini membuat program terus berjalan sampai pengguna memilih untuk keluar. ini memastikan pengguna dapat melakukan berbagai operasi berulang kali. printf: fungsi ini digunakan untuk menampilkan teks di layar, seperti judul program dan pilihan menu. scanf: fungsi ini digunakan untuk membaca input dari pengguna, yaitu pilihan menu yang akan dijalankan. switch-case switch-case: struktur kontrol ini digunakan untuk menjalankan blok kode yang berbeda berdasarkan nilai dari variabel pilihan. case 1: jika pengguna memilih opsi 1, program akan meminta input data kendaraan baru (merk, tipe, tahun, masalah) dan memanggil fungsi tambahkendaraan untuk menambahkan data tersebut ke dalam sistem. fungsi tambahkendaraan (yang tidak ditampilkan dalam kode ini) kemungkinan akan menambahkan data ke dalam sebuah struktur data seperti array atau struktur data lain yang lebih kompleks. case 2, 3, 4: kasus-kasus lain (edit kendaraan, hapus kendaraan, tampilkan semua kendaraan) belum diimplementasikan dalam kode yang diberikan. case 2: edit kendaraan ketika pengguna memilih opsi 2, program akan menjalankan kode berikut: 1. minta nomor kendaraan: program meminta pengguna untuk memasukkan nomor kendaraan yang ingin diedit. nomor kendaraan ini akan digunakan sebagai indeks untuk mencari data kendaraan yang bersangkutan dalam struktur data yang digunakan (misalnya, array). 2. minta data baru: program meminta pengguna untuk memasukkan data baru untuk kendaraan yang akan diedit, seperti merk, tipe, tahun, dan masalah. 3. panggil fungsi editkendaraan: data baru yang dimasukkan oleh pengguna kemudian dikirimkan ke fungsi editkendaraan. fungsi ini (yang tidak ditampilkan dalam kode ini) bertugas untuk memperbarui data kendaraan pada indeks yang sesuai dengan nomor kendaraan yang diberikan. logika fungsi editkendaraan (asumsi): 1. cari data kendaraan berdasarkan indeks yang diberikan. 2. perbarui nilai-nilai atribut kendaraan (merk, tipe, tahun, masalah) dengan nilai-nilai baru yang diterima sebagai parameter. case 3: hapus kendaraan ketika pengguna memilih opsi 3, program akan menjalankan kode berikut: 1. minta nomor kendaraan: program meminta pengguna untuk memasukkan nomor kendaraan yang ingin dihapus. 2. panggil fungsi hapuskendaraan: nomor kendaraan yang dimasukkan kemudian dikirimkan ke fungsi hapuskendaraan. fungsi ini (yang telah kita bahas sebelumnya) bertugas untuk menghapus data kendaraan pada indeks yang sesuai. ringkasan: bagian kode ini memungkinkan pengguna untuk melakukan dua operasi penting dalam sistem manajemen bengkel: • mengedit data kendaraan: mengubah informasi tentang kendaraan yang sudah ada. • menghapus data kendaraan: menghapus data kendaraan yang tidak lagi diperlukan.",cfc8daa7270358c2e3c2acc4380b0db4ab0c74d7209b01a0306033a320bf47a3,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffac6fb68f7890d971b5,LA1_IndraRamadhan_2IA24_SD.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:56.784Z,"logika pada pertemuan pertama praktikum struktur data, kita membahas array dan record dengan menggunakan bahasa pemrograman c, pada program diatas penerapan array dan record dalam mengolah data pengriman barang. di kode line pertama kita deklarasikan library dan struktur data seperti kode di bawah : program menggunakan dua library yaitu stdio.h untuk operasi input/output dan string.h untuk operasi manipulasi string. struct barang didefinisikan untuk menyimpan data barang. setiap barang memiliki atribut seperti id, nama, kategori, stok, harga, dan lokasi penyimpanan. selanjutnya kita buat kembali 2 struktur data : struct pegawaigudang digunakan untuk menyimpan informasi pegawai gudang, termasuk id pegawai, nama, tugas, shift kerja, dan lokasi bertugas. struct pengiriman menyimpan data pengiriman, termasuk id pengiriman, nama penerima, alamat, tanggal pengiriman, daftar barang yang dikirimkan, serta jumlah barang. selanjtunya kita membuat fungsi : fungsi tampilkanbarang menerima parameter berupa struct barang dan menampilkan detail barang seperti id, nama, kategori, stok, harga, dan lokasi penyimpanan. fungsi tampilkanpegawai menerima parameter struct pegawaigudang untuk menampilkan detail pegawai seperti id, nama, tugas, shift, dan lokasi bertugas. fungsi tampilkanpengiriman menerima parameter struct pengiriman untuk menampilkan detail pengiriman. termasuk id pengiriman, nama penerima, alamat, tanggal, serta menampilkan barang-barang yang terkandung dalam pengiriman. selanjutnya kita buat main programnya : tiga barang didefinisikan menggunakan struct barang, masing-masing dengan id, nama, kategori, stok, harga, dan lokasi. dua pegawai gudang juga didefinisikan menggunakan struct pegawaigudang beserta informasi tugas, shift kerja, dan lokasi bertugas mereka. sebuah pengiriman didefinisikan dengan id, nama penerima, alamat, tanggal pengiriman, dan dua barang dari daftar barang yang didefinisikan sebelumnya. fungsi tampilkanbarang dipanggil tiga kali untuk menampilkan informasi barang pertama, kedua, dan ketiga. fungsi tampilkanpegawai dipanggil dua kali untuk menampilkan informasi pegawai pertama dan kedua. fungsi tampilkanpengiriman dipanggil untuk menampilkan data pengiriman, termasuk barang-barang yang terdapat dalam pengiriman tersebut. kemudian yang terakhir kita tutup program : program selesai dan mengembalikan nilai 0 untuk menandakan bahwa program berjalan dengan sukses. output",594c6e80df015b7738dfc2309e2b88d679b7f97024c59119a88df8471d5738a7,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffad6fb68f7890d971b6,JAUZA PRASTA RAFADIO_2IA24_LA1.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:57.215Z,"logika program pada praktikum kali ini saya akan membuat sebuah program terstruktur ysng dimana disini saya membuat program tetang perpustakaan code berikut berfungsi untuk mengimpor beberapa library standar yang dibutuhkan oleh program. #include <iostream> digunakan untuk operasi input-output seperti cout dan cin. #include <vector> diperlukan untuk menggunakan tipe data vector, yang berguna untuk menyimpan koleksi buku. #include <string> memungkinkan penggunaan tipe data string. bagian using namespace std; digunakan agar kita bisa langsung menggunakan fungsi dan objek dari standar library c++ tanpa harus mengetik prefiks std:: di setiap fungsi standar. berikut nya ada struktur book digunakan untuk merepresentasikan setiap buku di perpustakaan. struktur ini memiliki empat atribut: id (nomor identifikasi buku), title (judul buku), author (penulis buku), dan isavailable (status ketersediaan buku, yaitu apakah buku tersedia atau sedang dipinjam). di dalam struktur ini terdapat constructor yang digunakan untuk menginisialisasi objek book ketika buku baru dibuat. secara default, isavailable diatur ke true, yang berarti buku baru akan dianggap tersedia. selanjut nya bagian ini mendefinisikan kelas library, yang bertanggung jawab untuk mengelola koleksi buku. books adalah vector dari objek book yang menyimpan semua buku dalam perpustakaan. atribut ini dideklarasikan di dalam bagian private, sehingga hanya bisa diakses oleh metode dalam kelas library. ada lima metode yang disediakan oleh kelas ini: • addbook menambah buku baru ke koleksi perpustakaan, • displaybooks menampilkan semua buku yang ada, • searchbook mencari buku berdasarkan judul, • borrowbook memungkinkan pengguna meminjam buku berdasarkan id, • returnbook memungkinkan pengguna mengembalikan buku. selanjutnya bagian metode addbook metode addbook digunakan untuk menambahkan buku baru ke perpustakaan. metode ini menerima tiga parameter: id (nomor identifikasi buku), title (judul buku), dan author (penulis buku). sebuah objek book baru dibuat dan ditambahkan ke vector books menggunakan fungsi push_back. setelah buku berhasil ditambahkan, pesan konfirmasi dicetak ke layar. metode displaybooks digunakan untuk menampilkan daftar semua buku yang ada di perpustakaan. jika tidak ada buku dalam perpustakaan (vektor books kosong), pesan pemberitahuan akan dicetak. jika ada buku, metode ini mencetak informasi buku (id, judul, penulis, dan status ketersediaan) untuk setiap buku yang ada dalam koleksi perpustakaan. book.isavailable menggunakan operator ternary untuk menampilkan apakah buku tersedia atau sedang dipinjam. metode searchbook mencari buku berdasarkan judul yang diberikan. metode ini menggunakan perulangan for-each untuk memeriksa apakah judul buku dalam koleksi cocok dengan judul yang dicari. jika ditemukan, metode akan mencetak informasi tentang buku tersebut dan menghentikan pencarian dengan break. jika tidak ada buku dengan judul yang sesuai, program mencetak pesan bahwa buku tersebut tidak ditemukan. lalu selanjutnya metode returnbook memungkinkan pengguna untuk mengembalikan buku yang sudah dipinjam. jika id buku ditemukan dan buku dalam status dipinjam (isavailable == false), status buku diubah menjadi tersedia kembali (isavailable = true). jika buku sudah tersedia, program akan mencetak pesan bahwa buku sudah ada di perpustakaan. jika buku tidak ditemukan, pesan bahwa buku tidak ditemukan dicetak. selanjutnya fungsi fungsi utama program perpustakaan meliputi beberapa langkah kunci: 1. deklarasi objek dan variabel: membuat objek `library` dari kelas `library` untuk mengelola buku dan menyimpan input pengguna dalam variabel `choice`, `id`, `title`, dan `author`. 2. menu interaktif: menampilkan enam opsi: tambah buku, tampilkan semua buku, cari buku, pinjam buku, kembalikan buku, dan keluar, dengan penanganan pilihan menggunakan switch-case. 3. proses pilihan pengguna: • tambah buku: menginput id, judul, dan penulis untuk menambah buku. • tampilkan semua buku: menampilkan semua buku dan status ketersediaannya. • cari buku: mencari buku berdasarkan judul. • pinjam buku: meminjam buku berdasarkan id jika tersedia. • kembalikan buku: mengembalikan buku yang dipinjam berdasarkan id. 4. keluar: program berhenti jika pengguna memilih opsi keluar, dengan loop do-while agar program terus berjalan hingga opsi keluar dipilih. output program",8979602e58276951d15737edf944262a00de55633b03aa390421dd5171b3cce5,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffad6fb68f7890d971b7,LA1_SD.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:57.899Z,"logika #include <stdio.h> ini adalah direktif preprocessor yang digunakan untuk menyertakan file header stdio.h, yang berisi deklarasi fungsi input/output. #include <string.h>sama seperti sebelumnya, ini adalah direktif untuk menyertakan file header string.h, yang berisi deklarasi fungsi untuk manipulasi string, seperti strcpy, strlen, struct mahasiswa { ... }; ini adalah deklarasi dari struktur mahasiswa, yang merupakan tipe data yang memungkinkan untuk mengelompokkan beberapa variabel di bawah char nama[50]; variabel ini menyimpan nama mahasiswa sebagai array karakter (string) dengan panjang maksimum 49 karakter (plus satu untuk null terminator). int umur; variabel ini menyimpan umur mahasiswa dalam bentuk bilangan bulat. float ipk; variabel ini menyimpan indeks prestasi kumulatif (ipk) mahasiswa dalam bentuk angka desimal. struct mahasiswa buatmahasiswa(char nama[], int umur, float ipk) ini adalah deklarasi dari fungsi buatmahasiswa yang mengembalikan sebuah objek bertipe struct mahasiswa. fungsi ini menerima tiga parameter:struct mahasiswa mhs; di dalam fungsi, variabel mhs dideklarasikan sebagai objek dari tipe struct mahasiswa. ini akan digunakan untuk menyimpan informasi mahasiswa yang baru dibuat. strcpy(mhs.nama, nama); fungsi strcpy digunakan untuk menyalin string dari parameter nama ke anggota nama dari objek mhs. mhs.umur = umur; baris ini mengatur umur mahasiswa dengan nilai yang diterima dari parameter umur. mhs.ipk = ipk; ini mengatur nilai ipk dari parameter ipk ke dalam objek mhs. ini menyimpan informasi ipk ke dalam objek. return mhs; fungsi mengembalikan objek mhs yang telah diisi dengan data mahasiswa. dengan mengembalikan objek ini. void tampilkanmahasiswa(struct mahasiswa mhs) ini adalah deklarasi dari fungsi tampilkanmahasiswa, yang tidak mengembalikan nilai (void). fungsi ini menerima satu parameter: printf(""nama: %s\n"", mhs.nama); baris ini menggunakan fungsi printf untuk mencetak nama mahasiswa ke layar. printf(""umur: %d\n"", mhs.umur); fungsi ini mencetak umur mahasiswa. format %d digunakan untuk menampilkan nilai bilangan bulat, yang diambil dari anggota umur objek mhs. printf(""ipk: %.2f\n"", mhs.ipk); baris ini mencetak indeks prestasi kumulatif (ipk) mahasiswa. format %.2f digunakan untuk menampilkan angka desimal dengan dua tempat di belakang koma, yang diambil dari anggota ipk objek mhs. int main() ini adalah titik masuk (entry point) dari program c int jumlahmahasiswa = 3; baris ini mendeklarasikan sebuah variabel bertipe int bernama jumlahmahasiswa dan menginisialisasinya dengan nilai 3. struct mahasiswa mahasiswaarray[jumlahmahasiswa]; baris ini mendeklarasikan sebuah array bernama mahasiswaarray yang berisi elemen bertipe struct mahasiswa. ukuran array ditentukan oleh nilai dari jumlahmahasiswa, yaitu. mahasiswaarray[0] = buatmahasiswa(""julian"", 20, 3.75); membuat objek mahasiswa baru dengan nama ""julian"", umur 20, dan ipk 3.75. fungsi buatmahasiswa mengembalikan objek ini yang kemudian disimpan di indeks 0 dari mahasiswaarray. mahasiswaarray[1] = buatmahasiswa(""raka"", 21, 3.60); mirip dengan baris sebelumnya, tetapi untuk mahasiswa dengan nama ""raka"", umur 21, dan ipk 3.60. objek ini disimpan di indeks 1 dari mahasiswaarray. mahasiswaarray[2] = buatmahasiswa(""haaikal"", 22, 3.85); kegunaan: membuat objek mahasiswa baru dengan nama ""haaikal"", umur 22, dan ipk 3.85. objek ini disimpan di indeks 2 dari mahasiswaarray. for (int i = 0; i < jumlahmahasiswa; i++) { memulai sebuah loop yang akan mengiterasi sebanyak jumlahmahasiswa. i digunakan sebagai indeks untuk mengakses setiap elemen dalam mahasiswaarray. printf(""data mahasiswa %d:\n"", i + 1); mencetak informasi nomor urut mahasiswa. i + 1 digunakan agar nomor tampilkanmahasiswa(mahasiswaarray[i]); memanggil fungsi tampilkanmahasiswa untuk menampilkan detail dari mahasiswa yang ada di indeks i dari mahasiswaarray. ini akan mencetak informasi printf(""\n""); mencetak baris baru setelah informasi setiap mahasiswa, untuk membuat } menandakan akhir dari loop for. return 0; mengembalikan nilai 0 ke sistem operasi, menandakan bahwa program telah selesai dijalankan dengan sukses tanpa error. output",40ae22b6dff06f0037fbf4f43131867ec1b710b8dae4a8414d5ece43c00c9ed9,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffae6fb68f7890d971b8,Katarina Susi Wulandari_50423678.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:58.034Z,"logika program #include <stdio.h> untuk mengimpor standard input output library untuk fungsi fungsi printf. #include <string.h> untuk memanipulasi data string strcpy. struct siswa { untuk mendefinisikan data khusus siswa, char nama[50]; variabel array berukuran 50 untuk menyimpan nama. int umur; variabel integer untuk menyimpan umur siswa. float nilai; }; variabel float untuk menyimpan nilai siswa. void printsiswa(struct siswa s) { untuk mencetak informasi struct siswa. printf(""nama: %s\n"", s.nama); printf(""umur: %d\n"", s.umur); printf(""nilai: %.2f\n"", s.nilai); printf(""----------------------\n""); } untuk mencetak nama, umur, nilai dan tanda –. int main() { struct siswa siswaarray[3]; merupakan deklarasi array berupa tipe struct siswa, dan bisa menyimpan 3 data siswa. strcpy(siswaarray[0].nama, ""lala""); siswaarray[0].umur = 19; siswaarray[0].nilai = 99; untuk mengcopy string pertama nama, umur, nilai ke dalam variabel. strcpy(siswaarray[1].nama, ""lili""); siswaarray[1].umur = 20; siswaarray[1].nilai = 90; untuk mengcopy string kedua nama, umur, nilai ke dalam variabel, strcpy(siswaarray[2].nama, ""luli""); siswaarray[2].umur = 21; siswaarray[2].nilai = 88; untuk mengcopy string ketiga nama, umur, nilai ke dalam variabel. for (int i = 0; i < 3; i++) { printsiswa(siswaarray[i]); } untuk mencetak data setiap siswa dalam array sebanyak 3 kali. return 0; } untuk mengembalikan nilai 0 untuk menandakan bahwa program selesai dijalankan tanpa error. output program",496e1b380a6d42fc5ce71d8c3f0e2252f929f37d987f7fa685d0f20fc12472a4,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffae6fb68f7890d971b9,Lubentiyo Krisdani_50423714_2IA24_LA1.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:58.368Z,"logika program pertama-tama saya akan memanggil sebuah pustaka untuk menyediakan fungsi-fungsi yang akan digunakan untuk melakukan operasi input dan output yaitu <stdio.h>. kemudian, saya akan memanggil sebuah pusakan lagi untuk menyediakan sebuah fungsi-fungsi untuk memanipulasi string. kemudian, saya akan mendefinisikan sebuah struktur hotelroom untuk menyimpan informasi tentang kamar hotel, seperti nomor kamar, tipe kamar, status ketersediaan, harga per malam dan fasilitas kamar. lalu, saya akan mendefinisikan sebuah struktur guest untuk menyimpan informasi tentang tamu, termasuk id tamu, nama, nomor telepon, dan tanggal check in serta check out. kemudian, saya akan mendefinisikan sebuah struktur reservation yang menyimpan informasi tentang reservasi seperti id reservasi, informasi tamu, informasi kamar, tanggal check in dan check out serta total harga. kemudian, saya akan membuat sebuah fungsi untuk menampilkan informasi dan akan membuat kelas dengan void printroom. dimana, kelas ini akan menyimpan informasi tentang kamar hotel. pada kelas ini program akan mengambil data kamar dari parameter room dan mencetak properti seperti nomor kamar, tipe, status, harga per malam, dan fasilitas. lalu, saya akan membuat kembali kelas seperti sebelum nya. kali ini meliputi informasi tamu. program akan mengambil data tamu dari parameter guest dan akan mencetak id, nama, telepon, serta tanggal check in dan check out. kemudian, saya akan membuat kembali sebuah kelas untuk menampilkan informasi tentang reservasi. program akan memanggil fungsi printguest dan printroom untuk menampilkan data tamu dan kamar, lalu menampilkan tanggal check in, check out dan total harga reservasi. kemudian, saya akan membuat sebuah array rooms yang berisi dua kamar hotel, masing masing memiliki nomor kamar, tipe kamar, status ketersediaan, harga per malam, dan daftar fasilitas. lalu, saya akan membuat sebuah objek guest 1 untuk menyimpan data tamu dengna id, nama, nomor telepon, dan tanggal check in dan check out. kemudian, saya akan membaut sebuah objek reservation1 untuk menyimpan data reservasi. id reservasi disalin dengan strcpy dan data tamu guest1 serta kamar , nomor kamar dimasukan ke dalam reservasi. tanggal check in dan check out diambil dari data tamu. total harga dihitung dengan mengalikan harga per malam kamar dengan jumlah malam (2malam). lalu, saya memanggil sebuah fungsi printreservation untuk menampilkan seluruh informasi tentang reservasi reservation1 termasuk data tamu, data kamar, tanggal check in, check out dan total harga. kemudian, saya akan menggunakan return 0 untuk mengakhiri program degnan mengembalikan nilai 0. output program",bf2266ab85fadbfb53b926ff3a67d8e5e920260a4d34f7dc8178c89dfb658762,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffae6fb68f7890d971ba,MaherSahab_2IA24_LA1_SD.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:58.604Z,"logika pada pertemuan pertama dikelas struktur data ini, saya belajar mengenai bahasa pemrograman c yaitu array dan record. pada tugas kali ini ialah membuat program pada c. berikut adalah penjelasan logika pemrogramannya. pada bagian pertama ini adalah library yang digunakan. terdapat stdio.h yakni digunakan untuk fungsi input-output seperti printf() dan scanf(). dan string.h yakni digunakan untuk operasi string seperti strcpy(). pada bagian ini adalah definisi struck. program ini menggunakan tiga struct utama untuk merepresentasikan entitas dalam sistem penyewaan yaitu struct kendaraan yang terdapat nama, nomor_polisi, harga_sewa, dan tersedia. lalu struct pelanggan yang terdapat nama_pelanggan dan nomor_telepon. dan terakhir struct transaksi yang terdapat kendaraan, pelanggan dan tanggal_sewa. pada bagian ini adalah fungsi setkendaraan(). fungsi ini bertujuan untuk menginisialisasi data kendaraan. parameternya terdapat kendaraan *k yakni pointer ke struct kendaraan, nama, nomor yakni nama dan nomor polisi kendaraan, dan harga yakni harga sewa kendaraan. dan juga terdapat fungsi strcpy() yang digunakan untuk menyalin string ke dalam variable struct. pada bagian ini adalah fungsi tampilkankendaraan(). fungsi ini bertujuan untuk menampilkan informasi kendaraan. jika tersedia == 1, tampilkan ""tersedia"". jika tidak, tampilkan ""disewa"". pada bagian ini adalah fungsi buattransaksi(). fungsi ini bertujuan untuk membuat transaksi baru jika kendaraan tersedia. jika k->tersedia == 1, transaksi berhasil dibuat dan kendaraan diset menjadi tidak tersedia (k->tersedia = 0). jika kendaraan sedang disewa (k- >tersedia == 0), tampilkan pesan bahwa kendaraan tidak tersedia. pada bagian ini adalah fungsi tampilkantransaksi(). fungsi ini bertujuan untuk menampilkan detail transaksi. mengakses data kendaraan dan pelanggan dari transaksi dan menampilkannya. pada bagian ini adalah fungsi main(). terdapat inisialisasi kendaraan yakni mobil dan motor diinisialisasi dengan setkendaraan() dan data kendaraan seperti nama, nomor polisi, dan harga sewa diberikan. lalu membuat pelanggan dengan cara data pelanggan dibuat menggunakan struct pelanggan. kemudian terdapat membuat transaksi dibuat menggunakan buattransaksi() dengan kendaraan mobil. jika mobil tersedia, transaksi berhasil dan status mobil diubah menjadi disewa. dan terkahir terdapat menampilkan data kendaraan dan menampilkan detail transaksi. output ketika di run :",b48eba8c1314fe953dea43c1d7d1c9be91defe285238a16520ff44c6d74d077b,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffaf6fb68f7890d971bb,MarchelImanuelPangruruk_2IA24_LA1.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:51:59.337Z,"logika praktikan akan membuat sebuah program c++ yang akan meminta user untuk membuat sebuah program struktur data yang akan mendata peminjaman buku di perpustakaan. #include <stdio.h> library stdio.h digunakan untuk operasi input dan output standar, seperti printf, scanf, dan fgets. struct person { char nama[50]; int nomoranggota; char buku[50]; }; struktur person didefinisikan untuk menyimpan informasi tentang anggota yang meminjam buku, terdiri dari tiga anggota. yang pertama adalah nama, sebuah array karakter yang dapat menyimpan nama anggota dengan panjang maksimal 50 karakter. kedua adalah nomoranggota, yang berupa integer untuk menyimpan nomor anggota. ketiga, ada buku, sebuah array karakter untuk menyimpan judul buku yang dipinjam dengan panjang maksimal 50 karakter. struct person anggota; int pilihan; variabel anggota adalah sebuah variabel bertipe struct person yang menyimpan informasi tentang anggota. variabel pilihan adalah integer yang menyimpan pilihan buku dari daftar buku yang disediakan. printf(""masukkan nama: ""); fgets(anggota.nama, 50, stdin); printf(""masukkan nomor anggota: ""); scanf(""%d"", &anggota.nomoranggota); program meminta pengguna untuk memasukkan nama anggota dengan menggunakan fgets(). fungsi fgets digunakan untuk mengambil input string (dengan batas maksimal 50 karakter) dari standar input (stdin), dan menyimpannya di dalam anggota.nama. program kemudian meminta pengguna untuk memasukkan nomor anggota, yang disimpan dalam anggota.nomoranggota. printf(""daftar buku:\n""); printf(""1. a1 - fiksi ilmiah\n""); printf(""2. a2 - roman\n""); printf(""3. a3 - fantasi\n""); printf(""4. a4 - misteri\n""); printf(""5. a5 - biografi\n""); printf(""6. a6 - thriller\n""); printf(""7. a7 - horor\n""); printf(""8. a8 - sejarah\n""); printf(""9. a9 - petualangan\n""); program menampilkan daftar 9 buku yang dapat dipilih oleh pengguna. setiap buku diidentifikasi dengan nomor. printf(""masukkan nomor buku yang ingin dipinjam (1-9): ""); scanf(""%d"", &pilihan); pengguna diminta untuk memasukkan nomor buku yang ingin dipinjam (angka dari 1 hingga 9). input ini disimpan dalam variabel pilihan. switch (pilihan) { case 1: sprintf(anggota.buku, ""a1 - fiksi ilmiah""); break; case 2: sprintf(anggota.buku, ""a2 - roman""); break; case 3: sprintf(anggota.buku, ""a3 - fantasi""); break; case 4: sprintf(anggota.buku, ""a4 - misteri""); break; case 5: sprintf(anggota.buku, ""a5 - biografi""); break; case 6: sprintf(anggota.buku, ""a6 - thriller""); break; case 7: sprintf(anggota.buku, ""a7 - horor""); break; case 8: sprintf(anggota.buku, ""a8 - sejarah""); break; case 9: sprintf(anggota.buku, ""a9 - petualangan""); break; default: printf(""pilihan tidak valid. program selesai.\n""); return 1; } berdasarkan nilai pilihan, program menggunakan pernyataan switch-case untuk menentukan buku yang dipilih. jika pilihan antara 1 dan 9, judul buku yang sesuai akan disimpan dalam anggota.buku menggunakan fungsi sprintf(). jika pilihan tidak valid (di luar rentang 1-9), program akan mencetak pesan kesalahan dan keluar dengan kode kesalahan 1. printf(""\ninformasi peminjaman:\n""); printf(""nama: %s"", anggota.nama); printf(""nomor anggota: %d\n"", anggota.nomoranggota); printf(""buku yang dipinjam: %s\n"", anggota.buku); setelah buku dipilih, program menampilkan informasi peminjaman, termasuk nama anggota, nomor anggota, dan judul buku yang dipinjam. output",8eccaa1a5acd96eed00ad1994293f7bb63dbb9713f890cbf0530a6917e2954f5,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffb06fb68f7890d971bc,Mario Cristian Simatupang_2IA24_LA1.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:52:00.072Z,"logika pemograman #include <stdio.h> digunakan untuk menyertakan file header standar input/output. #include <string.h> digunakan untuk menyertakan file header yang berisi deklarasi fungsi. typedef struct { digunakan untuk mengelompokkan beberapa variabel dengant tipe data yang berbeda menjadi satu entitas. char judul[100]; digunakan untuk menyimpan string. char isbn[20]; digunakan untuk menyimpan nomor isbn. char penulis[50]; digunakan untuk menyimpan string yang berisi nama penulis. float harga; digunakan untuk menyimpan angka pecahan dengan presisi tunggal. int stok; digunakan untuk menyimpan bilangan bulat. void tambahstok(buku* buku, int jumlah) { digunakan untuk menambahkan stok buku yang dimana parameter buku adalah pointer ke struktur buku dan jumlahnya adalah nilai integer yang menunjukkan berapa banyak stok yang ingin ditambahkan. buku->stok += jumlah; digunakan untuk menambahkan nilai jumlah ke variabel stok milik objek yang diakses melalui pointer buku. printf(""stok buku '%s' berhasil ditambah. stok sekarang: %d\n"", buku->judul, buku->stok); digunakan untuk menampilkan pesan ke layar yang memberikan informasi tentang penambahan stok buku. void jualbuku(buku* buku, int jumlah) { digunakan untuk mengurangi stok dari buku yang ditunjuk oleh pointer buku sebanyak jumlah yang dijual. if (buku->stok >= jumlah) { digunakan untuk memeriksa apakah jumlah buku yang ingin dijual tidak melebihi stok buku yang tersedia. buku->stok -= jumlah; digunakan untuk mengurangi jumlah stok dari buku yang ditunjuk oleh pointer. printf(""berhasil menjual %d buku '%s'. stok sekarang: %d\n"", jumlah, buku->judul, buku->stok); digunakan untuk menampilkan pesan ke layar yang memberi informasi tentang hasil penjualan buku. printf(""stok tidak cukup untuk menjual %d buku '%s'. stok tersisa: %d\n"", jumlah, buku->judul, buku- >stok); digunakan untuk mencetak pesan ke layar ketika stok buku tidak mencukupi untuk memenuhi permintaan penjualan. void tampilkanbuku(buku* buku) { digunakan untuk menampilkan informasi tentang sebuah buku yang diwakili oleh struktur buku. printf(""judul: %s\n"", buku- >judul); digunakan untuk mencetak judul dari buku yang ditunjuk oleh pointer buku. printf(""isbn: %s\n"", buku->isbn); digunakan untuk mencetak judul dari buku yang ditunjuk oleh pointer buku. printf(""penulis: %s\n"", buku->penulis); digunakan untuk mencetak nama penulis dari buku yang ditunjuk oleh pointer buku. printf(""harga: rp %.2f\n"", buku->harga); digunakan untuk mencetak harga buku yang ditunjuk oleh pointer. printf(""stok: %d\n"", buku->stok); digunakan untuk mencetak jumlah stok dari buku yang ditunjuk oleh pointer buku. printf(""------------------------------\n""); digunakan untuk mencetak kalimat yang didalamnya. int main() { digunakan untuk eksekusi utama dalam program. buku daftarbuku[3]; digunakan untuk mendeklarasikan sebuah array yang berisi objek dari tipe data. strcpy(daftarbuku[0].judul, ""pemrograman c""); digunakan untuk menyalin string pemrograman c ke dalam anggota judul dari objek buku pertama dalam array. strcpy(daftarbuku[0].isbn, ""978-1234567890""); digunakan untuk menyalin 978- 1234567890 ke dalam anggota isbn dari objek buku pertama dalam array daftarbuku. strcpy(daftarbuku[0].penulis, ""john doe""); digunakan untuk menyalin string john doe ke dalam anggota penulis dari objek buku pertama dalam array daftarbuk. daftarbuku[0].harga = 100000.00; digunakan untuk mengatur nilai harga dari buku pertama dalam array daftarbuku. daftarbuku[0].stok = 50; digunakan untuk mengatur jumlah stok dari buku pertama dalam array daftarbuku. strcpy(daftarbuku[1].judul, ""algoritma dan struktur data""); digunakan untuk menyalin string algoritma dan struktur data ke dalam anggota judul dari objek buku kedua dalam array. strcpy(daftarbuku[1].isbn, ""978-0987654321""); digunakan untuk menyalin 978-0987654321ke dalam anggota isbn dari objek buku pertama dalam array daftarbuku. strcpy(daftarbuku[1].penulis, ""jane doe""); digunakan untuk menyalin string jane doe ke dalam anggota penulis dari objek buku pertama dalam array daftarbuk. daftarbuku[1].harga = 120000.00; digunakan untuk mengatur nilai harga dari buku pertama dalam array daftarbuku. daftarbuku[1].stok = 30; digunakan untuk mengatur jumlah stok dari buku pertama dalam array daftarbuku. strcpy(daftarbuku[2].judul, ""sistem operasi""); digunakan untuk menyalin string sistem operasi ke dalam anggota judul dari objek buku ketiga dalam array. strcpy(daftarbuku[2].isbn, ""978-1122334455""); digunakan untuk menyalin 978- 1122334455 ke dalam anggota isbn dari objek buku pertama dalam array daftarbuku. strcpy(daftarbuku[2].penulis, ""mark smith""); digunakan untuk menyalin string mark smith ke dalam anggota judul dari objek buku ketiga dalam array. daftarbuku[2].harga = 150000.00; digunakan untuk mengatur harga dari buku ketiga dalam array daftarbuku. daftarbuku[2].stok = 40; digunakan untuk mengatur jumlah stok dari buku ketiga dalam array daftarbuku. printf(""=== inventaris toko buku ===\n"") digunakan untuk mencetak judul atau heading yang menunjukkan bahwa informasi berikutnnya. for (int i = 0; i < 3; i++) { digunakan untuk mengulangi blok kode tertentu sebanyak tiga kali. tampilkanbuku(&daftarbuku[i]); digunakan untuk menampilkan informasi tentang buku tertentu dari array daftarbuku. tambahstok(&daftarbuku[0], 10); digunakan untuk menambah jumlah stok buku tertentu. jualbuku(&daftarbuku[1], 5); digunakan untuk menjual sejumlah buku tertentu dan mengurangi jumlah stok dari buku tersebut. printf(""\n=== inventaris setelah transaksi ===\n""); digunakan untuk mencetak header yang menunjukkan bahwa program akan menampilkan inventris buku setelah dilakukan transaksi. for (int i = 0; i < 3; i++) { digunakan untuk mengulangi blok kode tertentu sebanyak tiga kali. tampilkanbuku(&daftarbuku[i]); digunakan untuk menampilkan informasi tentang buku tertentu dari array daftarbuku output",60149d5df7bb1ad4e6ec6cf7a17755e0be0f9f01a3beec96fac8120a38079e56,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffb06fb68f7890d971bd,Muhammad Daffa Alghifari_50423879_2IA24_LA1.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:52:00.421Z,"logika program program ini diletakkan pada folder sd yang dikhususkan untuk file-file tugas laboratorium yang menggunakan bahas pemrograman c untuk pertemuan ini dan dibelakang nama file wajib ditambahkan format c yaitu c. pada baris pertama terdapat #include <stdio.h> yang berfungsi untuk mengimpor library standar input-output c yang memungkinkan kita menggunakan fungsi seperti printf dan scanf untuk berinteraksi dengan pengguna. selanjutnya, ada #include <string.h> yang digunakan untuk mengimpor library string, sehingga kita bisa menggunakan fungsi-fungsi yang berhubungan dengan pengolahan string seperti strlen dan strcpy. kemudian, kita melihat deklarasi struct kendaraan yang merepresentasikan informasi kendaraan dengan berbagai atribut seperti nomor plat, merek, model, tahun pembuatan, jenis kendaraan (mobil atau motor), dan kilometer terakhir, yang dideklarasikan menggunakan tipe data yang sesuai untuk masing- masing informasi. setelah itu, terdapat deklarasi `struct pelanggan` yang berfungsi untuk merepresentasikan informasi pelanggan, termasuk nama, nomor telepon, alamat, nomor plat kendaraan, dan jumlah kunjungan yang dimiliki pelanggan. diikuti dengan deklarasi `struct layanan`, yang merepresentasikan layanan servis yang diberikan, dengan atribut seperti nomor layanan, nomor plat kendaraan yang dilayani, tanggal layanan, nama teknisi, jenis servis, suku cadang yang digunakan, dan total biaya servis. ketiga struktur ini berfungsi untuk mengelompokkan informasi terkait kendaraan, pelanggan, dan layanan secara terstruktur. pada fungsi printkendaraan(struct kendaraan k), fungsi ini berfungsi untuk menampilkan detail dari sebuah kendaraan dengan mencetak setiap atribut kendaraan ke layar menggunakan fungsi printf, sehingga pengguna dapat melihat informasi lengkap tentang kendaraan yang telah diinput. selanjutnya, ada fungsi printpelanggan(struct pelanggan p) yang memiliki fungsi serupa untuk menampilkan detail pelanggan, di mana semua informasi pelanggan akan ditampilkan dengan cara yang sama menggunakan printf. kemudian, ada juga fungsi printlayanan(struct layanan l) yang digunakan untuk menampilkan detail dari layanan servis yang diberikan kepada kendaraan, dengan mencetak informasi terkait layanan ke layar. di dalam fungsi main(), pertama-tama kita mendeklarasikan array daftarkendaraan yang berisi satu data kendaraan dengan informasi yang sudah ditentukan, termasuk nomor plat, merek, model, tahun pembuatan, jenis kendaraan, dan kilometer terakhir. selanjutnya, ada juga array daftarpelanggan yang menyimpan satu data pelanggan dengan detail yang sudah ditentukan, termasuk nama, nomor telepon, alamat, nomor plat kendaraan, dan jumlah kunjungan. selain itu, ada array daftarlayanan yang menyimpan satu data layanan dengan atribut yang telah ditentukan untuk nomor layanan, nomor plat kendaraan, tanggal layanan, nama teknisi, jenis servis, suku cadang yang digunakan, dan total biaya. setelah mendeklarasikan data kendaraan, pelanggan, dan layanan, program akan menampilkan informasi kendaraan dengan mencetak judul ""=== informasi kendaraan ===\n"" dan menggunakan perulangan for untuk memanggil fungsi printkendaraan yang menampilkan detail kendaraan berdasarkan data di daftarkendaraan. proses yang sama dilakukan untuk menampilkan informasi pelanggan dengan judul ""=== informasi pelanggan ===\n"" dan menggunakan fungsi printpelanggan, serta menampilkan informasi layanan dengan judul ""=== informasi layanan ===\n"" dan menggunakan fungsi printlayanan. akhirnya, program akan berakhir dengan perintah return 0; yang menunjukkan bahwa program telah selesai dijalankan tanpa kesalahan. output program",8ef8b9cbee2a448f6d969e314b4d98dc84d90401ed59fa1c48d68f4df0017346,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffb06fb68f7890d971be,Muhammad Fadhlan Ikhsani_50423893_LA1_.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:52:00.975Z,"logika kode program tersebut mendefinisikan dua struktur data menggunakan typedef dalam bahasa c, yaitu peralatan dan peminjaman. struktur peralatan menyimpan informasi mengenai peralatan, termasuk id, nama peralatan, dan status ketersediaan (tersedia atau tidak). struktur peminjaman digunakan untuk mencatat informasi peminjaman peralatan, yang mencakup id peminjaman, id peralatan yang dipinjam, serta nama peminjam. dengan demikian, kedua struktur ini dapat digunakan untuk mengelola data inventaris peralatan dan pencatatan peminjaman peralatan dalam suatu sistem, di mana setiap peminjaman dapat dihubungkan dengan peralatan tertentu melalui id peralatan. logika program tersebut mencakup dua fungsi untuk menangani data pada struktur `peralatan`. fungsi `buatperalatan` berfungsi untuk membuat sebuah objek peralatan baru dengan menerima id dan nama sebagai parameter, kemudian mengisi nilai-nilai tersebut ke dalam objek dan menetapkan status ketersediaan sebagai ""tersedia"" (1). fungsi ini mengembalikan objek `peralatan` yang sudah terisi. sementara itu, fungsi `tampilkanperalatan` digunakan untuk menampilkan informasi peralatan berupa id, nama, dan status ketersediaan (""tersedia"" jika status 1, dan ""dipinjam"" jika status 0). kedua fungsi ini dirancang untuk mempermudah proses pembuatan dan penampilan data peralatan dalam suatu sistem manajemen inventaris. kode tersebut menambahkan dua fungsi untuk mengelola proses peminjaman dan pengembalian peralatan. fungsi **`pinjamperalatan`** menerima tiga parameter utama: pointer ke peralatan, pointer ke peminjaman, dan informasi peminjaman (id peminjaman dan nama peminjam). fungsi ini pertama-tama memeriksa apakah peralatan tersedia. jika tersedia (`tersedia == 1`), status peralatan diubah menjadi ""dipinjam"" (`tersedia = 0`), data peminjaman diisi (id peminjaman, id peralatan, dan nama peminjam), dan pesan peminjaman ditampilkan, lalu fungsi mengembalikan nilai 1 untuk menunjukkan keberhasilan. jika peralatan tidak tersedia, pesan peralatan tidak tersedia ditampilkan dan fungsi mengembalikan nilai 0. fungsi **`kembalikanperalatan`** digunakan untuk mengembalikan peralatan yang dipinjam, di mana status peralatan diubah kembali menjadi ""tersedia"" (`tersedia = 1`), dan pesan pengembalian ditampilkan, termasuk nama peminjam yang mengembalikannya. kedua fungsi ini mengatur siklus peminjaman dan pengembalian peralatan dalam sistem. kode program ini mendemonstrasikan penggunaan struktur dan fungsi yang telah didefinisikan sebelumnya untuk mengelola data peminjaman peralatan. di dalam fungsi **`main`**, dua peralatan diciptakan menggunakan fungsi `buatperalatan`, yaitu ""proyektor"" dan ""laptop"", yang disimpan dalam variabel `alat1` dan `alat2`. selanjutnya, objek `peminjaman` (`peminjaman1`) disiapkan untuk mencatat peminjaman. setelah peralatan dibuat, fungsi `tampilkanperalatan` dipanggil untuk menampilkan informasi awal kedua peralatan. lalu, fungsi `pinjamperalatan` digunakan untuk meminjam `alat1` (proyektor) oleh ""budi"", yang mengubah status peralatan menjadi ""dipinjam"". status peralatan ditampilkan kembali untuk memperlihatkan perubahan. setelah itu, `alat1` dikembalikan oleh ""budi"" dengan memanggil fungsi `kembalikanperalatan`, yang mengubah status peralatan kembali menjadi ""tersedia"", dan status terakhir alat tersebut ditampilkan. program ini secara lengkap memodelkan siklus peminjaman dan pengembalian peralatan. output",5a0d9ca0efb9441be42b1a52083f468a74edabd0728f44d73313bb821a2606b3,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffb16fb68f7890d971bf,LA1_muhammadFatihmaulana_50423908_2IA24.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:52:01.907Z,"logika program ini merupakan implementasi sistem manajemen perpustakaan sederhana dalam c, yang menangani entitas seperti buku, anggota, dan peminjaman. berikut penjelasan logika utama dari program ini: 1. definisi struktur data • book: menyimpan data buku yang mencakup isbn, judul buku, penulis, tahun penerbitan, dan jumlah salinan yang tersedia di perpustakaan. • // definisi record buku • typedef struct { • char isbn[20]; • char title[100]; • char author[100]; • int year; • int availablecopies; • } book; • member: menyimpan data anggota perpustakaan. masing-masing anggota memiliki id, nama, alamat, daftar isbn buku yang dipinjam (maksimal 5 buku), dan jumlah buku yang dipinjam saat ini. • // definisi record anggota • typedef struct { • int memberid; • char name[100]; • char address[200]; • char borrowedbooks[5][20]; // simpan isbn buku yang dipinjam • int borrowedcount; • } member; • loan: menyimpan informasi tentang peminjaman buku, termasuk id peminjaman, id anggota, isbn buku, tanggal peminjaman, dan tanggal pengembalian. • // definisi record peminjaman • typedef struct { • int loanid; • int memberid; • char isbn[20]; • char borrowdate[11]; // format tanggal: dd-mm-yyyy • char returndate[11]; • } loan; 2. fungsi untuk menampilkan informasi program menyediakan tiga fungsi untuk menampilkan data masing-masing entitas: • displaybook(book book): menampilkan informasi sebuah buku. • // fungsi untuk menampilkan informasi buku • void displaybook(book book) { • printf(""isbn: %s\n"", book.isbn); • printf(""title: %s\n"", book.title); • printf(""author: %s\n"", book.author); • printf(""year: %d\n"", book.year); • printf(""available copies: %d\n"", book.availablecopies); • printf(""-----------------------\n""); • } • displaymember(member member): menampilkan informasi seorang anggota, termasuk buku yang sedang dipinjam. • // fungsi untuk menampilkan informasi anggota • void displaymember(member member) { • printf(""member id: %d\n"", member.memberid); • printf(""name: %s\n"", member.name); • printf(""address: %s\n"", member.address); • printf(""borrowed books: %d\n"", member.borrowedcount); • for (int i = 0; i < member.borrowedcount; i++) { • printf("" - %s\n"", member.borrowedbooks[i]); • } • printf(""-----------------------\n""); • } • displayloan(loan loan): menampilkan informasi peminjaman buku. jika buku belum dikembalikan, maka ditampilkan teks ""not returned"". • // fungsi untuk menampilkan informasi peminjaman • void displayloan(loan loan) { • printf(""loan id: %d\n"", loan.loanid); • printf(""member id: %d\n"", loan.memberid); • printf(""isbn: %s\n"", loan.isbn); • printf(""borrow date: %s\n"", loan.borrowdate); • printf(""return date: %s\n"", loan.returndate[0] ? loan.returndate : ""not returned""); • printf(""-----------------------\n""); • } 3. main program pada fungsi main(), dilakukan inisialisasi array buku, anggota, dan peminjaman. lalu, data- data tersebut ditampilkan dengan menggunakan fungsi-fungsi yang sudah didefinisikan sebelumnya. • inisialisasi buku: tiga buku disimpan dalam array books. setiap buku berisi informasi tentang isbn, judul, penulis, tahun terbit, dan jumlah salinan yang tersedia. • // array buku yang ada di perpustakaan • book books[3] = { • {""978-1234567890"", ""pemrograman untuk pemula"", ""andi s."", 2020, 10}, • {""978-9876543210"", ""data structures and algorithms"", ""jane d."", 2018, 5}, • {""978-2233445566"", ""introduction to c programming"", ""john c."", 2021, 3} • }; • inisialisasi anggota: dua anggota disimpan dalam array members. salah satu anggota telah meminjam satu buku, dan informasi isbn buku tersebut dicatat dalam borrowedbooks. • // array anggota yang terdaftar • member members[2] = { • {1, ""muhammad fatih maulana"", ""jalan doang jadian kaga no. 1"", {""978-1234567890""}, 1}, • {2, ""mauliza syafira"", ""jalan pahlawan no. 5"", {}, 0} • }; • inisialisasi peminjaman: dua peminjaman disimpan dalam array loans. peminjaman pertama memiliki tanggal pengembalian, sedangkan yang kedua belum dikembalikan. • // array peminjaman • loan loans[2] = { • {1001, 1, ""978-1234567890"", ""15-10-2024"", ""22-10-2024""}, • {1002, 2, ""978-9876543210"", ""16-10-2024"", """"} • }; • menampilkan data: o buku: semua buku di books ditampilkan dengan menggunakan fungsi displaybook(). o anggota: semua anggota di members ditampilkan dengan menggunakan fungsi displaymember(). o peminjaman: semua peminjaman di loans ditampilkan dengan menggunakan fungsi displayloan(). • // menampilkan semua buku • printf(""=== buku yang tersedia di perpustakaan ===\n""); • for (int i = 0; i < 3; i++) { • displaybook(books[i]); • } • • // menampilkan semua anggota • printf(""\n=== anggota yang terdaftar di perpustakaan ===\n""); • for (int i = 0; i < 2; i++) { • displaymember(members[i]); • } • • // menampilkan semua peminjaman • printf(""\n=== peminjaman buku ===\n""); • for (int i = 0; i < 2; i++) { • displayloan(loans[i]); • } • • return 0; • } kesimpulan: program ini menampilkan daftar buku yang tersedia, anggota yang terdaftar, dan peminjaman buku yang sedang berlangsung di perpustakaan. setiap informasi ditampilkan dengan menggunakan fungsi yang sesuai, yang memudahkan proses pemanggilan dan penanganan data. output",e698eb15650d05665bc7d5d401a5ad21741cf5ab077a709aa22b79b77cb058e2,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffb36fb68f7890d971c0,LA1-STURUKTUR DATA.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:52:03.118Z,"logika program struktur data program ini menggunakan struktur data untuk menyimpan informasi terkait 3 sistem yang berbeda: 1. sistem perpustakaan 2. toko online 3. sistem manajemen mahasiswa masing-masing sistem memiliki struktur data yang relevan untuk mengelola informasi mereka, seperti daftar buku di perpustakaan, produk di toko online, dan mahasiswa di sistem manajemen mahasiswa. 1. sistem perpustakaan terdapat tiga struktur data: • buku: menyimpan informasi buku seperti isbn, judul, pengarang, penerbit, tahun terbit, jumlah halaman, dan status (apakah tersedia atau dipinjam). • anggota: menyimpan informasi anggota perpustakaan, seperti nama, alamat, nomor telepon, dan jumlah buku yang bisa dipinjam. • peminjaman: menyimpan informasi tentang peminjaman buku oleh anggota. program memiliki dua fungsi utama untuk sistem perpustakaan: • tambahbuku: untuk menambahkan buku baru ke dalam perpustakaan. • caribuku: untuk mencari buku berdasarkan judul. logika: ketika pengguna memilih opsi ""tambah buku"", program akan meminta data buku (isbn, judul, pengarang, penerbit, tahun terbit, jumlah halaman) dan menyimpannya di dalam array bukuperpustakaan. buku tersebut akan ditambahkan ke posisi pertama yang kosong (dilihat dari panjang string isbn). jika pengguna memilih opsi ""cari buku"", program akan meminta judul buku dan mencari buku yang mengandung kata tersebut dalam judulnya, lalu menampilkan detail buku yang ditemukan. 2. toko online struktur data untuk toko online terdiri dari: • produk: menyimpan informasi tentang produk, seperti id produk, nama, harga, kategori, dan stok. • pelanggan: menyimpan informasi tentang pelanggan, seperti nama, alamat, email, dan nomor telepon. • pesanan: menyimpan informasi pesanan seperti id pelanggan, tanggal pesan, total harga, dan status pesanan. fungsi utama untuk sistem toko online adalah: • tambahproduk: untuk menambahkan produk baru. • tampilkanproduk: untuk menampilkan semua produk yang ada di toko. logika: ketika pengguna memilih ""tambah produk"", program akan meminta data produk seperti id, nama, harga, kategori, dan stok, dan menyimpannya ke dalam array produktoko di posisi kosong. jika pengguna memilih ""tampilkan produk"", program akan mencetak daftar produk yang ada beserta detailnya. 3. sistem manajemen mahasiswa struktur data untuk sistem manajemen mahasiswa terdiri dari: • mahasiswa: menyimpan informasi tentang mahasiswa seperti nim, nama, jurusan, dan tahun angkatan. • matakuliah: menyimpan informasi mata kuliah seperti kode matkul, nama matkul, dan jumlah sks. • nilai: menyimpan informasi nilai mahasiswa, berupa nim, kode mata kuliah, nilai angka, dan nilai huruf. fungsi utama untuk sistem ini adalah: • tambahmahasiswa: untuk menambahkan mahasiswa baru ke dalam sistem. • carimahasiswa: untuk mencari mahasiswa berdasarkan nim. logika: saat pengguna memilih opsi ""tambah mahasiswa"", program akan meminta nim, nama, jurusan, dan tahun angkatan, kemudian menambahkan data mahasiswa baru ke dalam array mahasiswalist. jika pengguna memilih ""cari mahasiswa"", program akan meminta nim mahasiswa dan mencari nim yang cocok di dalam array. jika ditemukan, informasi mahasiswa akan ditampilkan. menu utama pada fungsi main(), program memulai dengan menampilkan menu utama, yang memberikan tiga pilihan sistem: 1. sistem perpustakaan 2. toko online 3. sistem manajemen mahasiswa 4. keluar logika: • pengguna diminta memasukkan pilihan sistem yang ingin diakses. • berdasarkan pilihan, program akan memanggil fungsi menuperpustakaan(), menutokoonline(), atau menumanajemenmahasiswa(). • setelah eksekusi selesai, pengguna akan kembali ke menu utama sampai memilih untuk keluar. alur kerja utama program 1. program menampilkan menu utama dan menunggu input dari pengguna. 2. berdasarkan input, program akan masuk ke sistem yang dipilih (perpustakaan, toko online, atau manajemen mahasiswa). 3. pada tiap sistem, pengguna akan diberikan pilihan untuk menambah data (buku, produk, atau mahasiswa) atau mencari data. 4. jika pengguna memilih untuk keluar dari menu utama, program akan berhenti berjalan. output program",a81171342abd7e8bf1d4ee6a0c03fad57c3e0676a61cf97eac04b88ca2e18d2d,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffb46fb68f7890d971c1,NAZWA AMANDA SYIFA_51423097_2IA24.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:52:04.192Z,"logika program #include <stdio.h> perintah ini digunakan untuk menyertakan header file stdio.h yang menyediakan fungsi input/output standar seperti printf, scanf, dll. #include <string.h> perintah ini digunakan untuk menyertakan header file string.h yang menyediakan fungsi manipulasi string seperti fgets, strcspn, dll. “struct kucing {“perintah ini digunakan untuk mendefinisikan struktur kucing, yang berisi beberapa data tentang kucing. “char nama[50];”perintah ini digunakan untuk mendeklarasikan array karakter nama dengan ukuran 50, yang menyimpan nama kucing. “char jenisras[50];”perintah ini digunakan untuk mendeklarasikan array karakter jenisras dengan ukuran 50, yang menyimpan jenis ras kucing. “float harga; ”perintah ini digunakan untuk mendeklarasikan variabel harga dengan tipe data float, yang menyimpan harga kucing. “};” perintah ini digunakan untuk menutup definisi struktur kucing. ""struct pelanggan {""perintah ini digunakan untuk mendefinisikan struktur pelanggan, yang berisi data pelanggan. ""char nama[50];""perintah ini digunakan untuk mendeklarasikan array karakter nama dengan ukuran 50, yang menyimpan nama pelanggan. ""char nomortelepon[15];""perintah ini digunakan untuk mendeklarasikan array karakter nomortelepon dengan ukuran 15, yang menyimpan nomor telepon pelanggan.""};""perintah ini digunakan untuk menutup definisi struktur pelanggan. ""struct barang {""perintah ini digunakan untuk mendefinisikan struktur barang, yang berisi data tentang barang.""char nama[50];""perintah ini digunakan untuk mendeklarasikan array karakter nama dengan ukuran 50, yang menyimpan nama barang.""float harga;""perintah ini digunakan untuk mendeklarasikan variabel harga dengan tipe data float, yang menyimpan harga barang.""int stok;""perintah ini digunakan untuk mendeklarasikan variabel stok dengan tipe data int, yang menyimpan jumlah stok barang.""};""perintah ini digunakan untuk menutup definisi struktur barang. ""void tampilkaninfokucing(struct kucing kucing) {"" perintah ini digunakan untuk mendeklarasikan fungsi tampilkaninfokucing, yang menerima parameter tipe struct kucing dan menampilkan informasi kucing.""printf(""informasi kucing:\n"");""perintah ini digunakan untuk mencetak string ""informasi kucing:"" ke layar.""printf(""nama kucing: %s\n"", kucing.nama);""perintah ini digunakan untuk mencetak nama kucing menggunakan atribut nama dari parameter kucing.""printf(""jenis ras: %s\n"", kucing.jenisras);""perintah ini digunakan untuk mencetak jenis ras kucing menggunakan atribut jenisras dari parameter kucing.""printf(""harga: rp %.0f\n"", kucing.harga);""perintah ini digunakan untuk mencetak harga kucing menggunakan atribut harga dari parameter kucing dengan format rp dan tanpa desimal.""}""perintah ini digunakan untuk menutup fungsi tampilkaninfokucing. ""void tampilkaninfopelanggan(struct pelanggan pelanggan) {""perintah ini digunakan untuk mendeklarasikan fungsi tampilkaninfopelanggan, yang menerima parameter tipe struct pelanggan dan menampilkan informasi pelanggan. ""printf(""informasi pelanggan:\n"");""perintah ini digunakan untuk mencetak string ""informasi pelanggan:"" ke layar.""printf(""nama: %s\n"", pelanggan.nama);""perintah ini digunakan untuk mencetak nama pelanggan menggunakan atribut nama dari parameter pelanggan.""printf(""nomor telepon: %s\n"", pelanggan.nomortelepon);""perintah ini digunakan untuk mencetak nomor telepon pelanggan menggunakan atribut nomortelepon dari parameter pelanggan.""}""perintah ini digunakan untuk menutup fungsi tampilkaninfopelanggan. ""void tampilkaninfobarang(struct barang barang) {""perintah ini digunakan untuk mendeklarasikan fungsi tampilkaninfobarang, yang menerima parameter tipe struct barang dan menampilkan informasi barang.""printf(""informasi barang:\n"");""perintah ini digunakan untuk mencetak string ""informasi barang:"" ke layar.""printf(""nama barang: %s\n"", barang.nama);""perintah ini digunakan untuk mencetak nama barang menggunakan atribut nama dari parameter barang.""printf(""harga: rp %.0f\n"", barang.harga);""perintah ini digunakan untuk mencetak harga barang menggunakan atribut harga dari parameter barang dengan format rp dan tanpa desimal.""printf(""stok: %d\n"", barang.stok);""perintah ini digunakan untuk mencetak jumlah stok barang menggunakan atribut stok dari parameter barang.""}""perintah ini digunakan untuk menutup fungsi tampilkaninfobarang. ""int main() {""perintah ini digunakan untuk mendeklarasikan fungsi main sebagai titik awal program.""struct kucing kucing;""perintah ini digunakan untuk mendeklarasikan variabel kucing dengan tipe struct kucing.""struct pelanggan pelanggan;""perintah ini digunakan untuk mendeklarasikan variabel pelanggan dengan tipe struct pelanggan.""struct barang barang;""perintah ini digunakan untuk mendeklarasikan variabel barang dengan tipe struct barang. ""printf(""masukkan nama kucing: "");""perintah ini digunakan untuk mencetak instruksi untuk memasukkan nama kucing.""fgets(kucing.nama, sizeof(kucing.nama), stdin);""perintah ini digunakan untuk membaca input nama kucing dari pengguna menggunakan fgets, dan menyimpannya di kucing.nama.""kucing.nama[strcspn(kucing.nama, ""\n"")] = 0;""perintah ini digunakan untuk menghilangkan karakter newline (\n) dari input nama kucing yang dibaca dengan fgets. ""printf(""masukkan jenis ras kucing: "");"" perintah ini digunakan untuk mencetak instruksi untuk memasukkan jenis ras kucing.""fgets(kucing.jenisras, sizeof(kucing.jenisras), stdin);""perintah ini digunakan untuk membaca input jenis ras kucing dari pengguna menggunakan fgets, dan menyimpannya di kucing.jenisras. ""kucing.jenisras[strcspn(kucing.jenisras, ""\n"")] = 0;"" perintah ini digunakan untuk menghilangkan karakter newline (\n) dari input jenis ras kucing yang dibaca dengan fgets. ""printf(""masukkan harga kucing: "");""perintah ini digunakan untuk mencetak instruksi untuk memasukkan harga kucing.""scanf(""%f"", &kucing.harga);""perintah ini digunakan untuk membaca input harga kucing dari pengguna menggunakan scanf, dan menyimpannya di kucing.harga.""getchar();""perintah ini digunakan untuk menangkap karakter newline yang tertinggal di buffer setelah input scanf.” printf(""\n"");”digunakan untuk mencetak baris kosong, memberikan ruang visual antara output yang berbeda. ""printf(""masukkan nama pelanggan: "");""menginstruksikan pengguna untuk memasukkan nama pelanggan.""fgets(pelanggan.nama, sizeof(pelanggan.nama), stdin);""membaca input dari pengguna untuk nama pelanggan dan menyimpannya ke dalam atribut nama dari struktur pelanggan. fgets juga menjaga batas panjang input.""pelanggan.nama[strcspn(pelanggan.nama, ""\n"")] = 0;""menghapus karakter newline (\n) dari akhir string, yang dihasilkan oleh fgets, untuk memastikan bahwa string berakhir dengan karakter null (\0).""printf(""masukkan nomor telepon pelanggan: "");""meminta pengguna untuk memasukkan nomor telepon pelanggan.""fgets(pelanggan.nomortelepon,sizeof(pelanggan.nomortelepon), stdin);""membaca input dari pengguna untuk nomor telepon dan menyimpannya ke dalam atribut nomortelepon dari struktur pelanggan.""pelanggan.nomortelepon[strcspn(pelanggan.nomortelepon, ""\n"")] = 0;""menghapus karakter newline (\n) dari akhir string nomor telepon untuk menjaga format string yang benar.""printf(""\n"");""mencetak baris kosong untuk memberi jarak sebelum input berikutnya. ""printf(""masukkan nama barang: "");""menginstruksikan pengguna untuk memasukkan nama barang.""fgets(barang.nama, sizeof(barang.nama), stdin);""membaca input untuk nama barang dan menyimpannya ke dalam atribut nama dari struktur barang.""barang.nama[strcspn(barang.nama, ""\n"")] = 0;""menghapus karakter newline dari akhir string nama""barang.""printf(""masukkan harga barang: ""); meminta pengguna untuk memasukkan harga barang.""scanf(""%f"", &barang.harga);membaca input harga barang dari pengguna dan menyimpannya sebagai tipe data float di atribut harga dari struktur barang.""printf(""masukkan stok barang: "");""menginstruksikan pengguna untuk memasukkan jumlah stok barang.""scanf(""%d"", &barang.stok);""membaca input jumlah stok barang dari pengguna dan menyimpannya sebagai tipe data integer di atribut stok dari struktur barang.""printf(""\n"");""mencetak baris kosong untuk memberi jarak sebelum menampilkan informasi. ""tampilkaninfokucing(kucing);""memanggil fungsi tampilkaninfokucing untuk menampilkan informasi mengenai objek kucing.""printf(""\n"");""mencetak baris kosong untuk memberi jarak sebelum menampilkan informasi pelanggan. ""tampilkaninfopelanggan(pelanggan);""memanggil fungsi tampilkaninfopelanggan untuk menampilkan informasi mengenai objek pelanggan.""printf(""\n"");""mencetak baris kosong untuk memberi jarak sebelum menampilkan informasi barang. ""tampilkaninfobarang(barang);""memanggil fungsi tampilkaninfobarang untuk menampilkan informasi mengenai objek barang.""return 0;""mengakhiri fungsi main dan mengembalikan nilai 0, yang menunjukkan bahwa program telah berjalan dengan sukses tanpa kesalahan. output program 1. tampilan output program",5b86022bc107fb40c488804dcfa4c4edb3ec24afa6fb7a118c28812d7146cd10,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffb46fb68f7890d971c2,LA1_Raka Pratama_51423218_StrukDat.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:52:04.435Z,"logika #include <stdio.h> digunakan untuk fungsi input/output standar, seperti printf() dan scanf(). #include <string.h> digunakan untuk fungsi manipulasi string, seperti strcpy().struct mahasiswa {mendefinisikan sebuah struktur bernama mahasiswa yang berfungsi seperti kelas dalam pemrograman berorientasi objek. char nama[50]; digunakan untuk menyimpan nama mahasiswa (maksimum 49 karakter + 1 untuk karakter null). int umur; digunakan untuk menyimpan umur mahasiswa. float ipk; digunakan untuk menyimpan indeks prestasi kumulatif (ipk) mahasiswa. struct mahasiswa buatmahasiswa(char nama[], int umur, float ipk) { digunakan untuk membuat objek mahasiswa baru. struct mahasiswa mhs; sebuah variabel lokal mhs dideklarasikan. strcpy(mhs.nama, nama);: menggunakan fungsi strcpy untuk menyalin nama dari parameter ke anggota nama di dalam struct. mhs.umur = umur;: menetapkan umur dari parameter ke anggota umur di dalam struct. mhs.ipk = ipk;: menetapkan ipk dari parameter ke anggota ipk di dalam struct. void tampilkanmahasiswa(struct mahasiswa mhs) digunakan untuk menampilkan informasi tentang mahasiswa. printf(""nama: %s\n"", mhs.nama); digunakan untuk mencetak nama mahasiswa. printf(""umur: %d\n"", mhs.umur); digunakan untuk mencetak umur. printf(""ipk: %.2f\n"", mhs.ipk); digunakan untuk mencetak nilai ipk int jumlahmahasiswa = 3; berfungsi untuk menyimpan jumlah mahasiswa yang akan dimasukkan ke dalam array. dalam contoh ini, jumlahnya diatur menjadi 3. struct mahasiswa mahasiswaarray[jumlahmahasiswa]; digunakan untuk membuat sebuah array yang berisi elemen-elemen bertipe struct mahasiswa. mahasiswaarray[0] = buatmahasiswa(""raina"", 20, 3.75); digunakan untuk membuat objek mahasiswa dan mengembalikan nilai yang dimasukkan ke dalam array, sama seperti riffat dan raka. for (int i = 0; i < jumlahmahasiswa; i++) { digunakan untuk menampilkan data masing-masing mahasiswa di dalam array. printf(""data mahasiswa %d:\n"", i + 1); digunakan untuk mencetak dan menambahkan nomor mahasiswa untuk setiap data yang ditampilkan. tampilkanmahasiswa(mahasiswaarray[i]); digunaknn untuk mencetak informasi mahasiswa pada indeks i dalam array. return 0; digunakan untuk menandakan bahwa program selesai dieksekusi dengan sukses. output",c2b2bfa40ae5f63c69a20f83d4ca90f0df6f130e844b02553b38e57033521a13,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffb46fb68f7890d971c3,LA1 Rendi Pranoto 51423268.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:52:04.567Z,"logika program pertama-tama code awal dari bahsa c++ disini ada #include <iostream> ini adalah library yang digunakan input dan output, digunakan juga cin untuk input dan cout untuk output. lalu #include <string> ini digunakan untuk memakai tipe data string. pada program ini struktur student mendefinisikan tipe data untuk menyimpan informasi siswa dengan tiga atribut: id sebagai identifikasi unik bertipe integer, name sebagai array karakter untuk menyimpan nama siswa hingga 50 karakter, dan grade bertipe float untuk menyimpan nilai akademik. pada program berikutnya dalam fungsi main, sebuah array bernama students dideklarasikan untuk menyimpan tiga elemen yang masing-masing merupakan struktur student. array ini diinisialisasi dengan data tiga siswa: ahmad dengan id 1 dan nilai 85.5, siti dengan id 2 dan nilai 90.0, serta budi dengan id 3 dan nilai 78.0. pada program terakhir sebuah loop for digunakan untuk mengiterasi setiap elemen dalam array students, yang berisi informasi tiga siswa. setiap program mencetak id, nama, dan nilai siswa dengan format yang terstruktur. menggunakan printf, data siswa diakses melalui indeks i untuk menampilkan informasi masing-masing siswa secara jelas, diakhiri dengan baris kosong untuk memisahkan output antar siswa. output program",d7e2f775c034007727a51b263d94082ea85c844ce5bf752c822f6d68f14c2177,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffb46fb68f7890d971c4,LAPORAN AKHIR M1 SD RIVAN ARDI NUGROHO.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:52:04.693Z,"logika program #include <stdio.h> baris ini mengimpor header file standar c yaitu stdio.h, yang menyediakan fungsi untuk melakukan operasi input dan output. array pointer makanan[], peralatan_kantor[], dan item_elektronik[]: ini adalah array dari string (karakter), yang di dalamnya setiap elemen adalah pointer ke string yang menyimpan nama-nama item. string seperti ""roti"" disimpan sebagai array karakter, dan pointer *makanan[] menunjukkan ke alamat memori di mana string tersebut disimpan. printf(""daftar makanan:\n""); mencetak judul ""daftar makanan"" ke layar. for(int i = 0; i < jumlah_makanan; i++): loop ini berjalan dari i = 0 hingga i kurang dari jumlah_makanan (yang sebelumnya dihitung). printf(""%d. %s\n"", i + 1, makanan[i]);: mencetak nomor urut (i + 1) dan item dari array makanan[]. nilai i digunakan untuk mengakses elemen ke-i dari array makanan[]. return 0;: menandakan bahwa program selesai dijalankan dengan sukses. ini adalah standar dalam c bahwa nilai 0 menunjukkan kesuksesan. output program",7e67fd998b1a0f6c6fd16994692310fb132545df8e188e795a5e09e3af4936ab,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffb46fb68f7890d971c5,VIQRI_2IA24_Laporan Akhir Praktikum 1.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:52:04.995Z,"logika program tersebut merupakan contoh sederhana sistem perpustakaan yang menggunakan bahasa pemrograman c. program ini mendefinisikan tiga struktur data : buku, anggota dan transaksi yang mewakili tiga entitas utama dalam sistem perpustakaan. program ini merupakan contoh sederhana sistem perpustakaan yang menggunakan bahasa pemrograman c. program ini dimulai dengan menyertakan header file stdio.h dan string.h . header stdio.h menyediakan fungsi-fungsi input/output standar seperti printf dan scanf , sedangkan header string.h menyediakan fungsi-fungsi untuk manipulasi string seperti strcpy . selanjutnya, program mendefinisikan tiga struktur data: buku , anggota , dan transaksi . struktur buku menyimpan data tentang sebuah buku, yang terdiri dari judul, penulis, dan kode buku. struktur anggota menyimpan data tentang seorang anggota perpustakaan, yang terdiri dari nama dan id anggota. struktur transaksi menyimpan data tentang sebuah transaksi peminjaman, yang terdiri dari data buku yang dipinjam, data anggota yang meminjam, dan tanggal peminjaman. kemudian, program mendefinisikan beberapa fungsi yang digunakan untuk mengelola data buku, anggota, dan transaksi. fungsi tambahbuku digunakan untuk menambahkan data buku baru ke dalam sistem. fungsi tambahanggota digunakan untuk menambahkan data anggota baru ke dalam sistem. selanjutnya, fungsi buattransaksi digunakan untuk membuat transaksi peminjaman baru. fungsi tampilkanbuku digunakan untuk menampilkan data buku ke layar. fungsi tampilkananggota digunakan untuk menampilkan data anggota ke layar. fungsi tampilkantransaksi digunakan untuk menampilkan data transaksi peminjaman ke layar. dalam fungsi utama main , program membuat dua objek buku ( buku1 dan buku2 ) dan satu objek anggota ( anggota1 ). program kemudian memanggil fungsi tambahbuku untuk mengisi data ke dalam objek buku1 dan buku2 . program juga memanggil fungsi tambahanggota untuk mengisi data ke dalam objek anggota1 . selanjutnya, program memanggil fungsi buattransaksi untuk membuat transaksi peminjaman buku buku1 oleh anggota anggota1 pada tanggal ""2024-10-17"". terakhir, program memanggil fungsi tampilkantransaksi untuk menampilkan data transaksi peminjaman ke layar. output",2e60744e01b0f2aaddc94fc39041ffcd8e0ab8901277efb8f164bc5eab66a290,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
687dffb56fb68f7890d971c6,LA1_Zidan Putra Wikandana_2IA24.pdf,uploaded_reports/b8a6477b-696c-4347-a2ca-2d193e0ee150_SD (2IA24)-Laporan Akhir Pertemuan 1-9322.zip,2025-07-21T08:52:05.244Z,"logika program menyertakan file header yang diperlukan untuk operasi input/output ( stdio.h) dan manipulasi string ( string.h).baris-baris ini mendefinisikan tiga struktur: book, member, dan loan. setiap struktur memiliki kumpulan kolomnya sendiri untuk menyimpan informasi yang relevan.baris-baris ini mendeklarasikan array untuk menyimpan contoh struktur book, member, dan loan, dengan kapasitas maksimum masing-masing 100 elemen. tiga penghitung ( book count, member count, dan loan count) diinisialisasi untuk melacak jumlah elemen dalam setiap array. . fungsi ini menambahkan buku baru ke booksarray. fungsi ini mengambil empat parameter: id, title, author, dan year. fungsi ini menetapkan nilai-nilai ini ke kolom yang sesuai pada book struktur dan menambah book count penghitung.fungsi ini menambahkan anggota baru ke membersarray. fungsi ini memerlukan tiga parameter: id, name, dan address. fungsi ini menetapkan nilai-nilai ini ke kolom yang sesuai pada member struktur dan menambah member count penghitung.fungsi ini menambahkan pinjaman baru ke loansarray. fungsi ini mengambil lima parameter: loanid, memberid, bookid, loandate, dan returndate. fungsi ini menetapkan nilai-nilai ini ke bidang-bidang yang sesuai dari loan struktur dan menambah loan count penghitung.codingan ini juga memiliki fungsi display book/menampilkan daftar buku. fungsi ini menampilkan daftar anggota dalam members array.fungsi ini menampilkan daftar pinjaman dalam loans array.dalam main fungsi tersebut, tiga buku, dua anggota, dan dua pinjaman ditambahkan ke masing-masing array menggunakan fungsi addbook, addmember, dan addloan. fungsi displaybooks, displaymembers, dan display loans dipanggil untuk menampilkan daftar buku, anggota, dan pinjaman, masing-masing. output",26e534be577987f721827745da68fd1071d6c88d9d864fea08b930396ee9e3d0,f671cba5-45ee-4dfd-8bf1-1c7d0e819b0f
6881daa0ede64515650b1a50,Dokumen Uji Coba B.pdf,uploaded_reports/6927bda1-9223-4781-b3f5-c43b7647e6d0_Dokumen Uji Coba B.pdf,2025-07-24T07:02:56.748Z,"logika  program ini adalah implementasi linked list sederhana dalam bahasa c, yang menyediakan fungsi untuk menambah, menampilkan, mencari, dan menghapus data dari dalam linked list. program ini dimulai dengan mendefinisikan struktur node, yang memiliki dua anggota: info, yang menyimpan data integer, dan next, yang merupakan pointer ke node berikutnya dalam linked list. program juga menggunakan typedef struct node *simpul untuk mendefinisikan tipe data simpul sebagai pointer ke node. di dalam fungsi main, beberapa pointer dideklarasikan, termasuk head sebagai pointer awal linked list, tail untuk mengakses node terakhir, serta temp dan prev untuk membantu operasi lainnya. program berisi loop utama yang menampilkan menu dengan lima opsi: insert, view, search, delete, dan keluar. pada opsi insert, program meminta pengguna untuk memasukkan data baru yang akan disimpan dalam linked list. node baru akan dibuat dengan malloc, diisi dengan data, lalu ditambahkan ke akhir linked list. jika linked list kosong, node ini akan menjadi head dan tail; jika tidak, tail diperbarui ke node baru. opsi view menampilkan semua elemen di dalam linked list dari head hingga tail. program melintasi linked list dan mencetak nilai info dari setiap node hingga akhir. opsi search memungkinkan pengguna mencari data tertentu dalam linked list. program mencari node dengan nilai info yang sesuai, lalu menampilkan pesan apakah data ditemukan atau tidak. opsi delete memungkinkan pengguna menghapus node dengan nilai tertentu dari linked list. jika node ditemukan, program meminta konfirmasi pengguna untuk menghapusnya. jika pengguna memilih ""y"", node tersebut akan dihapus dan linked list diperbarui. pointer head atau tail juga diperbarui jika node yang dihapus adalah node pertama atau terakhir. jika node tidak ditemukan, program menampilkan pesan ""data tidak ditemukan"". loop utama terus berjalan sampai pengguna memilih opsi ""keluar"" (pilih 5). program kemudian mengakhiri eksekusi dengan menampilkan pesan untuk menekan tombol apa saja agar keluar. output",e1768802ed40487085c43e6413c155240117f667eb4a03bd3cb61b4b4200330c,c57ccfb6-fadc-4b2b-bde6-0fae426829e7
6881daa1ede64515650b1a51,Dokumen Uji Coba C.pdf,uploaded_reports/9928eeaf-b57e-4aef-afdf-92c8690cc691_Dokumen Uji Coba C.pdf,2025-07-24T07:02:57.292Z,"logika program kode ini mendefinisikan struktur data untuk sebuah node dalam linked list menggunakan bahasa c. struktur `node` memiliki dua atribut: `info`, yang bertipe `int` untuk menyimpan data, dan `next`, yang merupakan pointer ke node berikutnya dalam linked list. struktur ini akan digunakan untuk membangun daftar terhubung (linked list) yang dapat menyimpan serangkaian elemen. bagian kode ini adalah awal dari fungsi `main` untuk program linked list dalam bahasa c. kode mendefinisikan tipe `simpul` sebagai pointer ke struktur `node`. di dalam `main`, beberapa pointer diinisialisasi: `baru`, `head`, `tail`, `temp`, dan `prev`, serta beberapa variabel untuk pilihan pengguna dan data. program kemudian membersihkan layar menggunakan `system(""cls"")` dan menampilkan menu interaktif yang memungkinkan pengguna untuk memilih opsi untuk menyisipkan, melihat, mencari, atau menghapus elemen dalam linked list, serta untuk keluar dari program. bagian kode ini menangani opsi pertama dari menu, yaitu menyisipkan data ke dalam linked list. setelah pengguna memasukkan data, program mengalokasikan memori untuk node baru menggunakan `malloc` dan menyimpan data tersebut dalam atribut `info` dari node baru. jika linked list kosong (ketika `head` adalah `null`), node baru menjadi `head` dan `tail`. jika linked list sudah memiliki elemen, node baru disambungkan di belakang node terakhir (tail), dan `tail` diperbarui untuk menunjuk ke node baru tersebut. ini memastikan linked list selalu terhubung dengan benar. bagian kode ini menangani opsi kedua dari menu, yaitu menampilkan semua elemen dalam linked list. program mulai dengan mengatur pointer `temp` ke `head`, yang merupakan node pertama dalam linked list. selama `temp` tidak `null`, program mencetak nilai `info` dari node saat ini dan kemudian menggeser `temp` ke node berikutnya menggunakan `temp- >next`. proses ini berlanjut hingga semua elemen di linked list ditampilkan, dan akhirnya mencetak baris baru untuk format yang lebih baik. bagian kode ini menangani opsi ketiga dari menu, yaitu mencari sebuah angka dalam linked list. program meminta pengguna untuk memasukkan angka yang ingin dicari, kemudian memulai pencarian dari `head`. selama `temp` tidak `null` dan nilai `info` dari node saat ini tidak sama dengan angka yang dicari, program akan menggeser `temp` ke node berikutnya. jika setelah pencarian `temp` tidak `null` dan nilai `info` yang ditemukan sama dengan angka yang dicari, program mencetak ""data ditemukan"". jika tidak, program mencetak ""data tidak ditemukan"", menandakan bahwa angka tersebut tidak ada dalam linked list. bagian kode ini menangani penghapusan angka dari linked list. setelah meminta pengguna untuk memasukkan angka yang ingin dihapus, program mencari node yang sesuai menggunakan pointer `temp` dan melacak node sebelumnya dengan pointer `prev`. jika node ditemukan, program meminta konfirmasi dari pengguna untuk melanjutkan penghapusan. jika pengguna setuju, program menangani beberapa skenario: jika node yang dihapus berada di tengah atau akhir, pointer `prev` diatur untuk melewati node tersebut; jika node yang dihapus adalah satu-satunya node dalam linked list, `head` diatur ke `null`; jika node yang dihapus adalah `head`, pointer `head` diperbarui untuk menunjuk ke node berikutnya; dan jika node tersebut berada di akhir, `tail` juga diperbarui. setelah penghapusan, memori untuk node yang dihapus dibebaskan, dan program memberi tahu pengguna bahwa data telah berhasil dihapus, atau jika node tidak ditemukan, mencetak pesan yang sesuai. bagian kode ini mengakhiri loop program dengan menggunakan `do...while`, yang akan terus menampilkan menu dan memproses pilihan pengguna hingga pengguna memilih opsi untuk keluar (5). setelah pilihan 5 dipilih, program keluar dari loop dan mengembalikan nilai 0, menandakan bahwa eksekusi program selesai dengan sukses. dengan demikian, seluruh fungsi `main` memberikan pengguna kesempatan untuk berinteraksi dengan linked list hingga mereka memutuskan untuk menutup program. output program",4fcbc794fee168d3a4c7a7a3ed3fbedfa5c12e98795d41635bec9a1bca883664,c57ccfb6-fadc-4b2b-bde6-0fae426829e7
6881daa1ede64515650b1a52,Dokumen Uji Coba D.pdf,uploaded_reports/3265c58a-2659-4a26-9503-360fe00fee29_Dokumen Uji Coba D.pdf,2025-07-24T07:02:57.835Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,c57ccfb6-fadc-4b2b-bde6-0fae426829e7
6881daa2ede64515650b1a53,Dokumen Uji Coba A.pdf,uploaded_reports/c27d04ec-9282-487e-977a-5f7860b126c1_Dokumen Uji Coba A.pdf,2025-07-24T07:02:58.495Z,"logika program program ini mendefinisikan struktur data linked list dengan menggunakan bahasa c. struktur node terdiri dari dua anggota: info, yang menyimpan data bertipe integer, dan next, yang merupakan pointer ke node berikutnya dalam daftar. tipe data baru simpul dideklarasikan sebagai pointer ke struct node, memudahkan penggunaan pointer ini untuk mengelola elemen- elemen dalam linked list. dengan struktur ini, program dapat membuat, menyisipkan, menghapus, atau mengakses elemen-elemen dalam linked list. implementasi fungsi main untuk program linked list yang sebelumnya didefinisikan. di sini, beberapa variabel pointer untuk node (baru, head, tail, temp, dan prev) dideklarasikan untuk mengelola linked list. program kemudian menginisialisasi head dan tail sebagai null, menandakan bahwa linked list masih kosong. setelah itu, program menampilkan menu interaktif kepada pengguna yang berisi pilihan untuk menyisipkan elemen, melihat daftar, mencari elemen, menghapus elemen, atau keluar dari program. pengguna diminta untuk memilih opsi dengan memasukkan angka yang sesuai. dengan struktur do-while, program akan terus berulang menampilkan menu hingga pengguna memilih untuk keluar, memungkinkan pengguna untuk melakukan berbagai operasi pada linked list. pada bagian ini, program mengimplementasikan dua opsi dari menu interaktif: menyisipkan data ke dalam linked list dan menampilkan semua elemen dalam daftar. untuk kasus pertama (menyisipkan data), program meminta pengguna memasukkan nilai integer yang ingin disisipkan. kemudian, program menggunakan fungsi malloc untuk mengalokasikan memori untuk node baru (baru) dan mengisinya dengan data yang diberikan. jika head masih null, ini berarti linked list kosong, sehingga node baru menjadi head dan tail. jika tidak, node baru ditambahkan di akhir daftar; pointer next dari tail diperbarui untuk menunjuk ke node baru, dan tail diperbarui ke node baru tersebut. untuk kasus kedua (menampilkan data), program memulai dengan temp yang diatur ke head. selama temp tidak null, program mencetak nilai info dari node saat ini dan kemudian menggeser temp ke node berikutnya dengan mengikuti pointer next. setelah semua elemen ditampilkan, program mencetak newline untuk menandakan akhir dari output. dengan cara ini, pengguna dapat melihat semua elemen yang ada dalam linked list. bagian ini melanjutkan program dengan mengimplementasikan dua opsi tambahan: pencarian elemen dalam linked list dan penghapusan elemen. untuk opsi ketiga (mencari angka), program meminta pengguna untuk memasukkan nilai yang ingin dicari. dengan menggunakan loop while, program menelusuri linked list, memeriksa setiap node apakah nilai info dari node tersebut sama dengan nilai yang dicari. jika ditemukan, program mencetak ""data ditemukan"". jika pencarian selesai dan tidak ada node yang cocok, program akan menampilkan pesan ""data tidak ditemukan"". pada opsi keempat (menghapus angka), program meminta pengguna untuk memasukkan nilai yang ingin dihapus. mirip dengan pencarian, program menggunakan loop while untuk menelusuri linked list, menyimpan pointer prev untuk mengingat node sebelumnya. jika node yang dicari ditemukan, program menanyakan konfirmasi pengguna untuk menghapus node tersebut. jika pengguna menjawab 'y', program akan memperbarui pointer untuk menghapus node dari linked list sesuai dengan posisi node: jika node yang dihapus bukan head dan memiliki node berikutnya, pointer next dari prev diatur ke node berikutnya. jika node yang dihapus adalah head dan merupakan satu-satunya node, head diatur ke null. jika node yang dihapus adalah head tetapi memiliki node berikutnya, head diatur ke node berikutnya. jika node yang dihapus adalah tail, prev->next diatur ke null, dan tail diperbarui menjadi prev. jika pengguna memilih untuk tidak menghapus, program mencetak pesan pembatalan. jika nilai yang ingin dihapus tidak ditemukan, program akan memberi tahu pengguna bahwa data tidak ditemukan. dengan cara ini, program memberikan fungsionalitas lengkap untuk pencarian dan penghapusan elemen dalam linked list. loop do-while diakhiri dengan kondisi pilih != 5, yang berarti program akan terus berulang dan menampilkan menu hingga pengguna memilih opsi untuk keluar (angka 5). setelah pengguna memilih untuk keluar, program mencetak pesan ""press any key to exit..."" untuk memberi tahu pengguna bahwa program akan segera ditutup. kemudian, fungsi getch() digunakan untuk menunggu input dari pengguna sebelum mengakhiri program, sehingga pengguna memiliki kesempatan untuk melihat pesan tersebut sebelum jendela konsol ditutup. terakhir, program mengembalikan nilai 0 dari fungsi main, menandakan bahwa program telah selesai dijalankan dengan sukses. output program insert data view data search data delete data keluar/exit",125ce9526d1d6735cb392c5a4377013b850b3c9584d253f61931de204bc51bab,c57ccfb6-fadc-4b2b-bde6-0fae426829e7
